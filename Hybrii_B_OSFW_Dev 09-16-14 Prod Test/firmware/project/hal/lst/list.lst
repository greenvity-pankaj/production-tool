C51 COMPILER V9.52.0.0   LIST                                                              01/10/2015 21:25:25 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LIST
OBJECT MODULE PLACED IN .\obj\list.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\common\list.c LARGE OPTIMIZE(9,SPEED) BROWSE INTVECTOR(0X2100) INCDIR
                    -(..\..\common;..\..\project\hal\src;..\..\hpgp\src\mux;..\..\hpgp\src\link;..\..\hpgp\src\ctrl;..\..\hpgp\src\nma;..\..\
                    -hal;.\src;..\..\hpgp\src\hal;..\..\hpgp\src\sap;..\..\hpgp\src\test;..\..\hpgp\src\;..\..\common\datapath;..\..\hpgp\src
                    -\route;..\..\..\components\utilities\datatype\inc;..\..\..\components\utilities\event\inc;..\..\..\components\utilities\
                    -linklist\inc;..\..\..\components\utilities\timer\inc;..\..\app_support;..\..\..\sampleapp\src;..\..\..\sampleapp\inc;..\
                    -..\..\components\hpgp\inc;..\..\..\components\aps\inc) DEFINE(P8051,HYBRII_8051,HYBRII_HPGP,HYBRII_ASIC,PLC_SW_SYNC=1,in
                    -line,HPGP_HAL_TEST,RTX51_TINY_OS,_TIMER_INTERRUPT_,SNIFFER,Hybrii_B,NEW_SYNC,_TIMER_INTERRUPT_,HYBRII_B,HW_SPI_TX_CRC,HW
                    -_SPI_RX_CRC,_CRC_VERIFY_,HYBRII_SPI,SNIFFER,HYBRII_ETH,B_ASICPLC,FREQ_DETECT,PROD_TEST) DEBUG OBJECTEXTEND PRINT(.\lst\l
                    -ist.lst) TABS(2) OBJECT(.\obj\list.obj)

line level    source

   1          /** =======================================================
   2           * @file list.c
   3           *
   4           *  @brief Circular Linked Lists
   5           *
   6           *  Copyright (C) 2010-2011, Greenvity Communications, Inc.
   7           *  All Rights Reserved
   8           * ========================================================*/
   9          
  10          #include "papdef.h"
  11          
  12          
  13          #include "list.h"
  14          
  15          
  16          #define SLIST_GetEntry(link, type, member)  ( \
  17                  (type *)( (char *) link - offsetof(type,member) ))
  18                  
  19          #define SLINK_Init(link) (((sSlink *)link)->next = NULL)
  20          
  21          void SLIST_Init(struct slist *list) __REENTRANT__
  22          {
  23   1          list->head = NULL;
  24   1          list->tail = NULL;
  25   1      //    list->len = 0;
  26   1      }
  27          
  28          /* Add a link to list head */
  29          void SLIST_Push(struct slist *list, struct slink *link) __REENTRANT__
  30          {
  31   1          if(list->head == NULL)
  32   1          {
  33   2              //queuee is empty
  34   2              list->head = link;
  35   2              list->tail = link;
  36   2              link->next = NULL;
  37   2          }
  38   1          else
  39   1          {
  40   2              link->next = list->head;
  41   2              list->head = link;
  42   2          }
  43   1          //list->len++;
  44   1      }
  45          
  46          
  47          /* add a link to the list tail */
C51 COMPILER V9.52.0.0   LIST                                                              01/10/2015 21:25:25 PAGE 2   

  48          void SLIST_Put(struct slist *list, struct slink *link) __REENTRANT__
  49          {
  50   1          if(list->tail == NULL)
  51   1          {
  52   2              //queue is empty
  53   2              list->head = link;
  54   2              list->tail = link;
  55   2              link->next = NULL;
  56   2          }
  57   1          else
  58   1          {
  59   2      //        link->next = list->tail->next;
  60   2              list->tail->next = link;
  61   2        list->tail = link;
  62   2              link->next = NULL;
  63   2          }
  64   1          //list->len++;
  65   1      }
  66          
  67          
  68          
  69          /* Add a link after a (pre)link in the list */
  70          void SLIST_Add(struct slist *list, struct slink *prelink, struct slink *link) __REENTRANT__
  71          {
  72   1          link->next = prelink->next;
  73   1          prelink->next = link;
  74   1          if(list->tail == prelink)
  75   1          {
  76   2              list->tail = link;
  77   2          }
  78   1      }
  79          
  80          
  81          /* remove a link after a (pre)link in the list */
  82          void SLIST_Remove(struct slist *list, struct slink *prelink, struct slink *link) __REENTRANT__
  83          {
  84   1          prelink->next = link->next;
  85   1          if(list->tail == link)
  86   1          {
  87   2              list->tail = prelink;
  88   2          }
  89   1      }
  90          
  91          
  92          
  93          /* remove a link from the head of the list */
  94          struct slink * SLIST_Pop (struct slist *list) __REENTRANT__
  95          {
  96   1          struct slink *link = list->head;
  97   1          if( list->tail == link)
  98   1      //    if( list->head == NULL)
  99   1          {
 100   2              //at most one link in the queue
 101   2              list->head = NULL;
 102   2        list->tail = NULL;
 103   2              //list->len = 0;
 104   2          }
 105   1          else
 106   1          {
 107   2              list->head = list->head->next;
 108   2      //        list->len--;
 109   2          }
C51 COMPILER V9.52.0.0   LIST                                                              01/10/2015 21:25:25 PAGE 3   

 110   1        
 111   1          return link;
 112   1      }
 113          
 114          
 115          /**
 116           * DLIST_Push_ - add a new link at head (add after the list)
 117           * @link: new link to be added
 118           * @list: list head to add it after
 119           
 120           * Insert a new entry after the specified head.
 121           * This is good for implementing stacks.
 122           */
 123          void DLIST_Push(struct dlink *list, struct dlink *link) __REENTRANT__
 124          {
 125   1          list->next->prev = link;
 126   1          link->next = list->next;
 127   1          link->prev = list;
 128   1          list->next = link;
 129   1      }
 130          
 131          /**
 132           * DLIST_Put - add a new link at the tail (add before list)
 133           * @link: new link to be added
 134           * @list: list head to add it before
 135           *
 136           * Insert a new link before the specified head.
 137           * This is useful for implementing queues.
 138           */
 139          void DLIST_Put(struct dlink *list, struct dlink *link) __REENTRANT__
 140          {
 141   1          link->prev = list->prev;
 142   1          list->prev->next = link;
 143   1          link->next = list;
 144   1          list->prev = link;
 145   1      }
 146          
 147          /**
 148           * list_del - deletes entry from list.
 149           * @entry: the element to delete from the list.
 150           * Note: list_empty on entry does not return true after this, the entry is
 151           * in an undefined state.
 152           */
 153          void DLIST_Remove(struct dlink *link) __REENTRANT__
 154          {
 155   1          link->next->prev = link->prev;
 156   1          link->prev->next = link->next;
 157   1          link->next = NULL; 
 158   1          link->prev = NULL; 
 159   1      }
 160          
 161          
 162          /** =========================================================
 163           *
 164           * Edit History
 165           *
 166           * $Source: /home/cvsrepo/Hybrii_B_OSFW_Dev/firmware/common/list.c,v $
 167           *
 168           * $Log: list.c,v $
 169           * Revision 1.2  2014/05/28 10:58:58  prashant
 170           * SDK folder structure changes, Uart changes, removed htm (UI) task
 171           * Varified - UM, LM - iperf (UDP/TCP), overnight test pass
C51 COMPILER V9.52.0.0   LIST                                                              01/10/2015 21:25:25 PAGE 4   

 172           *
 173           * Revision 1.1  2013/12/18 17:03:14  yiming
 174           * no message
 175           *
 176           * Revision 1.1  2013/12/17 21:42:26  yiming
 177           * no message
 178           *
 179           * Revision 1.2  2013/01/24 00:13:46  yiming
 180           * Use 01-23-2013 Hybrii-A code as first Hybrii-B code base
 181           *
 182           * Revision 1.4  2012/07/19 21:46:07  son
 183           * Prepared files for zigbee integration
 184           *
 185           * Revision 1.2  2012/05/24 04:50:25  yuanhua
 186           * define list functions as reentrant
 187           *
 188           * Revision 1.1  2012/05/12 04:11:46  yuanhua
 189           * (1) added list.h (2) changed the hal tx for the hw MAC implementation.
 190           *
 191           *
 192           * ========================================================*/
 193          
 194          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    933    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      54
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
