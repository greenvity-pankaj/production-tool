C51 COMPILER V9.54   UART                                                                  10/07/2016 17:55:48 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\uart.c OPTIMIZE(8,SIZE) BROWSE INCDIR(..\src;C:\Keil\C51\INC;..\s
                    -rc) DEFINE(IDATA_OPT,FEATURE_CHIPERASE_) DEBUG OBJECTEXTEND CODE PRINT(.\uart.lst) TABS(2) PREPRINT(.\uart.i) OBJECT(.\u
                    -art.obj)

line level    source

   1          /*
   2          * Description : Uart interface implement - 8051
   3          *
   4          * Copyright (c) 2010-2011 Greenvity Communications, Inc.
   5          * All rights reserved.
   6          *
   7          * Author      : Peter Nguyen
   8          *
   9          * Purpose :
  10          *         To handle build-in uart related functions.
  11          *
  12          * File: uart.c
  13          */
  14          
  15          //#include "stdafx.h"
  16          #include <reg51.h>
  17          #include <stdio.h>
  18          #include <cmem_ctrl.h>
  19          #include <typedef.h>
  20          #include <hex_file_hdl.h>
  21          #include <macro_def.h>
  22          
  23          void ComInit();
  24          char _getkey();
  25          char _get1char();
  26          char putchar(char);
  27          
  28          
  29          
  30          void ComInit()
  31          {
  32   1        TMOD  = 0x21;     //Timer1: reload, timer0: 16bit counter
  33   1      
  34   1        //TH1 = 249;    //Reload values for 9600bps/12.5MHz clk
  35   1        //TH1   = 251;    //Osc 4.6Mhz, br 4.8kbps
  36   1        //TH1     = 0xE6;     //24MHZ / 4.8Kbps
  37   1        //TH1     = 0xF3;     //24MHz 9.6Kbps 
  38   1        //TH1     = 0xE5;   //25MHz @ 4.8Kbps
  39   1        //TH1     = 0xF9;     //12.5MHz @ 9.6Kbps
  40   1        //TH1     = 0xFA;     //11MHz @ 9.6Kbps
  41   1        TH1     =  0xF2;    //25MHz @ 9.6Kbps
  42   1        //TH1     = 0xD7;     //12.5MHz @ 1655bps (x12 = 19200)
  43   1      
  44   1        PCON  = 0x80;     //Set double baurate
  45   1        IE0     = 0x0;          //Disable all interrupts
  46   1        SCON  = 0x50;   //8bit mode, rx enable scon.4 = 1
  47   1        TR1     = 1;    //Turn on timer1
  48   1        TI      = 0;
  49   1        RI      = 0;
  50   1      }
  51          
  52          #if 0
              char _getkey()
C51 COMPILER V9.54   UART                                                                  10/07/2016 17:55:48 PAGE 2   

              {
                  char idata c;                               7                       
                  do
                  {
                      while (RI == 0);
                      RI = 0;
                      c = SBUF;
                  } while (c == 0x11);    // Ignore 0x11 - XOn sync signal from Keil
                  return c;
              }
              #endif
  65          char putchar(char c)
  66          {
  67   1          if (c == '\n')  
  68   1          {
  69   2              TI = 0;
  70   2              SBUF = '\r';        // output CR before LF
  71   2              while (TI == 0);
  72   2              TI = 0;
  73   2          }
  74   1          TI = 0;
  75   1          SBUF = c;        // output CR before LF
  76   1          while (TI == 0);
  77   1          TI = 0;
  78   1          return c;
  79   1      }
  80          
  81          #if 1
  82          //***************************************************************
  83          //
  84          //***************************************************************
  85          char _get1char()
  86          {
  87   1        char idata c;
  88   1        c = 0;
  89   1        while (RI==0);
  90   1        c = SBUF;
  91   1        RI = 0;
  92   1        return c;
  93   1      }
  94          #endif
  95          
  96          
  97          /*
  98          void CmdGet(u8 idata *CmdBufPnt)
  99          {
 100              volatile u8 idata c;
 101              volatile u16 idata idx = 0;
 102              while (1)
 103              {
 104                  c = _getkey();
 105          
 106                  switch (c)
 107                  {
 108                  case '\b':    // backspace
 109                      if (idx > 0)
 110                      {
 111                          printf("\b \b");
 112                          idx--;
 113                      }
 114                      break;
 115          
C51 COMPILER V9.54   UART                                                                  10/07/2016 17:55:48 PAGE 3   

 116                  case 0x1B:    // ESC
 117                  case '`':
 118                      *CmdBufPnt = 0;
 119                      printf("\n");
 120                      return;
 121                      while (idx > 0)
 122                      {
 123                          printf("\b \b");
 124                          idx--;
 125                      }
 126                      break;
 127          
 128                  case '\r':    // enter
 129                  case '\n':
 130                      printf(" \n");
 131                
 132                      while (idx < 15)
 133                          *(CmdBufPnt+idx++) = 0;
 134                return;
 135          
 136                  default:
 137                      if (idx > 13)
 138                      {
 139                          idx--;
 140                          putchar('\b');
 141                      }
 142                if (idx < 15)
 143                {
 144                        *(CmdBufPnt+idx) = c;
 145                  putchar(*(CmdBufPnt+idx++));
 146                }
 147                break;
 148                  }
 149              }
 150          }
 151          */
 152          /*
 153          void CmdRead(u8 idata *CmdBufPt)
 154          {
 155              volatile u16 data reg_addr;
 156              volatile u16 data reg_data;
 157            /////Testing 
 158            for (reg_addr=0; reg_addr<16; reg_addr++)
 159            {
 160              printf("%c", *(CmdBufPt+reg_addr));
 161            }
 162            //////////////////////////////
 163          
 164              if (sscanf(CmdBufPt+1, "%x", &reg_addr) < 1)
 165                  return;
 166          
 167              reg_data = (u16)(*((u8 xdata *)reg_addr));
 168              printf("    Reg:  [%04X] --> %02X\n\n", reg_addr, reg_data);
 169          }
 170          */
 171          /*
 172          void CmdWrite(u8 idata *CmdBuf)
 173          {
 174              volatile u16 reg_addr;
 175              volatile u16 reg_data;
 176            /////Testing 
 177            for (reg_addr=0; reg_addr<16; reg_addr++)
C51 COMPILER V9.54   UART                                                                  10/07/2016 17:55:48 PAGE 4   

 178            {
 179              printf("%c", CmdBuf[reg_addr]);
 180            }
 181            //////////////////////////////    
 182              if (sscanf(CmdBuf+1, "%x %x", &reg_addr, &reg_data) < 2)
 183                  return;
 184          
 185              reg_data &= 0x00FF;
 186          
 187              printf("    Reg:  %02X --> [%04X]\n\n", reg_data, reg_addr);
 188          
 189             *((U8 xdata *)reg_addr) = (U8)reg_data;
 190          }
 191          */
 192          /*
 193          void CmdSPIWrite(u8 idata *CmdBufPt)
 194          {
 195              u16 spi_addr;
 196              u16 spi_data;
 197              
 198              if (sscanf(CmdBufPt+1, "%x %x", &spi_addr, &spi_data) < 2)
 199                  return;
 200          
 201              spi_addr &= 0x001F;         // 5-bit addr
 202              spi_data &= 0x03FF;         // 10-bit data
 203          
 204              reg_402 = spi_data;         // LSB [7:0]
 205              reg_403 = spi_data >> 8;    // MSB [9:8]
 206              reg_401 = spi_addr | 0x00;  // bit 7 = 0: write
 207              reg_404 = 0x55;             // dummy write to trigger SPI communication
 208          
 209              printf("    SPI:  %03X --> [%02X]\n\n", spi_data, spi_addr);
 210          }
 211          */
 212          /*
 213          void CmdReadCRam(u8 idata *CmdBufPt)
 214          {
 215             u16 reg_addr;
 216            u8 reg_data;
 217             if (sscanf(CmdBufPt+1, "%x", &reg_addr) < 1)
 218                  return;
 219             reg_data  =  *((U8 code *)reg_addr); 
 220             printf("    CMem:  [%04X] --> %02X", reg_addr, (u16)(reg_data));
 221          }
 222          */
 223          /*
 224          void CmdWriteCRam(u8 idata *CmdBuf)
 225          {
 226             u16 reg_addr;
 227             u16 reg_data;
 228          
 229            EnableWrCRam ();     
 230          
 231            if (sscanf(CmdBuf+1, "%x %x", &reg_addr, &reg_data) < 2)
 232                  return;
 233          
 234            printf("    CMem:  %02X --> [%04X]\n\n", reg_data, (u16)(reg_addr));
 235          
 236              *((U8 xdata *)reg_addr) = reg_data;
 237          #ifdef TEST_LEVEL1
 238            printf ("@C/D RAM = %02X\n",(u16)*((u8 xdata *)reg_addr));
 239          #endif
C51 COMPILER V9.54   UART                                                                  10/07/2016 17:55:48 PAGE 5   

 240            DisableWrCRam ();
 241          #ifdef TEST_LEVEL1
 242            printf ("@Code RAM = %02X\n",(u16)*((U8 code *)reg_addr)); 
 243            printf ("@Data RAM = %02X\n",(u16)*((u8 xdata *)reg_addr));
 244          #endif 
 245          }
 246          */
 247          /*
 248          void CmdHelp()
 249          {
 250              printf
 251              (  
 252                "\n"
 253                  "  S  download code from serial flash\n" 
 254              "  U  download code from UART\n"
 255                "  C  read 1 byte from CRAM (c aaaa)\n"
 256              "\n"
 257              );
 258          }
 259          */
C51 COMPILER V9.54   UART                                                                  10/07/2016 17:55:48 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ComInit (BEGIN)
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
0000 758921            MOV     TMOD,#021H
                                           ; SOURCE LINE # 41
0003 758DF2            MOV     TH1,#0F2H
                                           ; SOURCE LINE # 44
0006 758780            MOV     PCON,#080H
                                           ; SOURCE LINE # 45
0009 C289              CLR     IE0
                                           ; SOURCE LINE # 46
000B 759850            MOV     SCON,#050H
                                           ; SOURCE LINE # 47
000E D28E              SETB    TR1
                                           ; SOURCE LINE # 48
0010 C299              CLR     TI
                                           ; SOURCE LINE # 49
0012 C298              CLR     RI
                                           ; SOURCE LINE # 50
0014 22                RET     
             ; FUNCTION ComInit (END)

             ; FUNCTION _putchar (BEGIN)
                                           ; SOURCE LINE # 65
;---- Variable 'c' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0000 BF0A0A            CJNE    R7,#0AH,?C0002
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
0003 C299              CLR     TI
                                           ; SOURCE LINE # 70
0005 75990D            MOV     SBUF,#0DH
0008         ?C0003:
                                           ; SOURCE LINE # 71
0008 3099FD            JNB     TI,?C0003
000B         ?C0004:
                                           ; SOURCE LINE # 72
000B C299              CLR     TI
                                           ; SOURCE LINE # 73
000D         ?C0002:
                                           ; SOURCE LINE # 74
000D C299              CLR     TI
                                           ; SOURCE LINE # 75
000F 8F99              MOV     SBUF,R7
0011         ?C0005:
                                           ; SOURCE LINE # 76
0011 3099FD            JNB     TI,?C0005
0014         ?C0006:
                                           ; SOURCE LINE # 77
0014 C299              CLR     TI
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0016         ?C0007:
0016 22                RET     
             ; FUNCTION _putchar (END)

             ; FUNCTION _get1char (BEGIN)
C51 COMPILER V9.54   UART                                                                  10/07/2016 17:55:48 PAGE 7   

                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 88
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW c
0003 F6                MOV     @R0,A
0004         ?C0008:
                                           ; SOURCE LINE # 89
0004 3098FD            JNB     RI,?C0008
0007         ?C0009:
                                           ; SOURCE LINE # 90
0007 7800        R     MOV     R0,#LOW c
0009 A699              MOV     @R0,SBUF
                                           ; SOURCE LINE # 91
000B C298              CLR     RI
                                           ; SOURCE LINE # 92
000D E6                MOV     A,@R0
000E FF                MOV     R7,A
                                           ; SOURCE LINE # 93
000F         ?C0010:
000F 22                RET     
             ; FUNCTION _get1char (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     60    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----       1
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
