C51 COMPILER V9.52.0.0   DMM                                                               12/02/2014 14:35:34 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DMM
OBJECT MODULE PLACED IN .\obj\dmm.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\common\dmm.c LARGE OMF2 OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0X2100) 
                    -INCDIR(..\..\..\common\datapath;..\..\..\common\include;..\..\..\hal;..\..\src\crypto;..\..\src\ctrl;..\..\src\hal;..\..
                    -\src\link;..\..\src\mux;..\..\src\nma;..\..\src\route;..\..\src\sap;..\..\src\test;..\..\..\project\hal\src;..\..\..\zig
                    -bee;..\..\..\..\components\aps\inc;..\..\..\..\components\utilities\datatype\inc;..\..\..\..\components\utilities\event\
                    -inc;..\..\..\..\components\utilities\linklist\inc;..\..\..\..\components\utilities\timer\inc;..\..\..\..\sampleapp\src;.
                    -.\..\..\..\sampleapp\inc;..\..\..\common;..\..\..\hpgp;..\..\src;..\..\..\..\components\hpgp\inc;..\..\..\app_support;..
                    -\..\..\HybriiB_configuration_rw\src) NOAREGS DEFINE(inline,P8051,C51,HPGP_HAL,HYBRII_8051,HYBRII_HPGP,CCO_FUNC,STA_FUNC,
                    -HPGP_TEST,HPGP_DEBUG,RTX51_TINY_OS,HYBRII_ASIC,PLC_SW_SYNC,HYBRII_ETH,HPGP_MAC_SAP,NMA,HYBRII_SPI,NEW_SYNC,UM,HYBRII_B,H
                    -ybrii_B,HW_SPI_TX_CRC,HW_SPI_RX_CRC,AUTH_AES,PLC_TEST,B_ASICPLC,UART_HOST_INTF_,UART_RAW,MPER_,FREQ_DETECT,SW_RECOVERY,P
                    -ROD_TEST) DEBUG PRINT(.\lst\dmm.lst) TABS(2) OBJECT(.\obj\dmm.obj)

line level    source

   1          /** ==========================================================
   2           *
   3           * @file dmm.c
   4           * 
   5           *  @brief Dynamic Memory Management
   6           *
   7           *  Copyright (C) 2012, Greenvity Communications, Inc.
   8           *  All Rights Reserved
   9           *  
  10           * ============================================================ */
  11          
  12          
  13          #include <string.h>
  14          #include "fm.h"
  15          #include "dmm.h"
  16          #include "sys_common.h"
  17          
  18          
  19          sDmm BcnDmm;
  20          sDmm MgmtDmm;
  21          sDmm FwDmm;
  22          sDmm AppDmm;
  23          
  24          #if 0
              void DMM_DisplayFreeList(sDmm* pDmm)
              {
                  u8 i;
                  sSlink    *slink = NULL;
                  sSegDesc  *segdesc = NULL; 
                  sSlab     *slab = NULL;
                  FM_Printf(FM_WARN, "DMM: Display mem segment \n");
                  for (i = 0; i < pDmm->slabnum; i++)
                  {
              #ifdef P8051
                      FM_Printf(FM_WARN, "DMM: Slab %bu \n", i);
              #else
                      FM_Printf(FM_WARN, "DMM: Slab %d \n", i);
              #endif
                      slab = &(pDmm->slab[i]);  
                      while(!SLIST_IsEmpty(&(pDmm->slab[i].freelist)))
                      {
                          slink = SLIST_Pop(&(pDmm->slab[i].freelist));
                          segdesc = SLIST_GetEntry(slink, sSegDesc, link);  
              #ifdef P8051
                  FM_Printf(FM_WARN, "DMM: allocate mem seg %d, mem (%p, %p), data %p\n", 
              segdesc->segsize, segdesc->mem, (u8 *)segdesc, (u8 *)segdesc + sizeof(sSegDesc));
C51 COMPILER V9.52.0.0   DMM                                                               12/02/2014 14:35:34 PAGE 2   

              #else
                  FM_Printf(FM_WARN, "DMM: allocate mem seg %d, mem (0x%lx, 0x%lx), data 0x%lx\n", 
              segdesc->segsize, segdesc->mem, segdesc, (u8 *)segdesc + sizeof(sSegDesc));
              #endif
              FM_HexDump(FM_DATA|FM_MINFO, "segment:", (u8 *)segdesc, segdesc->segsize + sizeof(sSegDesc) );
                      }
                  }
              }
              #endif
  56          
  57          void DMM_eventMem()
  58          {
  59   1        DMM_DisplayMemUsage(&FwDmm);
  60   1      
  61   1      }
  62          
  63          void DMM_MgmtMem()
  64          {
  65   1        DMM_DisplayMemUsage(&MgmtDmm);
  66   1      
  67   1      }
  68          void DMM_BcnMem()
  69          {
  70   1        DMM_DisplayMemUsage(&BcnDmm);
  71   1      
  72   1      }
  73          
  74          void DMM_DisplayMemUsage(sDmm* pDmm)
  75          {
  76   1          u8 i;
  77   1          sSlab     *slab = NULL;
  78   1          FM_Printf(FM_WARN, "DMM: Display mem usage:\n");
  79   1          for (i = 0; i < pDmm->slabnum; i++)
  80   1          {
  81   2            u8 boolval = SLIST_IsEmpty(&slab->freelist);
  82   2          
  83   2              slab = &(pDmm->slab[i]); 
  84   2      #ifdef P8051
  85   2              FM_Printf(FM_WARN, "DMM: Slab %bu \n", i);
  86   2              FM_Printf(FM_WARN, "DMM: mem seg max %bu \n", slab->maxuse);
  87   2              FM_Printf(FM_WARN, "DMM: mem seg use %bu \n", slab->inuse);
  88   2              FM_Printf(FM_WARN, "DMM: isEmpty %bu \n",boolval );
  89   2      #else 
                      FM_Printf(FM_WARN, "DMM: Slab %d \n", i);
                      FM_Printf(FM_WARN, "DMM: mem seg %d \n", slab->maxuse);
              #endif
  93   2          }
  94   1      
  95   1      }
  96          
  97          eStatus DMM_Init(u8 pool_id)
  98          {
  99   1          u8 i;
 100   1        sDmm* pDmm;
 101   1        if(pool_id == FW_POOL_ID)
 102   1          pDmm = &FwDmm;
 103   1        else if(pool_id == APP_POOL_ID)
 104   1          pDmm = &AppDmm; 
 105   1        else if(pool_id == BCN_POOL_ID)
 106   1          pDmm = &BcnDmm; 
 107   1        else if(pool_id == MGMT_POOL_ID)
 108   1          pDmm = &MgmtDmm;  
C51 COMPILER V9.52.0.0   DMM                                                               12/02/2014 14:35:34 PAGE 3   

 109   1        
 110   1          memset(pDmm, 0, sizeof(sDmm));
 111   1      
 112   1          for (i = 0; i < DMM_SLAB_MAX; i++)
 113   1          {
 114   2              SLIST_Init(&(pDmm->slab[i].freelist));
 115   2          }
 116   1          return STATUS_SUCCESS;
 117   1      }
 118          
 119          
 120          
 121          eStatus DMM_InitMemPool(u8 pool_id, u8 *mempool, u16 poolsize, sSlabDesc *slabdesc, u8 slabnum)
 122          {
 123   1      
 124   1          u8  i = 0;
 125   1          u16 memsize = 0;
 126   1          u8  segnum = 0;
 127   1          u8  *mem = mempool;
 128   1          sSegDesc  *segdesc = NULL; 
 129   1          sSlab     *slab = NULL;
 130   1        sDmm* pDmm;    
 131   1      
 132   1          if (slabnum > DMM_SLAB_MAX)
 133   1              return STATUS_FAILURE;
 134   1         
 135   1        if(pool_id == FW_POOL_ID)
 136   1          pDmm = &FwDmm;
 137   1        else if(pool_id == APP_POOL_ID)
 138   1          pDmm = &AppDmm; 
 139   1        else if(pool_id == BCN_POOL_ID)
 140   1            pDmm = &BcnDmm; 
 141   1        else if(pool_id == MGMT_POOL_ID)
 142   1            pDmm = &MgmtDmm;  
 143   1      
 144   1          memset(mempool, 0, poolsize);  
 145   1      
 146   1          for (i = 0; i < slabnum; i++)
 147   1          {
 148   2      //        FM_Printf(FM_WARN, "DMM: Slab %bu \n", i);
 149   2              slab = &(pDmm->slab[i]);  
 150   2              pDmm->slab[i].segsize = slabdesc[i].segsize;
 151   2          pDmm->slab[i].inuse = 0;
 152   2              segnum = 0;
 153   2              while (((memsize + sizeof(sSegDesc) + slabdesc[i].segsize) <= poolsize)
 154   2                     && (segnum < slabdesc[i].segnum))
 155   2              {
 156   3                  segdesc = (sSegDesc *)mem;
 157   3                  SLINK_Init(&segdesc->link);          
 158   3                  segdesc->segsize = slabdesc[i].segsize;
 159   3                  segdesc->mem = mem;
 160   3                  SLIST_Put(&slab->freelist, &segdesc->link);
 161   3                  mem += sizeof(sSegDesc) + segdesc->segsize;
 162   3                  memsize += sizeof(sSegDesc) + segdesc->segsize;
 163   3                  segnum++;
 164   3      #if 0
              
                  FM_Printf(FM_WARN, "DMM: init mem seg %d, mem (%p, %p), data %p\n", 
              segdesc->segsize, segdesc->mem, (u8 *)segdesc, (u8 *)segdesc + sizeof(sSegDesc));
              FM_HexDump(FM_DATA|FM_MINFO, "init segment:", (u8 *)segdesc, segdesc->segsize + sizeof(sSegDesc) );
              #endif
 170   3              }
C51 COMPILER V9.52.0.0   DMM                                                               12/02/2014 14:35:34 PAGE 4   

 171   2          if (segnum < slabdesc[i].segnum)
 172   2          {
 173   3            FM_Printf(FM_ERROR, "DMM: the memory pool is small.\n");
 174   3            return STATUS_FAILURE;
 175   3          }
 176   2            
 177   2          }
 178   1          pDmm->slabnum = slabnum;
 179   1          FM_Printf(FM_WARN, "DMM: the memory pool init is successful.\n");
 180   1      //    DMM_DisplayFreeList();
 181   1          return STATUS_SUCCESS;
 182   1      }
 183          
 184          
 185          
 186          u8 *DMM_Alloc(u8 pool_id, u16 size)
 187          {
 188   1          u8         i;
 189   1          sSlink    *slink = NULL;
 190   1          sSegDesc  *segdesc = NULL; 
 191   1        sDmm* pDmm;
 192   1        if(pool_id == FW_POOL_ID)
 193   1          pDmm = &FwDmm;
 194   1        else if(pool_id == APP_POOL_ID)
 195   1          pDmm = &AppDmm;
 196   1        else if(pool_id == BCN_POOL_ID)
 197   1          pDmm = &BcnDmm;
 198   1        else if(pool_id == MGMT_POOL_ID)
 199   1          pDmm = &MgmtDmm;    
 200   1        
 201   1          /* search for the closest memory segment */
 202   1          for (i = 0; i < pDmm->slabnum; i++)
 203   1          {
 204   2              if (size <= pDmm->slab[i].segsize)
 205   2              {
 206   3                  if (!SLIST_IsEmpty(&(pDmm->slab[i].freelist)))
 207   3                  {
 208   4                      slink = SLIST_Pop(&(pDmm->slab[i].freelist));
 209   4                      segdesc = SLIST_GetEntry(slink, sSegDesc, link);  
 210   4              segdesc->poolid = pool_id;
 211   4                      pDmm->slab[i].inuse++;
 212   4              if (pDmm->slab[i].inuse > pDmm->slab[i].maxuse)
 213   4      {
 214   5                  pDmm->slab[i].maxuse = pDmm->slab[i].inuse;
 215   5      }
 216   4      #ifdef P8051
 217   4      //    FM_Printf(FM_WARN, "DMM: alloc mem seg %d, mem (%p, %p), data %p\n", segdesc->segsize, segdesc->mem,
             - segdesc, (u8 *)segdesc + sizeof(sSegDesc));
 218   4      //    FM_HexDump(FM_DATA|FM_MINFO, "alloc segment:", (u8 *)segdesc, Dmm.slab[i].segsize + sizeof(sSegDesc)
             - );
 219   4      #else
              //    FM_Printf(FM_WARN, "DMM: alloc mem seg %d, mem 0x%lx, 0x%lx, payload 0x%lx\n", segdesc->segsize, seg
             -desc->mem, segdesc, (u8 *)segdesc + sizeof(sSegDesc));
              #endif
 222   4                      return (u8 *)segdesc + sizeof(sSegDesc);
 223   4                  }
 224   3              }
 225   2          }
 226   1      #ifdef LOG_FLASH
                  logEvent(MEM_ERROR, pool_id, 0, &size, sizeof(u16));
              #endif
 229   1          return NULL;
C51 COMPILER V9.52.0.0   DMM                                                               12/02/2014 14:35:34 PAGE 5   

 230   1      }
 231          
 232          
 233          void DMM_Free(u8 *mem)
 234          {
 235   1          u8         i;
 236   1          sSegDesc  *segdesc = (sSegDesc *)(mem - sizeof(sSegDesc)); 
 237   1        sDmm* pDmm;
 238   1        if(segdesc->poolid == FW_POOL_ID)
 239   1          pDmm = &FwDmm;  
 240   1        else if(segdesc->poolid == APP_POOL_ID)
 241   1          pDmm = &AppDmm;   
 242   1        else if(segdesc->poolid == BCN_POOL_ID)
 243   1          pDmm = &BcnDmm; 
 244   1        else if(segdesc->poolid == MGMT_POOL_ID)
 245   1          pDmm = &MgmtDmm;    
 246   1        
 247   1          for (i = 0; i < pDmm->slabnum; i++)
 248   1          {
 249   2              if(segdesc->segsize == pDmm->slab[i].segsize)
 250   2              {
 251   3      #ifdef P8051
 252   3      //      FM_Printf(FM_WARN, "DMM: free mem seg %d, mem (%p, %p), data %p\n", segdesc->segsize, segdesc->mem
             -, segdesc, mem);
 253   3      //    FM_HexDump(FM_DATA|FM_MINFO, "free segment:", (u8 *)segdesc, segdesc->segsize + sizeof(sSegDesc) );
 254   3      //    FM_HexDump(FM_DATA|FM_MINFO, "free segment:", (u8 *)segdesc, 256);
 255   3      #else
              //    FM_Printf(FM_WARN, "DMM: free mem seg %d, mem 0x%lx, 0x%lx, payload 0x%lx\n", segdesc->segsize, segd
             -esc->mem, segdesc, mem);
              #endif
 258   3                  SLINK_Init(&segdesc->link);
 259   3                  SLIST_Put(&(pDmm->slab[i].freelist), &segdesc->link);
 260   3                  pDmm->slab[i].inuse--;
 261   3                  return;
 262   3              }
 263   2          }
 264   1         // FM_Printf(FM_ERROR, "DMM: cannot find the memory segment to free %d.\n", segdesc->segsize);
 265   1      }
 266          
 267          /** =========================================================
 268           *
 269           * Edit History
 270           *
 271           * $Source: /home/cvsrepo/Hybrii_B_OSFW_Dev/firmware/common/dmm.c,v $
 272           *
 273           * $Log: dmm.c,v $
 274           * Revision 1.7  2014/08/25 07:37:34  kiran
 275           * 1) RSSI & LQI support
 276           * 2) Fixed Sync related issues
 277           * 3) Fixed timer 0 timing drift for SDK
 278           * 4) MMSG & Error Logging in Flash
 279           *
 280           * Revision 1.6  2014/06/24 16:26:44  ranjan
 281           * -zigbee frame_handledata fix.
 282           * -added reason code for uppermac host events
 283           * -small cleanups
 284           *
 285           * Revision 1.5  2014/06/19 17:13:19  ranjan
 286           * -uppermac fixes for lvnet and reset command for cco and sta mode
 287           * -backup cco working
 288           *
 289           * Revision 1.4  2014/06/12 13:15:43  ranjan
C51 COMPILER V9.52.0.0   DMM                                                               12/02/2014 14:35:34 PAGE 6   

 290           * -separated bcn,mgmt,um event pools
 291           * -fixed datapath issue due to previous checkin
 292           * -work in progress. neighbour cco detection
 293           *
 294           * Revision 1.3  2014/05/28 10:58:58  prashant
 295           * SDK folder structure changes, Uart changes, removed htm (UI) task
 296           * Varified - UM, LM - iperf (UDP/TCP), overnight test pass
 297           *
 298           * Revision 1.2  2014/01/10 17:02:18  yiming
 299           * check in Rajan 1/8/2014 code release
 300           *
 301           * Revision 1.3  2014/01/08 10:53:53  ranjan
 302           * Changes for LM OS support.
 303           * New Datapath FrameTask
 304           * LM and UM  datapath, feature verified.
 305           *
 306           * known issues : performance numbers needs revisit
 307           *
 308           * review : pending.
 309           *
 310           * Revision 1.2  2013/01/24 00:13:46  yiming
 311           * Use 01-23-2013 Hybrii-A code as first Hybrii-B code base
 312           *
 313           * Revision 1.5  2012/07/30 04:37:55  yuanhua
 314           * fixed an issue that an event memory could be overwritten in the HAL when the HAL receives a mgmt messag
             -e.
 315           *
 316           * Revision 1.4  2012/07/29 02:59:22  yuanhua
 317           * Initialize the internel queue of CTRL Layer to fix an issue of unexpected event free error message.
 318           *
 319           * Revision 1.3  2012/07/25 04:36:08  yuanhua
 320           * enable the DMM.
 321           *
 322           * Revision 1.2  2012/07/24 04:27:46  yuanhua
 323           * update the project to include DMM.
 324           *
 325           * Revision 1.1  2012/07/24 04:23:17  yuanhua
 326           * added DMM code for dynamic alloction with static memory to avoid memory fragmentation.
 327           *
 328           *
 329           * ==========================================================*/
 330          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1338    ----
   CONSTANT SIZE    =    180    ----
   XDATA SIZE       =    324      58
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
