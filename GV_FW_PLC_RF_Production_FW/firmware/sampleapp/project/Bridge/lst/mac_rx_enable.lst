C51 COMPILER V9.53.0.0   MAC_RX_ENABLE                                                     11/04/2015 20:09:52 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAC_RX_ENABLE
OBJECT MODULE PLACED IN .\obj\mac_rx_enable.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\firmware\zigbee\mac_rx_enable.c LARGE OBJECTADVANCED OPTIMIZ
                    -E(9,SIZE) BROWSE INTVECTOR(0X2100) INCDIR(..\..\..\..\firmware\common\datapath;..\..\..\..\firmware\common\include;..\..
                    -\..\..\firmware\hal;..\..\..\..\firmware\hpgp\src\crypto;..\..\..\..\firmware\hpgp\src\ctrl;..\..\..\..\firmware\hpgp\sr
                    -c\hal;..\..\..\..\firmware\hpgp\src\link;..\..\..\..\firmware\hpgp\src\mux;..\..\..\..\firmware\hpgp\src\nma;..\..\..\..
                    -\firmware\hpgp\src\route;..\..\..\..\firmware\hpgp\src\test;..\..\..\..\firmware\project\hal\src;..\..\..\..\firmware\zi
                    -gbee;..\..\..\..\components\aps\inc;..\..\..\..\components\utilities\datatype\inc;..\..\..\..\components\utilities\event
                    -\inc;..\..\..\..\components\utilities\linklist\inc;..\..\..\..\components\utilities\timer\inc;..\..\..\..\components\hpg
                    -p\inc;..\..\..\..\firmware\common;..\..\..\..\firmware\hpgp;..\..\..\..\firmware\hpgp\src;..\..\..\..\firmware\app_suppo
                    -rt;..\..\..\..\firmware\HybriiB_configuration_rw\src;..\..\..\..\components\drivers\gpio\inc;..\..\..\..\components\driv
                    -ers\hpgp\inc;..\..\..\..\components\drivers\nwk\inc;..\..\..\..\components\drivers\ieee802154\inc;..\..\..\..\components
                    -;..\..\..\..\components\osal\inc;..\..\..\..\components\nma\hpgp\inc;..\..\..\..\components\nma\ieee802154\inc;..\..\..\
                    -..\components\nma;..\..\..\..\components\utilities\event\inc;..\..\..\..\components\hpgp\inc;..\..\..\..\components\driv
                    -ers\flash\inc;..\..\..\..\components\ieee802154\inc;..\..\..\..\components\drivers\uart\inc;..\..\..\..\components\utili
                    -ties;..\..\..\..\components\drivers\hpgp\inc;..\..\..\..\components\drivers\ieee802154\inc;..\..\..\..\components\driver
                    -s\nwk\inc;..\..\..\..\components\utilities\debug\inc;..\..\..\..\sampleapp\inc;..\..\..\..\sampleapp\src;..\..\inc;..\..
                    -\..\..\components\drivers\i2c\inc;..\..\..\..\components\drivers\gvspi\inc) NOAREGS DEFINE(inline,P8051,C51,HPGP_HAL,HYB
                    -RII_8051,HYBRII_HPGP,CCO_FUNC,STA_FUNC,HPGP_TEST,HPGP_DEBUG,RTX51_TINY_OS,HYBRII_ASIC,PLC_SW_SYNC,HPGP_MAC_SAP,NMA,NEW_S
                    -YNC,UM,HYBRII_B,Hybrii_B,HW_SPI_TX_CRC,HW_SPI_RX_CRC,B_ASICPLC,HYBRII_ASIC_A2,BB_CAL,_CRC_VERIFY_,BB_GAIN_TABLE,B2,FREQ_
                    -DETECT,HYBRII_B_AFE,_BC_SECURE_TEST_,FREQ_DETECT,BCN_ERR,NO_HOST,MCCO,KEEP_ALIVE,UART_RAW,UART_HOST_INTF,UART_GPIO_INTER
                    -RUPT,MCCO,SW_RECOVERY,HYBRII_802154,DEBUG_DATAPATH,HPGP_DRIVER_APP,LRWPAN_DRIVER_APP,NWKSTARTUP_APP,ROUTE_APP,RTOPO_APP,
                    -REGISTER_APP,LLP_APP,BRIDGE,DEVICEINTF_APP,SMARTLIGHT_APP,LED_SMART_LIGHT,ROUTE_RECOVERY) PRINT(.\lst\mac_rx_enable.lst)
                    - TABS(2) OBJECT(.\obj\mac_rx_enable.obj)

line level    source

   1          /**
   2           * @file
   3           *
   4           * Implement MLME-RX-ENABLE functionality
   5           *
   6           * $Id: mac_rx_enable.c,v 1.6 2014/11/26 13:19:41 ranjan Exp $
   7           *
   8           * Copyright (c) 2012, Greenvity Communication All rights reserved.
   9           *
  10           */
  11          #ifdef HYBRII_802154
  12          
  13          /* === Includes ============================================================ */
  14          
  15          #include <string.h>
  16          #include "papdef.h"
  17          #include "timer.h"
  18          #include "return_val.h"
  19          #include "bmm.h"
  20          #include "qmm.h"
  21          #include "mac_msgs.h"
  22          #include "mac_hal.h"
  23          #include "mac_const.h"
  24          #include "mac_api.h"
  25          #include "mac_data_structures.h"
  26          #include "mac_internal.h"
  27          #include "mac.h"
  28          #include "utils_fw.h"
  29          
  30          
  31          /* === Macros =============================================================== */
  32          
  33          
  34          /* === Globals ============================================================= */
C51 COMPILER V9.53.0.0   MAC_RX_ENABLE                                                     11/04/2015 20:09:52 PAGE 2   

  35          
  36          /* === Prototypes ========================================================== */
  37          
  38          /* === Implementation ====================================================== */
  39          
  40          /*
  41           * @brief Set the transceiver state to PHY_TRX_OFF
  42           *
  43           * This actually turns the radio receiver off - i.e. this is the end
  44           * of the PHY_RX_ON period.
  45           *
  46           * @param callback_parameter Callback parameter
  47           */
  48          static void mac_rx_enable_off (void)
  49          {
  50   1          uint8_t status;
  51   1       
  52   1          /*
  53   1           * In case macRxOnWhenIdle is not set, Set h/w to PHY_TRX_OFF
  54   1           * state
  55   1           */
  56   1          if (FALSE == mac_pib_macRxOnWhenIdle) {
  57   2              mac_rx_enabled = false;
  58   2              status = mac_hal_hw_control(PHY_TRX_OFF);
  59   2              return;
  60   2          }
  61   1      }
  62          
  63          /*
  64           * Initiate rx enable confirm message.
  65           *
  66           * This function creates the rx enable confirm structure,
  67           * and appends it into internal event queue.
  68           *
  69           * buf_p Pointer to buffer for rx enable confirmation.
  70           * status Status of attempt to switch receiver on.
  71           */
  72          static void mac_rx_enable_conf (buffer_t *buf_p, uint8_t status)
  73          {
  74   1          mlme_rx_enable_conf_t *rec = (mlme_rx_enable_conf_t *)
  75   1                                       BMM_BUFFER_POINTER(buf_p);
  76   1      
  77   1          rec->cmdcode = MLME_RX_ENABLE_CONFIRM;
  78   1          rec->status = status;
  79   1        
  80   1      #if (defined UM) && (!defined ZBMAC_DIAG)
  81   1        mlme_send_to_host(buf_p);
  82   1      #else
                mlme_rx_enable_conf(buf_p);
              #endif    
  85   1      }
  86          
  87          /*
  88           * Beacon Network RX Enable
  89           *
  90           * This function immediately enables the receiver with the given
  91           * RxOnDuration time in symbols from now.
  92           *
  93           * rx_on_duration_symbols: Duration in symbols that the reciever is turned on
  94           */
  95          static void mac_rx_enable_on_bc (mlme_rx_enable_req_t *rxe_p,
  96                                           buffer_t *buf_p)
C51 COMPILER V9.53.0.0   MAC_RX_ENABLE                                                     11/04/2015 20:09:52 PAGE 3   

  97          {
  98   1          bool status;
  99   1      
 100   1          /*
 101   1           * Determine if (RxOnTime + RxOnDuration) is less than the beacon
 102   1           * interval.
 103   1           * According to 7.1.10.1.3:
 104   1           * On a beacon-enabled PAN, the MLME first determines whether
 105   1           * (RxOnTime + RxOnDuration) is less than the beacon interval, defined
 106   1           * by macBeaconOrder. If it is not less, the MLME issues the
 107   1           * MLME-RX-ENABLE.confirm primitive with a status of 
 108   1           * MAC_INVALID_PARAMETER.
 109   1           */
 110   1      
 111   1          if ((rxe_p->RxOnTime + rxe_p->RxOnDuration) >= 
 112   1               HAL_GET_BEACON_INTERVAL_TIME(hal_pib_BeaconOrder)) {
 113   2              /* Send the confirm immediately. */
 114   2              mac_rx_enable_conf(buf_p, MAC_INVALID_PARAMETER);
 115   2              return;
 116   2          }
 117   1          /* Rx is enabled */
 118   1          mac_rx_enabled = TRUE;
 119   1          status = mac_hal_rx_enable(TRUE, rxe_p); /* For BC network */
 120   1      
 121   1          if (status == TRUE) {
 122   2              mac_rx_enable_conf(buf_p, MAC_SUCCESS);
 123   2          } else {
 124   2              mac_rx_enable_conf(buf_p, MAC_INVALID_PARAMETER);
 125   2          }
 126   1      }
 127          
 128          /*
 129           * Non Beacon Network RX Enable
 130           *
 131           * This function immediately enables the receiver with the given
 132           * RxOnDuration time in symbols from now.
 133           *
 134           * rx_on_duration_symbols: Duration in symbols that the reciever is turned on
 135           */
 136          static void mac_rx_enable_on_non_bc (mlme_rx_enable_req_t *rxe_p,
 137                                               buffer_t *buf_p)
 138          {
 139   1          /* Rx is enabled */
 140   1          mac_rx_enabled = TRUE;
 141   1          mac_hal_rx_enable(FALSE, rxe_p);  /* For non BC network */
 142   1          mac_rx_enable_conf(buf_p, MAC_SUCCESS);
 143   1      }
 144          
 145          /*
 146           * The MLME-RX-ENABLE.request primitive is generated by the next
 147           * higher layer and issued to MAC to enable the receiver for a
 148           * fixed duration, at a time relative to the start of the current or
 149           * next superframe on a beacon-enabled PAN or immediately on a
 150           * nonbeacon-enabled PAN. The receiver is enabled exactly once per
 151           * primitive request.
 152           *
 153           * buf_ptr Pointer to the MLME-RX-ENABLE.request message
 154           */
 155          void mlme_rx_enable_request (buffer_t *buf_ptr)
 156          {
 157   1          mlme_rx_enable_req_t *rxe_p;
 158   1      
C51 COMPILER V9.53.0.0   MAC_RX_ENABLE                                                     11/04/2015 20:09:52 PAGE 4   

 159   1          rxe_p = (mlme_rx_enable_req_t *)BMM_BUFFER_POINTER(buf_ptr);
 160   1      
 161   1          /* If RxOnDuration is zero, the receiver shall be disabled */
 162   1          if (0 == rxe_p->RxOnDuration) {
 163   2              /*
 164   2               * Turn off the RX
 165   2               */
 166   2              mac_rx_enable_off(); 
 167   2              /* Send the confirm immediately. */
 168   2              mac_rx_enable_conf(buf_ptr, MAC_SUCCESS);
 169   2              return;
 170   2          }
 171   1          /*
 172   1           * Reject the request when the MAC is currently in any of the
 173   1           * polling states or scanning.
 174   1           */
 175   1          if ((MAC_POLL_IDLE != mac_poll_state) ||
 176   1              (MAC_SCAN_IDLE != mac_scan_state)) {
 177   2              /* Send the confirm immediately. */
 178   2              mac_rx_enable_conf(buf_ptr, MAC_TX_ACTIVE);
 179   2              return;
 180   2          }
 181   1      
 182   1          if (NON_BEACON_NWK == hal_pib_BeaconOrder) {
 183   2              mac_rx_enable_on_non_bc(rxe_p, buf_ptr); 
 184   2          } else {
 185   2              mac_rx_enable_on_bc(rxe_p, buf_ptr);
 186   2          }
 187   1      }
 188          
 189          #endif //HYBRII_802154
 190          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    346    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
