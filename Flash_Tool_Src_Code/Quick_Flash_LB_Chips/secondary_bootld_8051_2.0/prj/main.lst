C51 COMPILER V9.54   MAIN                                                                  08/17/2016 10:02:49 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\main.c OPTIMIZE(9,SIZE) BROWSE INCDIR(..\src;C:\Keil\C51\INC;..\s
                    -rc) DEBUG OBJECTEXTEND CODE PRINT(.\main.lst) TABS(2) PREPRINT(.\main.i) SRC(.\main.SRC)

line level    source

   1          /*
   2          * Description : 8051 bootloader main function
   3          *
   4          * Copyright (c) 2010-2011 Greenvity Communications, Inc.
   5          * All rights reserved.
   6          *
   7          * Author      : Peter Nguyen
   8          * Release Date: 04/27/2013
   9          * Purpose :
  10          *     function main of bootloader project
  11          *
  12          * File: bootld_80251.c
  13          */
  14          
  15          //#include <stdafx.h>
  16          #include "test.h"
  17          #include <reg51.h>                  /* Include 251SB header file */ 
  18          #include <stdio.h>
  19          #include <stdarg.h>
  20          #include <string.h>
  21          #include "typedef.h"
  22          #include "uart.h"
  23          #include "hex_file_hdl.h"
  24          #include "spiflash.h"
  25          #include "macro_def.h"
  26          #include "cmem_ctrl.h"
  27          #include "spiflash_drv.h"
  28          #include "static_var.h"
  29          
  30          
  31          #define RESET_REG 0x34
  32          void main(void)
  33          {
  34   1        u32 idata Temp;
  35   1        char idata c;
  36   1        BANKSEL = 0;
  37   1        DisableWrCRam();
  38   1      
  39   1        ComInit();
  40   1      
  41   1        EA = 0;
  42   1        c = 0;
  43   1        Temp = 0;
  44   1        //printf("\n*********************************************");
  45   1      //  printf("\n*********************************************");
  46   1      //  printf("\n*********************************************");
  47   1      //  printf("\n*********************************************");
  48   1      //  printf("\n*********************************************");
  49   1      //  printf("\n*********************************************");
  50   1        printf("\n*********************************************");
  51   1        printf("\n*********************************************");
  52   1        printf("\n*********************************************");
  53   1        printf("\n*********************************************");
  54   1        printf("\n*********************************************");
C51 COMPILER V9.54   MAIN                                                                  08/17/2016 10:02:49 PAGE 2   

  55   1        printf("\n**     GREENVITY COMMUNICATIONS INC        **");
  56   1        printf("\n**          Boot loader V3.0               **");
  57   1        printf("\n*********************************************\n\n");
  58   1        
  59   1        while(1)
  60   1        {
  61   2          switch(c)
  62   2          {
  63   3          case ('s'):
  64   3          case ('S'):
  65   3            goto Bootup;
  66   3            break;
  67   3      #if 0   
                  case ('u'):
                  case ('U'):
                    EnableWrCRam ();
                    for (c=0;c<NUM_OF_BANK;c++)
                    {
                      printf("\n\n ##### Download code from UART to CRAM - BANK-%02X #####\n", (U16)c);
                      BANKSEL = c;
                      ParseHexRecord(&ErrCnt[0], &ProgCnt[0]);
                    }
                    DisableWrCRam ();
                    #pragma asm
                      MOV   SP,#06FH
                      LJMP  CRAM_START;
                    #pragma endasm
                    break;
              #endif      
  84   3          case ('f'):
  85   3          case ('F'):
  86   3            Download_Uart2Sflash();
  87   3            c = '1';
  88   3            break;
  89   3      #if 0   
                  case ('t'):
                  case ('T'):
                    test_cram();
                    printf("\n --> Finished testing CRAM");
                    c = '1';
                    break;
                  
                  case ('j'):
                  case ('J'):
                    #pragma asm
                      MOV  SP,#06FH;
                      LJMP CRAM_START;
                    #pragma endasm
                    
                  case ('d'):
                  case ('D'):
                    dump_code(0);
                    printf("\n --> Finished dumping CRAM");
                    c='1';
                    break;
                
                  case ('p'):
                  case ('P'):
                    dump_code(1); 
                    printf("\n --> Finished dumping SFLASH");
                    c = '1';
                    break;
C51 COMPILER V9.54   MAIN                                                                  08/17/2016 10:02:49 PAGE 3   

                  case 'r':
                  case 'R':
                    dump_code(2);
                    printf("\n --> Finished dumping erams");
                    c = '1';
                    break;
                  case 'e':
                  case 'E':
                    dump_BackupCode();
                    c = '1';
                    break;
              #endif    
 129   3          case ('1'):
 130   3            //printf("\n\n --> Press reset to reboot the system");
 131   3            //*(u8 xdata *)34 = 1;  
 132   3            //*(u8 xdata *)RESET_REG = 1;
 133   3            printf("\n\n --> Press reset or hit 's' to reboot the system");
 134   3            *((volatile u8 xdata *)(0x34)) = (u8)(1);
 135   3            Temp = 0;
 136   3            c = 1;
 137   3            break;
 138   3      #ifdef PROGRAM_CONFIGURATION
                  case ('c'):
                  case ('C'):
                    Program_Config_Data();
                    c = '1';
                    break;
                  case ('g'):
                  case ('G'):
                    Load_Config_Data(1);
                    c = '1';
                    break;
                  case ('l'):
                  case ('L'):
                    Load_Config_Data(0);
                    c = '1';
                    break;
              #endif
 155   3      #if 0   
                  case 'b':
                  case 'B':
                    (void)spiflash_BackupCodeImage();
                    c = '1';
                    break;
                  case 'z':
                  case 'Z':
                    (void)spiflash_RestoreCodeImage();
                    c = '1';
                    break;
              #endif    
 167   3      #ifdef FEATURE_CHIPERASE
                  case ('e'):
                  case ('E'):
                    printf("\n   *** THIS FUNCTION WILL ERASE 2MBYTE OF SPI FLASH Y/N? :");
                    c = _get1char();
                    TI = 0;
                    SBUF = c;
                    if (c!='Y')
                    {
                      c = '1';
                      break;
                    }
C51 COMPILER V9.54   MAIN                                                                  08/17/2016 10:02:49 PAGE 4   

                    c = 0;
                    printf("\n   *** Ready Y/N? :");
                      c = _get1char();
                    TI = 0;
                    SBUF = c;
                    if (c!='Y')
                    {
                      c = '1';
                      break;
                    }
                    spiflash_chiperase();
                    printf ("\n  --> Erase spi flash done\n"); 
                    c = '1';
                    break;
              #endif
 194   3          case 1:
 195   3            if (RI){
 196   4              c = SBUF;
 197   4              RI = 0;
 198   4            } else {
 199   4              c = 1;
 200   4            }
 201   3            break;
 202   3          default:
 203   3            if (RI==1){
 204   4              c = SBUF;
 205   4              RI = 0;
 206   4            }
 207   3            Temp++;
 208   3            if (Temp>=GVTY_STARTING_TIMEOUT)
 209   3      Bootup:
 210   3            {
 211   4      #ifdef PROGRAM_CONFIGURATION
                      Load_Config_Data(1);
              #endif
 214   4              //load_sflash2cram();
 215   4              *((volatile u8 xdata *)(0x34)) = (u8)(1);
 216   4            }
 217   3            break;
 218   3          }
 219   2        }
 220   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    226    ----
   CONSTANT SIZE    =    241    ----
   XDATA SIZE       =     14    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     24       5
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
