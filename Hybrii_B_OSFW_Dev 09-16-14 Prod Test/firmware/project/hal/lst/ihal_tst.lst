C51 COMPILER V9.52.0.0   IHAL_TST                                                          01/10/2015 21:25:26 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE IHAL_TST
OBJECT MODULE PLACED IN .\obj\ihal_tst.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\ihal_tst.c LARGE OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0X2100) INCDIR(..\..
                    -\common;..\..\project\hal\src;..\..\hpgp\src\mux;..\..\hpgp\src\link;..\..\hpgp\src\ctrl;..\..\hpgp\src\nma;..\..\hal;.\
                    -src;..\..\hpgp\src\hal;..\..\hpgp\src\sap;..\..\hpgp\src\test;..\..\hpgp\src\;..\..\common\datapath;..\..\hpgp\src\route
                    -;..\..\..\components\utilities\datatype\inc;..\..\..\components\utilities\event\inc;..\..\..\components\utilities\linkli
                    -st\inc;..\..\..\components\utilities\timer\inc;..\..\app_support;..\..\..\sampleapp\src;..\..\..\sampleapp\inc;..\..\..\
                    -components\hpgp\inc;..\..\..\components\aps\inc) DEFINE(P8051,HYBRII_8051,HYBRII_HPGP,HYBRII_ASIC,PLC_SW_SYNC=1,inline,H
                    -PGP_HAL_TEST,RTX51_TINY_OS,_TIMER_INTERRUPT_,SNIFFER,Hybrii_B,NEW_SYNC,_TIMER_INTERRUPT_,HYBRII_B,HW_SPI_TX_CRC,HW_SPI_R
                    -X_CRC,_CRC_VERIFY_,HYBRII_SPI,SNIFFER,HYBRII_ETH,B_ASICPLC,FREQ_DETECT,PROD_TEST) DEBUG OBJECTEXTEND PRINT(.\lst\ihal_ts
                    -t.lst) TABS(2) OBJECT(.\obj\ihal_tst.obj)

line level    source

   1          /*
   2          * $Id: ihal_tst.c,v 1.1 2013/12/18 17:06:22 yiming Exp $
   3          *
   4          * $Source: /home/cvsrepo/Hybrii_B_OSFW_Dev/firmware/project/hal/src/ihal_tst.c,v $
   5          *
   6          * Description : SPI HAL Test module.
   7          *
   8          * Copyright (c) 2012 Greenvity Communications, Inc.
   9          * All rights reserved.
  10          *
  11          * Purpose :
  12          *     Defines SPI Tx/Rx test functions.
  13          *
  14          *
  15          */
  16          
  17          #include <stdio.h>
  18          #include <string.h>
  19          #include "hal_common.h"
  20          #include "hal_eth.h"
  21          #include "hal_spi.h"
  22          #include "utils.h"
  23          #include "uart.h"
  24          
  25          
  26          static uint8_t xdata spi_tx_data[MAX_SPI_DATA];
  27          uint8_t  data_value = 0;
  28          extern hal_spi_stats_t hal_spi_stats;
  29          void ihal_tst_slave_tx_dma (u16 max_data_size, u16 inc_bytes,
  30                                      u16 num_pkts_in)
  31          {
  32   1          u32 tx_pkts    = 0;
  33   1          u32 tx_bytes   = 0;
  34   1          u32 tx_done    = 0;
  35   1          u32 tx_overrun = 0;
  36   1          u32 spi_busy   = 0;
  37   1          u16 tx_size    = 0;
  38   1          bool tx_abort;
  39   1          u16 data_size;
  40   1          u16 data_size_start = 4;
  41   1          u16 more_bytes = 0;
  42   1          u16 tx_errs;
  43   1          u16 cp_alloc_errs;
  44   1          u16 idx;    
  45   1          char c;
  46   1          
  47   1          hal_spi_clear_stats();
C51 COMPILER V9.52.0.0   IHAL_TST                                                          01/10/2015 21:25:26 PAGE 2   

  48   1      
  49   1          while (1) {
  50   2              if (inc_bytes) {
  51   3                  more_bytes += inc_bytes;
  52   3                  if ((more_bytes + 4) > max_data_size) {
  53   4                      more_bytes = inc_bytes;
  54   4                      data_size_start = 4;
  55   4                  } 
  56   3              } else {
  57   3                  data_size_start = max_data_size;
  58   3              }
  59   2              data_size = data_size_start + more_bytes;
  60   2              if (FALSE == hal_common_reg_bit_test(SPI_STATUS, SPI_STATUS_BUSY)) {
  61   3                  if (hal_common_reg_bit_test(CPU_INTSTATUS_REG,
  62   3                                              CPU_INT_SPI_TX_DONE) ||
  63   3                      tx_pkts == 0) {
  64   4                      if (tx_pkts != 0) {
  65   5                          tx_done++;
  66   5                          /* Write 1 to clear */
  67   5                          hal_common_reg_32_write(CPU_INTSTATUS_REG,
  68   5                                                  CPU_INT_SPI_TX_DONE);
  69   5                          hal_spi_tx_done_handler();
  70   5                      }
  71   4                      if (num_pkts_in && tx_done == num_pkts_in) {
  72   5                          break;
  73   5                      }                                                                
  74   4                      tx_abort = FALSE;
  75   4                      for (idx = 0; idx < data_size; idx++) {
  76   5                          spi_tx_data[idx] = data_value++;
  77   5                      }
  78   4                      /*if (hal_spi_tx_dma(spi_tx_data, data_size) == FALSE) {
  79   4                          tx_abort = TRUE;
  80   4                      }*/
  81   4                  } else {
  82   4                      tx_overrun++;
  83   4                  }
  84   3              } else {
  85   3                  spi_busy++;
  86   3              }
  87   2      
  88   2              hal_spi_get_tx_stats(&tx_pkts, &tx_bytes);
  89   2             
  90   2      
  91   2              c = _getchar();
  92   2      
  93   2              if (c != 0) {
  94   3              
  95   3                  break;
  96   3              }
  97   2          }
  98   1          hal_spi_tx_cleanup();
  99   1          hal_spi_get_tx_errors_stats(&tx_errs, &cp_alloc_errs);
 100   1          printf("\nSPI Errors: Tx Errors = %u, CP Alloc Errors = %u, "
 101   1                 "Tx Done = %lu, Tx Overrun = %lu, Busy = %lu, timeout = %u\n",
 102   1                 tx_errs, cp_alloc_errs, tx_done, tx_overrun, spi_busy, hal_spi_stats.tx_timeout);
 103   1      }
 104          
 105          void ihal_tst_rx (u16 data_size,
 106                            u16 num_pkts_in)
 107          {
 108   1          u32 spi_rx_pkts;
 109   1          u32 spi_rx_bytes;
C51 COMPILER V9.52.0.0   IHAL_TST                                                          01/10/2015 21:25:26 PAGE 3   

 110   1          u16 spi_rx_crc_err;
 111   1          u16 spi_rx_bad_cmd;
 112   1          u16 spi_rx_bad_len;
 113   1          bool dma_mode;
 114   1          bool abort_test = FALSE;
 115   1          char c;
 116   1          
 117   1          dma_mode = FALSE;
 118   1          data_size = data_size;
 119   1      
 120   1          hal_spi_clear_stats();
 121   1          hal_spi_set_rx_cmd_len_rdy();
 122   1          while (1) {
 123   2              if (FALSE == dma_mode) {
 124   3                  if (hal_common_reg_bit_test(CPU_INTSTATUS_REG,
 125   3                                         CPU_INT_SPI_RX_DONE) == TRUE) {
 126   4                      hal_common_reg_bit_set(CPU_INTSTATUS_REG,
 127   4                                             CPU_INT_SPI_RX_DONE);
 128   4                      hal_spi_rx_done_handler();
 129   4      
 130   4                      dma_mode = TRUE;
 131   4                  }
 132   3              } else { 
 133   3                  if (hal_common_reg_bit_test(CPU_INTSTATUS_REG,
 134   3                                         CPU_INT_TXQ_NOT_EMPTY) == TRUE) {
 135   4                      hal_common_reg_bit_set(CPU_INTSTATUS_REG,
 136   4                                             CPU_INT_TXQ_NOT_EMPTY);
 137   4                      CHAL_CpuTxQNemptyIntHandler();
 138   4                      dma_mode = FALSE;
 139   4                  }
 140   3              }
 141   2              hal_spi_get_rx_stats(&spi_rx_pkts, &spi_rx_bytes);
 142   2              if (num_pkts_in && spi_rx_pkts == num_pkts_in) {
 143   3                  break;
 144   3              }
 145   2              c = _getchar();
 146   2      
 147   2              if (c != 0) {
 148   3              
 149   3                  break;
 150   3              }
 151   2          }
 152   1          hal_spi_rx_cleanup();
 153   1      
 154   1          hal_spi_get_rx_stats(&spi_rx_pkts, &spi_rx_bytes);                          
 155   1          printf("\n  RX Packets = %lu, RX Bytes = %lu\n",
 156   1                 spi_rx_pkts, spi_rx_bytes);
 157   1          hal_spi_get_rx_errors_stats(&spi_rx_crc_err,
 158   1                                      &spi_rx_bad_cmd,
 159   1                                      &spi_rx_bad_len);
 160   1          printf("\n  CRC Errors = %u, Invalid Cmd = %u, Bad Length = %u\n",
 161   1                 spi_rx_crc_err, spi_rx_bad_cmd, spi_rx_bad_len);     
 162   1      } 
 163          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    832    ----
   CONSTANT SIZE    =    202    ----
   XDATA SIZE       =   1537      57
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.52.0.0   IHAL_TST                                                          01/10/2015 21:25:26 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
