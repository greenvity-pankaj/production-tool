C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SPIFLASH
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\spiflash.c OPTIMIZE(9,SIZE) BROWSE INCDIR(..\src;C:\Keil\C51\INC;
                    -..\src) DEBUG OBJECTEXTEND CODE PRINT(.\spiflash.lst) TABS(2) PREPRINT(.\spiflash.i) SRC(.\spiflash.SRC)

line level    source

   1          /*
   2          * Description : 8051 bootloader spiflash utility
   3          *
   4          * Copyright (c) 2011-2012 Greenvity Communications, Inc.
   5          * All rights reserved.
   6          *
   7          * Author      : Peter Nguyen
   8          * Release Date: 04/27/2013
   9          * Purpose :
  10          *     spiflash utility functions for bootloader
  11          *
  12          * File: spiflash_drv.c
  13          */
  14          #include <stdio.h>
  15          #include <stdlib.h>
  16          #include <ctype.h>
  17          #include <REG51.h>
  18          #include <intrins.h>
  19          #include "typedef.h"
  20          #include "macro_def.h"
  21          #include "cmem_ctrl.h"
  22          #include "hex_file_hdl.h"
  23          #include "Spiflash_drv.h"
  24          #include "uart.h"
  25          #include "global_var.h"
  26          #if 0
              void test_cram()
              {
                u8 idata rdata, cmp;
                u16 idata addr, memcnt, bankn;
                
                EnableWrCRam();
                  printf("\n --> Testing cram\n");
                BANKSEL = 0;
                addr = COMMONADDR_L;
                for (memcnt=0; memcnt<COMMON_LEN; memcnt++) 
                {
                  cmp = (u8)addr;
                  *(u8 xdata *)addr = (u8)cmp;
                  addr++;
                }
                for (bankn=0; bankn<NUM_OF_BANK; bankn++)
                {
                  addr = BANKADDR_L;
                  BANKSEL = bankn;
                  for (memcnt=0; memcnt<CBANK_LEN; memcnt++)
                  {
                    cmp =  (u8)(addr+bankn);
                    *(u8 xdata *)addr = (u8)cmp;
                    addr++;
                  }   
                }
                DisableWrCRam ();
                BANKSEL = 0;
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 2   

                addr = COMMONADDR_L;
                for (memcnt=0; memcnt<COMMON_LEN; memcnt++)
                {
                  rdata = *(u8 code *)addr;
                  cmp = (u8)addr;
                  if (rdata!=cmp){
                    printf("\nF:%04X %02X", addr, (u16)rdata);
                  } else if ((addr & 0x0F)==0){
                    printf(".");
                  }
                  addr++;
                }
                for (bankn=0; bankn<NUM_OF_BANK; bankn++)
                {
                  addr = BANKADDR_L;
                  BANKSEL = bankn;
                  for (memcnt=0; memcnt<CBANK_LEN; memcnt++)
                  {
                    rdata = *(u8 code *)addr;
                    cmp =  (u8)(addr+bankn);
                    if (rdata!=cmp){
                      printf("\nFB%x:%04X %02X", bankn, addr, (u16)rdata);
                    } else if ((addr & 0x0F)==0){
                      printf(".");
                    }
                    addr++;
                  }   
                }
                return;
              }
              #endif
  86          //***************************************************************
  87          //void dump_code(u8 dflag)
  88          //Dump code from CRAM or SFLASH
  89          //Input:
  90          //    dflag = 0: Dump code from CRAM
  91          //       = 1: Dump code from SFLASH
  92          //***************************************************************
  93          #if 0
              void load_sflash2cram()
              {
                  u8 idata dbyte, banks;            
                u16 idata addr, datcnt, progcnt;      
                
                printf("\n --> System is booting up ");
              
                  EnableWrCRam();
                addr = COMMONADDR_L; 
                                
                progcnt = 0;
                BANKSEL = 0;
              
                for (datcnt = 0; datcnt<COM_BANK0_LEN; datcnt++)  
                {
                  dbyte = *((u8 code * )addr);
                  *((u8 xdata * )addr) = dbyte;
                  addr++;
                  progcnt++;
                  if (progcnt==5000)
                  {
                    printf(".");
                    progcnt = 0;
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 3   

                  }   
                }
                
                progcnt = 0;
                for (banks=1;banks<NUM_OF_BANK;banks++)
                {
                  BANKSEL = banks;
                  addr = BANKADDR_L;
                  for (datcnt=0; datcnt<CBANK_LEN; datcnt++)
                  {
                    dbyte = *((u8 code * )addr);
                    *((u8 xdata * )addr) = dbyte;
                    addr++;
                    progcnt++;
                    if (progcnt==5000)
                    {
                      printf(".");
                      progcnt = 0;
                    }   
                  }
                }
                DisableWrCRam ();
              
                printf("\n --> Running firmware\n\n");
                #pragma asm
                  MOV SP, #06FH
                  LJMP  CRAM_START;
                #pragma endasm
                return;
              }
              #endif
 148          //***************************************************************
 149          //void dump_code(u8 dflag)
 150          //Dump code from CRAM or SFLASH
 151          //Input:
 152          //    dflag = 0: Dump code from CRAM
 153          //       = 1: Dump code from SFLASH
 154          //***************************************************************
 155          #if 0
              void dump_code(u8 dflag)
              {
                u16 idata addr, i;
                u8 idata dbyte, banks;
                if (dflag==0)
                {
                  printf("\n --> Dump code RAM");
                  DisableWrCRam ();
                }
                else if (dflag==1)
                {
                  EnableWrCRam();
                  printf("\n --> Dump sflash");
                } else if (dflag==2)
                {
                  printf("\n --> Dump 64K eram");
                  goto dump_eram;
              
                }
                addr = COMMONADDR_L; 
                for (i=0; i<COM_BANK0_LEN; i++)
                {
                  if ((addr&0x0007)==0)
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 4   

                    printf ("\n0x%04X:", addr);
              
                  dbyte = *(u8 code *)addr;
                  addr++;
                  printf (" %02X", (u16)dbyte);
                }
                for (banks=1; banks<8;banks++)
                {
                  printf("\n\n --> Bank %02X\n", (u16)banks);
                  BANKSEL = banks;
                  addr = BANKADDR_L;
                  for (i=0; i<CBANK_LEN; i++)
                  {
                    if ((addr&0x0007)==0)
                      printf ("\n0x%04X:", addr);
              
                    dbyte = *(u8 code *)addr;
                    addr++;
                    printf (" %02X", (u16)dbyte);
                  }
                }
                DisableWrCRam ();
                return;
                
              dump_eram:
                addr = COMMONADDR_L;
              Cont_dump_eram:
                if ((addr&0x0007)==0){
                  printf ("\n0x%04X:", addr);
                }
                dbyte = *(u8 xdata *)addr;
                printf (" %02X", (u16)dbyte);
                if (addr!=0xFFFF)
                {
                  addr++;
                  goto Cont_dump_eram;
                } 
                return;
              }
              #endif
 219          #if 0
              //***************************************************************
              //void dump_BackupImage()
              //Dump code from backup image
              //***************************************************************
              
              void dump_BackupCode()
              {
                u16 idata addr, i;
                u8 idata dbyte, banks;
                SflashAddr = 0x50000;
                printf("\n --> Dump backup code");
                for (i=0; i<COM_BANK0_LEN; i++)
                {
                  if ((i&0x0007)==0){
                    printf ("\n0x%04X:",(u16)(i+0x2000));
                  }
                  dbyte = spiflash_ReadByte(SflashAddr);
                  SflashAddr++;
                  printf (" %02X", (u16)dbyte);
                }
                for (banks=1; banks<8;banks++)
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 5   

                {
                  printf("\n\n --> Bank %02X\n", (u16)banks);
                  addr = BANKADDR_L;
                  for (i=0; i<CBANK_LEN; i++)
                  {
                    if ((addr&0x0007)==0)
                      printf ("\n0x%04X:", addr);
              
                    addr++;
                    dbyte = spiflash_ReadByte(SflashAddr);
                    SflashAddr++;
                    printf (" %02X", (u16)dbyte);
                  }
                }
                return;
              }
              #endif
 258          #ifdef PROGRAM_CONFIGURATION
              //***************************************************************
              // Program_Config_Data() is to program configuration data into spi flash at the address
              // 0x00100000
              //***************************************************************
              void Program_Config_Data()
              {
                char idata c;
                u32 idata ConfigAddr;
                u8 idata HexVal;
                u8 idata FirstChar = 0;
                DisableWrCRam ();
                printf("\n **** PROGRAM CONFIGURATION DATA ****\n");
                printf("\n --> Erase configuration data Y/N?: ");
                c = _get1char();
                TI = 0;
                SBUF = c;
                while (TI==0);
                if (c!='Y')
                {
                  c = '1';
                  goto AbortPrgConfigData;
                }
                spiflash_eraseConfigMem();
                spiflash_wrsr_unlock((u8)1);
                printf("\n --> Waiting for configuration data (equal or less than 512 bytes, ended by $): "); 
                ConfigAddr = GVTY_CONFIG_DATA_ADDR;
              Read_Config_data:
                c = _get1char();
                switch (c)
                { 
                case 27:
                  goto AbortPrgConfigData;
                  break;
                case '$':
                  goto EndPrgConfigData;
                  break;
                default:
                  if (isxdigit(c))
                  {
                    if (FirstChar++==0)
                    {
                      HexVal = (u8)((Asc2Hex((u8*)&c))<<4);
                    }
                    else 
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 6   

                    {
                      HexVal |= Asc2Hex((u8*)&c);
                      spiflash_WriteByte(ConfigAddr++,HexVal);
                      if ((ConfigAddr&0x7)==0)
                        printf(".");
                      FirstChar=0;
                    }
                  }
                  break;
                } 
                if (ConfigAddr==(GVTY_CONFIG_END_ADDR+1))
                {
                  goto EndPrgConfigData;
                } else {
                  goto Read_Config_data;
                }
              AbortPrgConfigData:
                printf ("\n\n --> Abort programming configuration data\n");
                goto CloseConfigProgramming;
              EndPrgConfigData:
                printf ("\n\n --> Finish programming configuration data\n");
              CloseConfigProgramming:
                spiflash_wrsr_unlock(0);
                return;
              }
              //***************************************************************
              //Load_Config_Data();
              //Load configuration data into the data ram @ 0xE000
              //Input:
              //  LoadConfig = 1: Load configuration data to data ram
              //         = 0: Dump configuration data onto screen
              //***************************************************************
              void Load_Config_Data(u8 LoadConfig)
              {
                u32 idata Temp;
                u8 idata c, d, e;
                if (LoadConfig==0)
                  printf("\n --> Dump configuration data\n");
                else
                  printf("\n --> Loading configuration data ");
                for (Temp=0;Temp<512;Temp++)
                {
                  c = spiflash_ReadByte((u32)(GVTY_CONFIG_DATA_ADDR+Temp));
                  d = spiflash_ReadByte((u32)(GVTY_CONFIG_DATA_ADDR+Temp+1));
                  e = spiflash_ReadByte((u32)(GVTY_CONFIG_DATA_ADDR+Temp+2));
                  if (c==0xFF && d==0xFF & e==0xFF) 
                    break;
                  if (LoadConfig==0)
                  {     
                    printf("\n@0x%03X: 0x%02X",(u16)(0xFFFF&Temp), (u16)(0xFF&c));
                  }
                  else
                  {
                    *(u8 xdata *)((u16)(0xFFFF&(GVTY_CONFIG_DRAM_ADDR + Temp))) = c;
                    if (Temp&0x7==0)
                      printf(".");
                  }
                }
                printf("\n");
                return;
              }
              #endif
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 7   

 365          //***************************************************************
 366          // salutil_Big2LittleEndian(u32)
 367          // Sofware Abstraction Utility to convert a 32 bit big endian to 32 bit little endian or vs
 368          //***************************************************************
 369          u32 swUtil_SwapEndian(u32 var32)
 370          {
 371   1        return ((var32&0x000000FF)<<24 |
 372   1            (var32&0x0000FF00)<<8 |
 373   1            (var32&0x00FF0000)>>8 |
 374   1            (var32&0xFF000000)>>24);
 375   1      }   
 376          //---------------------------------------------------------------------------
 377          // void memUtil_ClearEram(u8 SetData)
 378          // Description: to clear ERAM from 2100 to 0xFFFF
 379          //---------------------------------------------------------------------------
 380          void memUtil_ClearEram(u8 SetData)
 381          {
 382   1        Uart2EramAddr=0x2100;
 383   1      Erase_Ram:
 384   1        *(u8 xdata *)Uart2EramAddr = SetData;
 385   1        if (Uart2EramAddr<0xDFFF){
 386   2          Uart2EramAddr = Uart2EramAddr+1;
 387   2          goto Erase_Ram;
 388   2        }
 389   1        return;
 390   1      }
 391          
 392          extern void spiflash_pageWrite(u32  startAddr, u32  endAddr, u16  srcAddress);
 393          extern u8 spiflash_pageReadVerify(u32  startAddr, u32  endAddr, u16 srcAddress);
 394          //---------------------------------------------------------------------------
 395          //void Download_Uart2Sflash()
 396          //Handle the task to download code from UART to Sflash
 397          //---------------------------------------------------------------------------
 398          #if 1
 399          void Download_Uart2Sflash()
 400          {
 401   1        u8 idata c;
 402   1        printf("\n --> Program SFLASH Y/N? :");
 403   1        c = _get1char(); 
 404   1        if (c!='Y')
 405   1        {
 406   2          c = '1';
 407   2          return;
 408   2        }
 409   1        c = 0;
 410   1        printf("\n --> Delete current code Y/N? :");
 411   1        c = _get1char(); 
 412   1        if (c!='Y')
 413   1        {
 414   2          c = '1';
 415   2      
 416   2          return;
 417   2        }
 418   1      
 419   1        spiflash_wrsr_unlock(1);
 420   1      
 421   1        spiflash_eraseLower256k();
 422   1      
 423   1      Program_Common_bank:
 424   1      
 425   1        {
 426   2          memUtil_ClearEram(SetDataFF);
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 8   

 427   2          printf("\n\n ##### Download code for - Common #####\n");
 428   2          Uart2EramAddr = 0;
 429   2          ParseHexRecord(&ErrCnt[0], &ProgCnt[0]);
 430   2      
 431   2          SflashAddr = (u32)(CRAM_START - SFLASH_CRAM_OFFSET);
 432   2          Eram2SflashAddr = (u16)CRAM_START;
 433   2          if (ErrCnt[4]==0){
 434   3            printf("\n --> Writing to sflash ");
 435   3            spiflash_pageWrite(SflashAddr,(SflashAddr + (Uart2EramAddr - Eram2SflashAddr)) , Eram2SflashAddr);
 436   3            if(spiflash_pageReadVerify(SflashAddr,(SflashAddr + (Uart2EramAddr - Eram2SflashAddr)) , Eram2SflashAdd
             -r)==0){
 437   4              goto End_sflash_programming;
 438   4            }
 439   3            else{
 440   4              goto Prog_Bank0;
 441   4            }
 442   3      #if 0
              Cont_ProgSflash1:     
                    spiflash_WriteByte(SflashAddr, *(u8 xdata *)Eram2SflashAddr);
                    if (spiflash_ReadByte(SflashAddr)!= *(u8 xdata *)Eram2SflashAddr){
                      printf("\n\n *** SFLASH programming error @ 0x%02X%04X - try again\n\n",(u16)(0xFF&(SflashAddr>>16)),(
             -u16)(0xFFFF&SflashAddr));
                      goto End_sflash_programming;
                    }
                    
                    if ((Eram2SflashAddr & 0xFF)==0){
                      printf(".");
                    }
                    if (Eram2SflashAddr<Uart2EramAddr){
                      SflashAddr++;
                      Eram2SflashAddr++;
                      goto Cont_ProgSflash1;
                    } else {
                      goto Prog_Bank0;
                    }
              #endif  
 461   3      
 462   3          } else {
 463   3            printf("\n *** ERROR downloading from UART to RAM");
 464   3            goto End_sflash_programming;
 465   3          }
 466   2        }
 467   1      Prog_Bank0:
 468   1        
 469   1        c = 0;
 470   1        //printf("\nProg_Bank0, %bu\n",c);
 471   1        //spiflash_wrsr_unlock((u8)1);
 472   1        //    spiflash_wren(1);
 473   1      Program_Next_bank:
 474   1        {
 475   2          memUtil_ClearEram(SetDataFF);
 476   2          printf("\n\n ##### Download code for - BANK-%02bX #####\n", c);
 477   2          //BANKSEL = c;
 478   2          Uart2EramAddr = 0;
 479   2          ParseHexRecord(&ErrCnt[0], &ProgCnt[0]);
 480   2          //printf("\nparsing done\n");
 481   2          if (c==0){
 482   3            SflashAddr = (u32)((CRAM_START - SFLASH_CRAM_OFFSET) + (BANKADDR_L - CRAM_START));
 483   3            //Eram2SflashAddr = (u16)CRAM_START;
 484   3          } else {
 485   3            SflashAddr = (u32)(((c-1)*6)+0x10-0x02);
 486   3            SflashAddr = SflashAddr<<12;
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 9   

 487   3            //Eram2SflashAddr = BANKADDR_L;
 488   3          }
 489   2          Eram2SflashAddr = (u16)CRAM_START;
 490   2          if (ErrCnt[4]==0){
 491   3            printf("\n --> Writing to sflash ");
 492   3      
 493   3            spiflash_pageWrite(SflashAddr,(SflashAddr + (Uart2EramAddr - (Eram2SflashAddr+0x7F00))) , Eram2SflashAd
             -dr);
 494   3            if(spiflash_pageReadVerify(SflashAddr,(SflashAddr + (Uart2EramAddr - (Eram2SflashAddr+0x7F00))) , Eram2
             -SflashAddr)==0){
 495   4              goto End_sflash_programming;
 496   4            }
 497   3            else{
 498   4              goto Check_next_bank;
 499   4            }
 500   3      #if 0
              Cont_ProgSflash:
                
                    spiflash_WriteByte(SflashAddr, *(u8 xdata *)Eram2SflashAddr);
                    if (spiflash_ReadByte(SflashAddr)!= *(u8 xdata *)Eram2SflashAddr){
                      printf("\n\n *** SFLASH programming error @ 0x%02X%04X - try again\n\n",(u16)(0xFF&(SflashAddr>>16)),(
             -u16)(0xFFFF&SflashAddr));
                      goto End_sflash_programming;
                    }
                    
                    if ((Eram2SflashAddr & 0xFF)==0){
                      printf(".");
                    }
                    if ((Eram2SflashAddr + 0x7F00)<Uart2EramAddr){
                      SflashAddr++;
                      Eram2SflashAddr++;
                      goto Cont_ProgSflash;
                    } else {
                      goto Check_next_bank;
                    }
              #endif      
 520   3          } else {
 521   3            printf("\n *** ERROR downloading from UART to RAM");
 522   3            goto End_sflash_programming;
 523   3          }
 524   2        }
 525   1      Check_next_bank:
 526   1        c++;
 527   1        if (c!=8){
 528   2          goto Program_Next_bank;
 529   2        } else {
 530   2          printf("\n *** Programming sflash done!\n");
 531   2        }
 532   1      End_sflash_programming:
 533   1        spiflash_wrsr_unlock(0);
 534   1        DisableWrCRam();
 535   1        return;
 536   1      }
*** WARNING C280 IN LINE 423 OF ..\src\spiflash.c: 'Program_Common_bank': unreferenced label
 537          #endif
 538          //***************************************************************
 539          //void spiflash_BackupCodeImage() 
 540          //This function is to copy 0-256k of code in the sflash to the backup area 256k-512k
 541          //***************************************************************
 542          #if 0
              u8 spiflash_BackupCodeImage()
              {
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 10  

                u8 idata Dat1;
                SflashAddr  = 0;
                Addr32_1  = GVTY_BACKUP_START_ADDR;
                printf("\n --> Backup code image Y/N?:");
                Dat1 = _get1char();
                TI = 0;
                SBUF = Dat1;
                if (Dat1!='Y')
                  return 0;
                printf("\n --> Delete old backup image Y/N?:");
                Dat1 = _get1char();
                TI = 0;
                SBUF = Dat1;
                if (Dat1!='Y')
                  return 0;
                spiflash_eraseBackup256k();
                printf("\n\n --> Backing up code image ");
              Cont_BkpSflash:
                Dat1 = spiflash_ReadByte(SflashAddr);
                spiflash_WriteByte(Addr32_1,Dat1);
                if (spiflash_ReadByte(Addr32_1)!=Dat1){
                  printf("\n *** Backup error @ 0x%04X%04X\n\n",(u16)(0xFFFF&(Addr32_1>>16)),(u16)(0xFFFF&Addr32_1));
                  spiflash_wrsr_unlock(0);
                  return 1;
                }
                if (Addr32_1<GVTY_BACKUP_END_ADDR){
                  SflashAddr++;
                  Addr32_1++;
                  if ((Addr32_1&0x1FF)==0)
                    printf(".");
                  goto Cont_BkpSflash;
                }
                printf("\n --> Backup code done!");
                spiflash_wrsr_unlock(0);
                return 0;
              }
              //***************************************************************
              //void spiflash_RestroreCodeImage() 
              //This function is to copy 0-256k of code in the sflash to the backup area 256k-512k
              //***************************************************************
              u8 spiflash_RestoreCodeImage()
              {
                u8 idata Dat1;
                SflashAddr  = 0;
                Addr32_1  = GVTY_BACKUP_START_ADDR;
                printf("\n --> Recover code image Y/N?:");
                Dat1 = _get1char();
                TI = 0;
                SBUF = Dat1;
                if (Dat1!='Y')
                  return 0;
                printf("\n --> Delete code image Y/N?:");
                Dat1 = _get1char();
                TI = 0;
                SBUF = Dat1;
                if (Dat1!='Y')
                  return 0;
                spiflash_eraseLower256k();
                printf("\n --> Restoring code image ");
              Cont_RestoreCodeImage:
                Dat1 = spiflash_ReadByte(Addr32_1);
                spiflash_WriteByte(SflashAddr,Dat1);
C51 COMPILER V9.54   SPIFLASH                                                              08/17/2016 10:02:50 PAGE 11  

                if (spiflash_ReadByte(SflashAddr)!=Dat1){
                  printf("\n *** Code restoring error @ 0x%04X%04X\n\n",(u16)(0xFFFF&(SflashAddr>>16)),(u16)(0xFFFF&Sflash
             -Addr));
                  spiflash_wrsr_unlock(0);
                  return 1;
                }
                if (Addr32_1<GVTY_BACKUP_END_ADDR){
                  SflashAddr++;
                  Addr32_1++;
                  if ((Addr32_1&0x1FF)==0)
                    printf(".");
                  goto Cont_RestoreCodeImage;
                }
                printf("\n --> Restoring code image done!");
                spiflash_wrsr_unlock(0);
                return 0;
              }
              #endif
 624          //-----------------------------------------------------------------------------
 625          //void Cmd_Erase_Sflash()
 626          //Hanlde the task to erase the whole sflash
 627          //-----------------------------------------------------------------------------
 628          #if 0
              void Cmd_Erase_Sflash()
              {
                char idata c;
                printf("\n --> THIS FUNCTION WILL ERASE 2MBYTE OF SPI FLASH Y/N? :");
                c = _getkey();
                TI = 0;
                SBUF = c;
                if (c!='Y')
                {
                  c = '1';
                  return;
                }
                c = 0;
                printf("\n --> Ready Y/N? :");
                c = _getkey();
                TI = 0;
                SBUF = c;
                if (c!='Y')
                {
                  c = '1';
                  return;
                }
                spiflash_chiperase();
                printf ("\n --> Erase spi flash done\n"); 
                return;
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    564    ----
   CONSTANT SIZE    =    249    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----       1
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
