AX51 MACRO ASSEMBLER  L51_PALM_BANK                                                         12/02/14 14:35:32 PAGE     1


MACRO ASSEMBLER AX51 V3.10
OBJECT MODULE PLACED IN .\obj\L51_PALM_BANK.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.EXE ..\..\..\common\L51_PALM_BANK.A51 SET(LARGE) DEBUG PRINT(.\lst\L51_PALM_B
                      ANK.lst) OBJECT(.\obj\L51_PALM_BANK.obj) EP

LOC    OBJ             LINE     SOURCE

                          1     $nomod51  NOLINES
                          2     $nocond 
                          3     ;
                          4     ;  *** <<< Use Configuration Wizard in Context Menu >>> ***
                          5     ;------------------------------------------------------------------------------
                          6     ;  This file is part of the BL51 / LX51 Banked Linker/Locater package
                          7     ;  Copyright (c) 2011 ARM Ltd and ARM Germnay GmbH. All rights reserved.
                          8     ;  Version 2.22 (Code and Variable Banking for Classic 8051 Derivatives)
                          9     ;------------------------------------------------------------------------------
                         10     ;************************ Configuration Section *******************************
                         11     ;<h> Bank Configuration
                         12     ;
                         13     ;     <i> Program Code in expanded memory is supported via the code banking mechanism
                         14     ;     <i> known from the classic 8051 architecture.  You need to specify the number
                         15     ;     <i> of code banks that are required for your application.
                         16     ;
                         17     ; <o> ?B_NBANKS: Number of Banks
                         18     ;                    <2=> 2
                         19     ;                    <4=> 4
                         20     ;                    <8=> 8
                         21     ;                    <16=> 16
                         22     ;                    <32=> 32
                         23     ;                    <64=> 64
                         24     ;                         <i> For BL51 the maximum value for ?B_NBANKS is 32
                         25     ;                         <i> For LX51 the maximum value for ?B_NBANKS is 64
 0008                    26     ?B_NBANKS       EQU  8    ; Define maximum Number of Banks
                         27     ;                         ; following values are allowed: 2, 4, 8, 16, 32, 64
                         28     ;                         ; for BL51 the maximum value for ?B_NBANKS is 32
                         29     ;                         ; for LX51 the maximum value for ?B_NBANKS is 64
                         30     ;
                         31     ; <o> ?B_MODE: Bank Switching via
                         32     ;                    <0=> 8051 Port
                         33     ;                    <1=> XDATA Port
                         34     ;                    <4=> User-provided bank switch code
 0000                    35     ?B_MODE         EQU  0    ; 0 for Bank-Switching via 8051 Port
                         36     ;                         ; 1 for Bank-Switching via XDATA Port
                         37     ;                         ; 4 for user-provided bank switch code
                         38     ;
                         39     ; <q> ?B_RTX: The application uses RTX-51 Real-time OS
 0001                    40     ?B_RTX          EQU  1    ; 0 for applications without real-time OS
                         41     ;                         ; 1 for applications using the RTX-51 real-time OS
                         42     ;
                         43     ; <q> ?B_VAR_BANKING: Variable banking uses this L51_BANK module
                         44     ;     <i> Notes: ?B_VAR_BANKING uses the 'far' and 'far const' C51 memory types to
                         45     ;     <i>         extent the space for variables in RAM and/or ROM of classic 8051
                         46     ;     <i>         device.  The same hardware as for code banking is used.  Program
                         47     ;     <i>         code banking and variable banking share the same hardware I/O pins.
                         48     ;     <i>         The C51 Compiler must be used with the VARBANKING directive.
                         49     ;     <i>         Variable Banking is only supported with the LX51 linker/locater.
 0000                    50     ?B_VAR_BANKING  EQU  0    ; Variable Banking via L51_BANK (far memory support)
                         51     ;                         ; 0 Variable Banking does not use L51_BANK.A51
                         52     ;                         ; 1 Variable Banking uses this L51_BANK.A51 module
                         53     ; Notes: ?B_VAR_BANKING uses the 'far' and 'far const' C51 memory types to
                         54     ;        extent the space for variables in RAM and/or ROM of classic 8051
                         55     ;        device.  The same hardware as for code banking is used.  Program
                         56     ;        code banking and variable banking share the same hardware I/O pins.
                         57     ;        The C51 Compiler must be used with the VARBANKING directive.
AX51 MACRO ASSEMBLER  L51_PALM_BANK                                                         12/02/14 14:35:32 PAGE     2

                         58     ;        Variable Banking is only supported with the LX51 linker/locater.
                         59     ;
                         60     ; <o> ?B_RST_BANK: Active code bank number after a Reset <0x0-0xFF>
                         61     ;     <i> Notes:
                         62     ;     <i> 1. This specifies the active code bank number after CPU reset.
                         63     ;     <i>    It is used to reduce the entries in the INTERBANK CALL TABLE.
                         64     ;     <i> 2. The value 0xFF disables LX51 linker/locater optimization.
                         65     ;     <i> 3. Interbank Call Table optimization is only possible with LX51.
 0000                    66     ?B_RST_BANK     EQU  0x00 ; specifies the active code bank number after CPU ## EVE :0xFF
                                org
                         67     ;                         ; Reset.  Used to reduce the entries in the
                         68     ;                         ; INTERBANK CALL TABLE.  The value 0xFF disables
                         69     ;                         ; this LX51 linker/locater optimization.
                         70     ; Note:  Interbank Call Table optimization is only possible with LX51.
                         71     ;
                         72     ;</h>
                         73     ;-----------------------------------------------------------------------------
                         74     ;
                         75     IF  ?B_MODE = 0;
                         76     ;-----------------------------------------------------------------------------
                         77     ; if ?BANK?MODE is 0 define the following values
                         78     ; For Bank-Switching via 8051 Port define Port Address / Bits
                         79     ;
                         80     ;<h> Bank Switching via 8051 Port
                         81     ;    <i> This is only used if ?B_MODE is 0
                         82     ; <o> P1: 8051 Port address <0x0-0xFF>
 009F                    83     RMAP            DATA    0x9F       ; I/O Port Address
                         84     ;
 009F                    85     ?B_PORT         EQU     RMAP       ; default is P1
                         86     ; <o> ?B_FIRSTBIT: Starting with Bit <0-7>
                         87     ;     <i> Default is Bit 2
 0000                    88     ?B_FIRSTBIT     EQU     0          ; default is Bit 2
                         89     ;</h>
                         90     ;-----------------------------------------------------------------------------
                         91     ENDIF;
                         92     ;
                                ENDIF;
                        108     ;
                                ENDIF;
                        189     ;
                                ENDIF;
                        216     ;
                        217     ;******************************************************************************
                        218     ;                                                                             *
                        219     ; THEORY OF OPERATION                                                         *
                        220     ; -------------------                                                         *
                        221     ; The section below describes the code generated by BL51 or LX51 and the      *
                        222     ; operation of the L51_BANK.A51 module.  BL51/LX51 generates for each         *
                        223     ; function that is located in a code memory bank and called from the common   *
                        224     ; area or a different code bank and entry into the INTRABANK CALL TABLE.  The *
                        225     ; INTRABANK CALL TABLE is located in the SEGMENT ?BANK?SELECT and listed in   *
                        226     ; the Linker MAP file. The entries in that TABLE have the following format:   *
                        227     ;                                                                             *
                        228     ;   ?FCT?1:  MOV  DPTR,#FCT     ; Load Address of target FCT                  *
                        229     ;            JMP  ?B_BANKn      ; Switch to Bank and Jump to Target Code      *
                        230     ;                                                                             *
                        231     ; Instead of directly calling the function FCT, the Linker changes the entry  *
                        232     ; to ?FCT?1.  This entry selects the bank where the function FCT is located   *
                        233     ; and calls that function via the routines defined in this L51_BANK.A51 file. *
                        234     ; The L51_BANK.A51 file contains two sets of functions for each bank:         *
                        235     ;                                                                             *
                        236     ; ?B_BANKn    is a routine which saves the entry of the ?B_SWITCHn function   *
                        237     ;             for the current active bank on the STACK and switches to the    *
                        238     ;             bank 'n'.  Then it jumps to the address specified by the DPTR   *
                        239     ;             register.  It is allowed to modify the following registers in   *
                        240     ;             the ?B_BANKn routine:  A, B, R0, DPTR, PSW                      *
AX51 MACRO ASSEMBLER  L51_PALM_BANK                                                         12/02/14 14:35:32 PAGE     3

                        241     ;                                                                             *
                        242     ; ?B_SWITCHn  is a function which selects the bank 'n'.  This function is     *
                        243     ;             used at the end of a user function to return to the calling     *
                        244     ;             code bank.  Only the following registers may be altered in the  *
                        245     ;             ?B_SWITCHn function:  R0, DPTR                                  *
                        246     ;                                                                             *
                        247     ; The current active bank is stored in ?B_CURRENTBANK.  RTX-51 uses this      *
                        248     ; variable to restore the code bank after a task switch.  To get correct      *
                        249     ; results, ?B_CURRENTBANK must be set to the code bank before the hardware    *
                        250     ; switch is done, or the code banking sequences must be interrupt protected.  *
                        251     ;******************************************************************************
                        252     
                        253                     NAME    ?BANK?SWITCHING
                        254     
                        255                     PUBLIC  ?B_NBANKS, ?B_MODE, ?B_CURRENTBANK, ?B_MASK
                        256                     PUBLIC  ?B_FACTOR, ?B_RST_BANK
                        257     IF (?B_RTX = 1)
                        258                     PUBLIC  ?B_RESTORE_BANK
                        259     ENDIF
                        260     
                        261     ; Standard SFR Symbols required in L51_BANK.A51
 00E0                   262     ACC     DATA    0E0H
 00F0                   263     B       DATA    0F0H
 0082                   264     DPL     DATA    82H
 0083                   265     DPH     DATA    83H
 00A8                   266     IE      DATA    0A8H
 00A8.7                 267     EA      BIT     IE.7
                        268     
                        269     
                        270     ; generate Mask and Bank Number Information
                                ELSEIF  ?B_NBANKS <= 8
 0007                   276       MASK          EQU     00000111B
                                ENDIF     
                        284     
                        285     IF  ?B_MODE = 0 ;**************************************************************
                        286     
 0001                   287     ?B_FACTOR       EQU     1 SHL ?B_FIRSTBIT
                        288     
 0007                   289     ?B_MASK         EQU     MASK SHL ?B_FIRSTBIT
                        290     
                        291     BANKN           MACRO   N
                        292     BANK&N           EQU     N SHL ?B_FIRSTBIT
                        293                     ENDM
                        294     
 0000                   295     CNT             SET     0
                        296     
                        297                     REPT    ?B_NBANKS
                        298                     BANKN   %CNT
                        299     CNT             SET     CNT+1
                        325     
                        326     
 009F                   327     ?B_CURRENTBANK  EQU     ?B_PORT
                        328     
                        329       IF ?B_RTX = 1 OR ?B_NBANKS > 32
                        330       ; Convert Bank No in Accu to Address * 4
                        331     
                        332       IF  ?B_FIRSTBIT = 0
                        333       CONVBANKNO    MACRO
                        334                     RL      A
                        335                     RL      A
                        336                     ENDM
                        337       ENDIF
                        338     
                                  ENDIF
                        344     
                                  ENDIF
AX51 MACRO ASSEMBLER  L51_PALM_BANK                                                         12/02/14 14:35:32 PAGE     4

                        349     
                                  ENDIF
                        355     
                                  ENDIF
                        362     
                                  ENDIF
                        369     
                                  ENDIF
                        375     
                                  ENDIF
                        382     
                        383       ; Macro code to select the 'N'
                        384       SWITCH        MACRO   N
                        385                     ORG     N * 4
                        386                     PUBLIC  ?B_SWITCH&N
                        387       ?B_SWITCH&N:
                        388                     MOV     R0,#(BANK&N OR NOT ?B_MASK) 
                        389       IF ?B_NBANKS > 32
                        390         IF (N < 32) 
                        391                     SJMP    SWITCHBNK_H
                        392         ELSEIF (N = 32)
                        393           SWITCHBNK_H:
                        394                     SJMP    SWITCHBNK
                        395         ELSEIF (N <> ?B_NBANKS-1)
                        396                     SJMP    SWITCHBNK
                        397         ENDIF
                        398       ELSE
                        399         IF N <> (?B_NBANKS-1)
                        400                     SJMP    SWITCHBNK
                        401         ENDIF
                        402       ENDIF
                        403     
                        404                     ENDM
                        405     
                        406     ENDIF
                        407     
                        408     
                                ENDIF
                        479     
                        480     
                        481     SELECT          MACRO   N
                        482     LOCAL           XLABEL, YLABEL
                        483     
                        484                     PUBLIC  ?B_BANK&N
                        485     ?B_BANK&N:      
                        486                     MOV     A,?B_CURRENTBANK
                        487                     ANL     A,#?B_MASK
                        488                     CONVBANKNO         ; Convert Bank Number to Address
                        489                     PUSH    ACC
                        490                     MOV     A,#HIGH ?BANK?SWITCH
                        491                     PUSH    ACC
                        492                     PUSH    DPL
                        493                     PUSH    DPH
                        494                     LJMP    ?B_SWITCH&N
                        495                     ENDM
                        496     
                        497     
------                  498     ?BANK?SELECT    SEGMENT  CODE
                        499     
------                  500                     RSEG    ?BANK?SELECT
 0000                   501     CNT             SET     0
                        502     
                        503                     REPT    ?B_NBANKS
                        504                     SELECT  %CNT
                        505     CNT             SET     CNT+1
                        506     
AX51 MACRO ASSEMBLER  L51_PALM_BANK                                                         12/02/14 14:35:32 PAGE     5

                        644     
                        645     
                        646     
                        647     
------                  648     ?BANK?SWITCH    SEGMENT  CODE  PAGE
                        649     
------                  650                     RSEG    ?BANK?SWITCH
 0000                   651     CNT             SET     0
                        652     
                        653                     REPT    ?B_NBANKS
                        654                     SWITCH  %CNT
                        655     
                        656     CNT             SET     CNT+1
                        834     
                        835     
                                  ELSEIF ?B_RTX = 1
                        845     
00001E C8               846         SWITCHBNK:  XCH     A,R0
00001F 10AF07           847         SWITCHBNK2: JBC     EA,SWITCHBNK_EA1
000022 439F07           848                     ORL     ?B_CURRENTBANK, #?B_MASK
000025 529F             849                     ANL     ?B_CURRENTBANK, A
000027 E8               850                     MOV     A,R0
000028 22               851                     RET
                        852     
000029                  853         SWITCHBNK_EA1:                     ; interrupts where enabled
000029 439F07           854                     ORL     ?B_CURRENTBANK, #?B_MASK
00002C 529F             855                     ANL     ?B_CURRENTBANK, A
00002E E8               856                     MOV     A,R0
00002F D2AF             857                     SETB    EA             ; enable interrupts again
000031 22               858                     RET
                        859     
000032                  860         ?B_RESTORE_BANK:                   ; entry for RTX-51 bank restore
000032 44F8             861                     ORL     A,#NOT ?B_MASK
000034 80E9             862                     SJMP    SWITCHBNK2
                        863     
                        864       ENDIF
                        865     
                        866     
                        867     ENDIF  ; close block IF ?B_MODE = 0 *******************************************
                        868     
                        869     
                                ENDIF  ; close block IF ?B_MODE = 1 *******************************************
                       1111     
                       1112     
                                ENDIF  ; close block IF ?B_MODE = 4 *******************************************
                       1185     
------                 1186                     RSEG    ?BANK?SELECT
                       1187     
                       1188     ;************************  SWITCHBANK FUNCTION  *******************************
                       1189     ;                                                                             *
                       1190     ; SWITCHBANK allows use of bank-switching for C programs                      *
                       1191     ;                                                                             *
                       1192     ; prototype:   extern switchbank (unsigned char bank_number);                 *
                       1193     ;                                                                             *
                       1194     ;******************************************************************************
                       1195                     PUBLIC  _SWITCHBANK, ?B_SWITCHBANK_A
                       1196     
000098 EF              1197     _SWITCHBANK:    MOV     A,R7
                       1198     
                       1199     IF  ?B_MODE = 0 ;**************************************************************
                       1200     
000099                 1201     ?B_SWITCHBANK_A:
                       1202     IF ?B_NBANKS > 32 OR ?B_RTX = 1
000099 23              1203                     RL      A
00009A 23              1204                     RL      A
                       1205     ENDIF
AX51 MACRO ASSEMBLER  L51_PALM_BANK                                                         12/02/14 14:35:32 PAGE     6

                       1206     
                                ENDIF
00009B 900000     F    1211                     MOV     DPTR,#?BANK?SWITCH
00009E 73              1212                     JMP     @A+DPTR
                       1213     
                       1214     ENDIF  ; close block IF ?B_MODE = 0 *******************************************
                       1215     
                                ENDIF  ; close block IF ?B_MODE = 1 *******************************************
                       1231     
                                ENDIF  ; close block IF ?B_MODE = 4 *******************************************
                       1261     
                       1262     
                                ENDIF  ; close block IF ?B_VAR_BANKING ****************************************
                       1675     
                       1676                     END
AX51 MACRO ASSEMBLER  L51_PALM_BANK                                                         12/02/14 14:35:32 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E                       T Y P E  V A L U E     ATTRIBUTES

?B_BANK0 . . . . . . . . . .  C  ADDR  0000H     R   SEG=?BANK?SELECT
?B_BANK1 . . . . . . . . . .  C  ADDR  0013H     R   SEG=?BANK?SELECT
?B_BANK2 . . . . . . . . . .  C  ADDR  0026H     R   SEG=?BANK?SELECT
?B_BANK3 . . . . . . . . . .  C  ADDR  0039H     R   SEG=?BANK?SELECT
?B_BANK4 . . . . . . . . . .  C  ADDR  004CH     R   SEG=?BANK?SELECT
?B_BANK5 . . . . . . . . . .  C  ADDR  005FH     R   SEG=?BANK?SELECT
?B_BANK6 . . . . . . . . . .  C  ADDR  0072H     R   SEG=?BANK?SELECT
?B_BANK7 . . . . . . . . . .  C  ADDR  0085H     R   SEG=?BANK?SELECT
?B_CURRENTBANK . . . . . . .  D  ADDR  009FH     A   
?B_FACTOR. . . . . . . . . .  N  NUMB  0001H     A   
?B_FIRSTBIT. . . . . . . . .  N  NUMB  0000H     A   
?B_MASK. . . . . . . . . . .  N  NUMB  0007H     A   
?B_MODE. . . . . . . . . . .  N  NUMB  0000H     A   
?B_NBANKS. . . . . . . . . .  N  NUMB  0008H     A   
?B_PORT. . . . . . . . . . .  D  ADDR  009FH     A   
?B_RESTORE_BANK. . . . . . .  C  ADDR  0032H     R   SEG=?BANK?SWITCH
?B_RST_BANK. . . . . . . . .  N  NUMB  0000H     A   
?B_RTX . . . . . . . . . . .  N  NUMB  0001H     A   
?B_SWITCH0 . . . . . . . . .  C  ADDR  0000H     R   SEG=?BANK?SWITCH
?B_SWITCH1 . . . . . . . . .  C  ADDR  0004H     R   SEG=?BANK?SWITCH
?B_SWITCH2 . . . . . . . . .  C  ADDR  0008H     R   SEG=?BANK?SWITCH
?B_SWITCH3 . . . . . . . . .  C  ADDR  000CH     R   SEG=?BANK?SWITCH
?B_SWITCH4 . . . . . . . . .  C  ADDR  0010H     R   SEG=?BANK?SWITCH
?B_SWITCH5 . . . . . . . . .  C  ADDR  0014H     R   SEG=?BANK?SWITCH
?B_SWITCH6 . . . . . . . . .  C  ADDR  0018H     R   SEG=?BANK?SWITCH
?B_SWITCH7 . . . . . . . . .  C  ADDR  001CH     R   SEG=?BANK?SWITCH
?B_SWITCHBANK_A. . . . . . .  C  ADDR  0099H     R   SEG=?BANK?SELECT
?B_VAR_BANKING . . . . . . .  N  NUMB  0000H     A   
?BANK?SELECT . . . . . . . .  C  SEG   00009FH       REL=UNIT, ALN=BYTE
?BANK?SWITCH . . . . . . . .  C  SEG   000036H       REL=UNIT, ALN=PAGE
?BANK?SWITCHING. . . . . . .  -- ----  -------       
_SWITCHBANK. . . . . . . . .  C  ADDR  0098H     R   SEG=?BANK?SELECT
ACC. . . . . . . . . . . . .  D  ADDR  00E0H     A   
B. . . . . . . . . . . . . .  D  ADDR  00F0H     A   
B_SWITCH_SIZE. . . . . . . .  -- ----  -------       
BANK0. . . . . . . . . . . .  N  NUMB  0000H     A   
BANK1. . . . . . . . . . . .  N  NUMB  0001H     A   
BANK2. . . . . . . . . . . .  N  NUMB  0002H     A   
BANK3. . . . . . . . . . . .  N  NUMB  0003H     A   
BANK4. . . . . . . . . . . .  N  NUMB  0004H     A   
BANK5. . . . . . . . . . . .  N  NUMB  0005H     A   
BANK6. . . . . . . . . . . .  N  NUMB  0006H     A   
BANK7. . . . . . . . . . . .  N  NUMB  0007H     A   
CNT. . . . . . . . . . . . .  N  NUMB  0008H     A   
DPH. . . . . . . . . . . . .  D  ADDR  0083H     A   
DPL. . . . . . . . . . . . .  D  ADDR  0082H     A   
EA . . . . . . . . . . . . .  B  ADDR  00A8H.7   A   
IE . . . . . . . . . . . . .  D  ADDR  00A8H     A   
LONG_MACRO . . . . . . . . .  -- ----  -------       
MASK . . . . . . . . . . . .  N  NUMB  0007H     A   
N. . . . . . . . . . . . . .  -- ----  -------       
RMAP . . . . . . . . . . . .  D  ADDR  009FH     A   
SAVEA. . . . . . . . . . . .  -- ----  -------       
SWITCHBNK. . . . . . . . . .  C  ADDR  001EH     R   SEG=?BANK?SWITCH
SWITCHBNK2 . . . . . . . . .  C  ADDR  001FH     R   SEG=?BANK?SWITCH
SWITCHBNK_EA1. . . . . . . .  C  ADDR  0029H     R   SEG=?BANK?SWITCH


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).
