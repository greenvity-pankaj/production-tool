C51 COMPILER V9.53.0.0   LIST                                                              11/04/2015 20:09:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE LIST
OBJECT MODULE PLACED IN .\obj\list.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\firmware\common\list.c LARGE OBJECTADVANCED OPTIMIZE(9,SIZE)
                    - BROWSE INTVECTOR(0X2100) INCDIR(..\..\..\..\firmware\common\datapath;..\..\..\..\firmware\common\include;..\..\..\..\fi
                    -rmware\hal;..\..\..\..\firmware\hpgp\src\crypto;..\..\..\..\firmware\hpgp\src\ctrl;..\..\..\..\firmware\hpgp\src\hal;..\
                    -..\..\..\firmware\hpgp\src\link;..\..\..\..\firmware\hpgp\src\mux;..\..\..\..\firmware\hpgp\src\nma;..\..\..\..\firmware
                    -\hpgp\src\route;..\..\..\..\firmware\hpgp\src\test;..\..\..\..\firmware\project\hal\src;..\..\..\..\firmware\zigbee;..\.
                    -.\..\..\components\aps\inc;..\..\..\..\components\utilities\datatype\inc;..\..\..\..\components\utilities\event\inc;..\.
                    -.\..\..\components\utilities\linklist\inc;..\..\..\..\components\utilities\timer\inc;..\..\..\..\components\hpgp\inc;..\
                    -..\..\..\firmware\common;..\..\..\..\firmware\hpgp;..\..\..\..\firmware\hpgp\src;..\..\..\..\firmware\app_support;..\..\
                    -..\..\firmware\HybriiB_configuration_rw\src;..\..\..\..\components\drivers\gpio\inc;..\..\..\..\components\drivers\hpgp\
                    -inc;..\..\..\..\components\drivers\nwk\inc;..\..\..\..\components\drivers\ieee802154\inc;..\..\..\..\components;..\..\..
                    -\..\components\osal\inc;..\..\..\..\components\nma\hpgp\inc;..\..\..\..\components\nma\ieee802154\inc;..\..\..\..\compon
                    -ents\nma;..\..\..\..\components\utilities\event\inc;..\..\..\..\components\hpgp\inc;..\..\..\..\components\drivers\flash
                    -\inc;..\..\..\..\components\ieee802154\inc;..\..\..\..\components\drivers\uart\inc;..\..\..\..\components\utilities;..\.
                    -.\..\..\components\drivers\hpgp\inc;..\..\..\..\components\drivers\ieee802154\inc;..\..\..\..\components\drivers\nwk\inc
                    -;..\..\..\..\components\utilities\debug\inc;..\..\..\..\sampleapp\inc;..\..\..\..\sampleapp\src;..\..\inc;..\..\..\..\co
                    -mponents\drivers\i2c\inc;..\..\..\..\components\drivers\gvspi\inc) NOAREGS DEFINE(inline,P8051,C51,HPGP_HAL,HYBRII_8051,
                    -HYBRII_HPGP,CCO_FUNC,STA_FUNC,HPGP_TEST,HPGP_DEBUG,RTX51_TINY_OS,HYBRII_ASIC,PLC_SW_SYNC,HPGP_MAC_SAP,NMA,NEW_SYNC,UM,HY
                    -BRII_B,Hybrii_B,HW_SPI_TX_CRC,HW_SPI_RX_CRC,B_ASICPLC,HYBRII_ASIC_A2,BB_CAL,_CRC_VERIFY_,BB_GAIN_TABLE,B2,FREQ_DETECT,HY
                    -BRII_B_AFE,_BC_SECURE_TEST_,FREQ_DETECT,BCN_ERR,NO_HOST,MCCO,KEEP_ALIVE,UART_RAW,UART_HOST_INTF,UART_GPIO_INTERRUPT,MCCO
                    -,SW_RECOVERY,HYBRII_802154,DEBUG_DATAPATH,HPGP_DRIVER_APP,LRWPAN_DRIVER_APP,NWKSTARTUP_APP,ROUTE_APP,RTOPO_APP,REGISTER_
                    -APP,LLP_APP,BRIDGE,DEVICEINTF_APP,SMARTLIGHT_APP,LED_SMART_LIGHT,ROUTE_RECOVERY) PRINT(.\lst\list.lst) TABS(2) OBJECT(.\
                    -obj\list.obj)

line level    source

   1          /** =======================================================
   2           * @file list.c
   3           *
   4           *  @brief Circular Linked Lists
   5           *
   6           *  Copyright (C) 2010-2011, Greenvity Communications, Inc.
   7           *  All Rights Reserved
   8           * ========================================================*/
   9          
  10          #include "papdef.h"
  11          #include "list.h"
  12          
  13          void SLIST_Init(struct slist *list) __REENTRANT__
  14          {
  15   1        EA = 0;
  16   1          list->head = NULL;
  17   1          list->tail = NULL;
  18   1        EA = 1;
  19   1      //    list->len = 0;
  20   1      }
  21          
  22          /* Add a link to list head */
  23          void SLIST_Push(struct slist *list, struct slink *link) __REENTRANT__
  24          {
  25   1        EA = 0;
  26   1          if(list->head == NULL)
  27   1          {
  28   2              //queuee is empty
  29   2              list->head = link;
  30   2              list->tail = link;
  31   2              link->next = NULL;
  32   2          }
  33   1          else
  34   1          {
C51 COMPILER V9.53.0.0   LIST                                                              11/04/2015 20:09:38 PAGE 2   

  35   2              link->next = list->head;
  36   2              list->head = link;
  37   2          }
  38   1        EA = 1;
  39   1          //list->len++;
  40   1      }
  41          
  42          
  43          /* add a link to the list tail */
  44          void SLIST_Put(struct slist *list, struct slink *link) __REENTRANT__
  45          {
  46   1        EA = 0;
  47   1          if(list->tail == NULL)
  48   1          {
  49   2              //queue is empty
  50   2              list->head = link;
  51   2              list->tail = link;
  52   2              link->next = NULL;
  53   2          }
  54   1          else
  55   1          {
  56   2      //        link->next = list->tail->next;
  57   2              list->tail->next = link;
  58   2            list->tail = link;
  59   2              link->next = NULL;
  60   2          }
  61   1        EA = 1;
  62   1          //list->len++;
  63   1      }
  64          
  65          
  66          /* Add a link after a (pre)link in the list */
  67          void SLIST_Add(struct slist *list, struct slink *prelink, struct slink *link) __REENTRANT__
  68          {
  69   1        EA = 0;
  70   1          link->next = prelink->next;
  71   1          prelink->next = link;
  72   1          if(list->tail == prelink)
  73   1          {
  74   2              list->tail = link;
  75   2          }
  76   1        EA = 1;
  77   1      }
  78          
  79          
  80          /* remove a link after a (pre)link in the list */
  81          void SLIST_Remove(struct slist *list, struct slink *prelink, struct slink *link) __REENTRANT__
  82          {
  83   1        EA = 0;
  84   1          prelink->next = link->next;
  85   1          if(list->tail == link)
  86   1          {
  87   2              list->tail = prelink;
  88   2          }
  89   1        EA = 1;
  90   1      }
  91          
  92          
  93          
  94          /* remove a link from the head of the list */
  95          struct slink * SLIST_Pop (struct slist *list) __REENTRANT__
  96          {
C51 COMPILER V9.53.0.0   LIST                                                              11/04/2015 20:09:38 PAGE 3   

  97   1          struct slink *link = list->head;
  98   1        EA = 0;
  99   1          if( list->tail == link)
 100   1      //    if( list->head == NULL)
 101   1          {
 102   2              //at most one link in the queue
 103   2              list->head = NULL;
 104   2        list->tail = NULL;
 105   2              //list->len = 0;
 106   2          }
 107   1          else
 108   1          {
 109   2              list->head = list->head->next;
 110   2      //        list->len--;
 111   2          }
 112   1        EA = 1;
 113   1          return link;
 114   1      }
 115          
 116          
 117          /**
 118           * DLIST_Push_ - add a new link at head (add after the list)
 119           * @link: new link to be added
 120           * @list: list head to add it after
 121           
 122           * Insert a new entry after the specified head.
 123           * This is good for implementing stacks.
 124           */
 125          void DLIST_Push(struct dlink *list, struct dlink *link) __REENTRANT__
 126          {
 127   1          list->next->prev = link;
 128   1          link->next = list->next;
 129   1          link->prev = list;
 130   1          list->next = link;
 131   1      }
 132          
 133          /**
 134           * DLIST_Put - add a new link at the tail (add before list)
 135           * @link: new link to be added
 136           * @list: list head to add it before
 137           *
 138           * Insert a new link before the specified head.
 139           * This is useful for implementing queues.
 140           */
 141          void DLIST_Put(struct dlink *list, struct dlink *link) __REENTRANT__
 142          {
 143   1          link->prev = list->prev;
 144   1          list->prev->next = link;
 145   1          link->next = list;
 146   1          list->prev = link;
 147   1      }
 148          
 149          /**
 150           * list_del - deletes entry from list.
 151           * @entry: the element to delete from the list.
 152           * Note: list_empty on entry does not return true after this, the entry is
 153           * in an undefined state.
 154           */
 155          void DLIST_Remove(struct dlink *link) __REENTRANT__
 156          {
 157   1          link->next->prev = link->prev;
 158   1          link->prev->next = link->next;
C51 COMPILER V9.53.0.0   LIST                                                              11/04/2015 20:09:38 PAGE 4   

 159   1          link->next = NULL; 
 160   1          link->prev = NULL; 
 161   1      }
 162          
 163          
 164          /** =========================================================
 165           *
 166           * Edit History
 167           *
 168           * $Source: /home/cvsrepo/Hybrii_B_OSFW_Dev/firmware/common/list.c,v $
 169           *
 170           * $Log: list.c,v $
 171           * Revision 1.5  2015/01/02 14:55:35  kiran
 172           * 1) Timer Leak fixed while freeing SCB fixed
 173           * 2) Software broadcast supported for LG
 174           * 3) UART Loopback supported for LG
 175           * 4) Keep Alive feature to ageout defunctional STA
 176           * 5) Improved flash API's for NO Host Solution
 177           * 6) Imporved PLC Hang recovery mechanism
 178           * 7) Reduced nested call tree of common path functions
 179           * 8) Code optimization and cleanup (unused arguments, unused local variables)
 180           * 9) Work around for UART hardware interrupt issues (unintended interrupts and no interrupts)
 181           * 10) Use of memory specific pointers instead of generic pointers
 182           *
 183           * Revision 1.4  2014/11/26 13:19:39  ranjan
 184           * *** empty log message ***
 185           *
 186           * Revision 1.3  2014/11/11 14:52:56  ranjan
 187           * 1.New Folder Architecture espically in /components
 188           * 2.Modular arrangment of functionality in new files
 189           *    anticipating the need for exposing them as FW App
 190           *    development modules
 191           * 3.Other improvisation in code and .h files
 192           *
 193           * Revision 1.2  2014/05/28 10:58:58  prashant
 194           * SDK folder structure changes, Uart changes, removed htm (UI) task
 195           * Varified - UM, LM - iperf (UDP/TCP), overnight test pass
 196           *
 197           * Revision 1.1  2013/12/18 17:03:14  yiming
 198           * no message
 199           *
 200           * Revision 1.1  2013/12/17 21:42:26  yiming
 201           * no message
 202           *
 203           * Revision 1.2  2013/01/24 00:13:46  yiming
 204           * Use 01-23-2013 Hybrii-A code as first Hybrii-B code base
 205           *
 206           * Revision 1.4  2012/07/19 21:46:07  son
 207           * Prepared files for zigbee integration
 208           *
 209           * Revision 1.2  2012/05/24 04:50:25  yuanhua
 210           * define list functions as reentrant
 211           *
 212           * Revision 1.1  2012/05/12 04:11:46  yuanhua
 213           * (1) added list.h (2) changed the hal tx for the hw MAC implementation.
 214           *
 215           *
 216           * ========================================================*/
 217          
 218          


C51 COMPILER V9.53.0.0   LIST                                                              11/04/2015 20:09:38 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1105    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      54
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
