C51 COMPILER V9.52.0.0   UI_UTILS                                                          12/02/2014 14:35:42 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UI_UTILS
OBJECT MODULE PLACED IN .\obj\ui_utils.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\common\ui_utils.c LARGE OMF2 OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0X2
                    -100) INCDIR(..\..\..\common\datapath;..\..\..\common\include;..\..\..\hal;..\..\src\crypto;..\..\src\ctrl;..\..\src\hal;
                    -..\..\src\link;..\..\src\mux;..\..\src\nma;..\..\src\route;..\..\src\sap;..\..\src\test;..\..\..\project\hal\src;..\..\.
                    -.\zigbee;..\..\..\..\components\aps\inc;..\..\..\..\components\utilities\datatype\inc;..\..\..\..\components\utilities\e
                    -vent\inc;..\..\..\..\components\utilities\linklist\inc;..\..\..\..\components\utilities\timer\inc;..\..\..\..\sampleapp\
                    -src;..\..\..\..\sampleapp\inc;..\..\..\common;..\..\..\hpgp;..\..\src;..\..\..\..\components\hpgp\inc;..\..\..\app_suppo
                    -rt;..\..\..\HybriiB_configuration_rw\src) NOAREGS DEFINE(inline,P8051,C51,HPGP_HAL,HYBRII_8051,HYBRII_HPGP,CCO_FUNC,STA_
                    -FUNC,HPGP_TEST,HPGP_DEBUG,RTX51_TINY_OS,HYBRII_ASIC,PLC_SW_SYNC,HYBRII_ETH,HPGP_MAC_SAP,NMA,HYBRII_SPI,NEW_SYNC,UM,HYBRI
                    -I_B,Hybrii_B,HW_SPI_TX_CRC,HW_SPI_RX_CRC,AUTH_AES,PLC_TEST,B_ASICPLC,UART_HOST_INTF_,UART_RAW,MPER_,FREQ_DETECT,SW_RECOV
                    -ERY,PROD_TEST) DEBUG PRINT(.\lst\ui_utils.lst) TABS(2) OBJECT(.\obj\ui_utils.obj)

line level    source

   1          #include <stdio.h>
   2          #include "papdef.h"
   3          #include "hal_common.h"
   4          #include "hal_eth.h"
   5          #include "uart.h"
   6          #include "utils.h"
   7          
   8          void ui_utils_cmd_spi (char* cmd_buf_p)        
   9          {
  10   1          u16  spi_addr;
  11   1          u16  spi_data;                 
  12   1        char action;
  13   1      
  14   1          if (sscanf(cmd_buf_p+1, "%c", &action) < 1) {
  15   2              return;
  16   2          }    
  17   1       
  18   1          if (action == 'w' || action == 'W') {
  19   2              if (sscanf(cmd_buf_p+2, "%x %x", &spi_addr, &spi_data) < 2) {
  20   3                  return;
  21   3              }
  22   2      
  23   2              mac_utils_spi_write(spi_addr, spi_data);
  24   2      
  25   2              printf("    SPI:  %03X --> [%02X]\n\n", spi_data, spi_addr);
  26   2        } else if (action == 'r' || action == 'R') {
  27   2              if (sscanf(cmd_buf_p+2, "%x", &spi_addr) < 1) {
  28   3                  return;
  29   3              }
  30   2      
  31   2              spi_data = mac_utils_spi_read(spi_addr);
  32   2      
  33   2              printf("    SPI:  %03X --> [%02X]\n\n", spi_data, spi_addr);
  34   2          }
  35   1      }
  36          #ifdef UM
  37          u8 ui_utils_cmd_get_poll(u8 *cmd_buf_p, u8 max_cmd_buff_size)
  38          {
  39   1          char  c;
  40   1          static u8    idx = 0;
  41   1      
  42   1          //while (1) 
  43   1        {
  44   2      #if 0
                      c = _getkey_poll();
              #else
C51 COMPILER V9.52.0.0   UI_UTILS                                                          12/02/2014 14:35:42 PAGE 2   

  47   2          {
  48   3           c = 0xee;
  49   3      
  50   3          //   do
  51   3          //   {
  52   3          if (RI == 0) 
  53   3          {
  54   4            c = 0xee;
  55   4          }
  56   3          else
  57   3          {
  58   4            RI = 0;
  59   4              c = SBUF;
  60   4      
  61   4            if (c == 0x11)
  62   4            {
  63   5              
  64   5              c = 0xee;
  65   5            }
  66   4            
  67   4          }
  68   3      
  69   3          }
  70   2      
  71   2      #endif
  72   2              switch (c) 
  73   2          {
  74   3          case 0xee:
  75   3            return 0;
  76   3          break;
  77   3          
  78   3              case '\b':    // backspace
  79   3                  if (idx > 0) {
  80   4                      printf("\b \b");
  81   4                      idx--;
  82   4                  }
  83   3            return 0;
  84   3                  break;
  85   3      
  86   3              case 0x1B:    // ESC
  87   3              case '`':
  88   3                  *cmd_buf_p = 0;
  89   3            idx = 0;
  90   3                  printf("\n");
  91   3                  return 0;
  92   3                  break;
  93   3      
  94   3              
  95   3              case '\r':    // enter
  96   3              case '\n':
  97   3                         printf(" \n");
  98   3                         if (idx == 0)
  99   3                         {
 100   4                             *cmd_buf_p = 0;
 101   4                             printf("> ");
 102   4                   return 0;
 103   4                             break;
 104   4                         }
 105   3                         
 106   3                         while (idx < max_cmd_buff_size) {
 107   4                             *(cmd_buf_p + idx++) = 0;
 108   4                         }
C51 COMPILER V9.52.0.0   UI_UTILS                                                          12/02/2014 14:35:42 PAGE 3   

 109   3      
 110   3                 idx = 0;
 111   3                         return 1;
 112   3              
 113   3      
 114   3              default:
 115   3                  if (idx < max_cmd_buff_size) {
 116   4                      *(cmd_buf_p + idx) = c;
 117   4              #if 0
                              putchar(*(cmd_buf_p + idx++));
                      #else
 120   4              {
 121   5                char c = *(cmd_buf_p + idx++);
 122   5                
 123   5                if (c == '\n')  
 124   5                {
 125   6                  TI = 0;
 126   6                  SBUF = '\r';    // output CR before LF
 127   6                  while (TI == 0);
 128   6                  TI = 0;
 129   6                }
 130   5                TI = 0;
 131   5                SBUF = c;    // output CR before LF
 132   5                while (TI == 0);
 133   5                TI = 0;
 134   5                     
 135   5              }
 136   4      
 137   4              #endif
 138   4                  }
 139   3            return 0;
 140   3                  break;
 141   3              }
 142   2          }
 143   1        
 144   1      }
 145          #else
              void ui_utils_cmd_get (u8 *cmd_buf_p, u8 max_cmd_buff_size)
              {
                  char  c;
                  u8    idx = 0;
              
                  while (1) {
                      c = _getkey();
              
                      switch (c) {
                      case '\b':    // backspace
                          if (idx > 0) {
                              printf("\b \b");
                              idx--;
                          }
                          break;
              
                      case 0x1B:    // ESC
                      case '`':
                          *cmd_buf_p = 0;
                          printf("\n");
                          return;
                          break;
              
                      
                      case '\r':    // enter
C51 COMPILER V9.52.0.0   UI_UTILS                                                          12/02/2014 14:35:42 PAGE 4   

                      case '\n':
                                 printf(" \n");
                                 if (idx == 0)
                                 {
                                     *cmd_buf_p = 0;
                                     printf("> ");
                                     break;
                                 }
                                 
                                 while (idx < max_cmd_buff_size) {
                                     *(cmd_buf_p + idx++) = 0;
                                 }
                                 return;
                      
              
                      default:
                          if (idx < max_cmd_buff_size) {
                              *(cmd_buf_p + idx) = c;
                              putchar(*(cmd_buf_p + idx++));
                          }
                          break;
                      }
                  }
              }
              #endif
 196          void ui_utils_reg_read (uint8_t *cmd_buf_p)
 197          {
 198   1          u32 reg_addr;
 199   1          u8  reg_type;
 200   1      
 201   1          if (sscanf(cmd_buf_p+1, "%c", &reg_type) < 1) {
 202   2              return;         
 203   2          }
 204   1      
 205   1          // U32 reg read
 206   1          if (reg_type == 'w' || reg_type == 'W') {                    
 207   2              if (sscanf(cmd_buf_p+2, "%lx", &reg_addr) < 1) {
 208   3                  return;
 209   3              }
 210   2              printf("    RegRd:  [0x%08lX] --> 0x%08lX\n\n", 
 211   2                     reg_addr, hal_common_reg_32_read(reg_addr));
 212   2        } else if (reg_type == 'b' || reg_type == 'B') {   
 213   2              if (sscanf(cmd_buf_p+2, "%lx", &reg_addr) < 1) {
 214   3                  return;
 215   3              }
 216   2              printf("    RegRd:  [0x%08lX] --> 0x%02bX\n\n", 
 217   2                     reg_addr, ReadU8Reg(reg_addr));
 218   2          } else if (reg_type == 'e' || reg_type == 'E') {
 219   2      #ifdef HYBRII_ETH
 220   2              // Ethernet Registers                                     
 221   2              u8 mac_or_phy;
 222   2              u8 byte_reg_addr;
 223   2      
 224   2              if (sscanf(cmd_buf_p+2, "%c", &mac_or_phy) < 1) {
 225   3                  return;
 226   3              }
 227   2              if (sscanf(cmd_buf_p+3, "%bx", &byte_reg_addr) < 1) {
 228   3                  return;
 229   3              }
 230   2      
 231   2              // Ethernet MAC reg read
 232   2              if (mac_or_phy == 'm' || mac_or_phy == 'M') {
C51 COMPILER V9.52.0.0   UI_UTILS                                                          12/02/2014 14:35:42 PAGE 5   

 233   3                  printf("    RegRd:  [0x%02bX] --> 0x%02bX\n\n", 
 234   3                         byte_reg_addr, 
 235   3                         ReadU8Reg(ETHMAC_REGISTER_BASEADDR+byte_reg_addr));
 236   3              } else if (mac_or_phy == 's' || mac_or_phy == 'S') {
 237   3                  // Ethernet MAC Statistucs reg read       
 238   3      #ifdef HYBRII_ETH            
 239   3                  printf("    RegRd:  [0x%02bX] --> %08lu\n\n", 
 240   3                         byte_reg_addr, rtocl(EHAL_ReadEthStatReg(byte_reg_addr)));
 241   3      #endif
 242   3              } else if (mac_or_phy == 'p' || mac_or_phy == 'P')  {
 243   3                  // Ethernet PHY reg read
 244   3                  u16 reg_data;
 245   3                  if (EHAL_EthPhyRegOp(gEthHalCB.phyChipAddr, 
 246   3                                      byte_reg_addr & 0x1F, &reg_data, RD) == STATUS_SUCCESS) {
 247   4                printf("    RegRd:  [0x%02bX] --> 0x%04X\n\n", byte_reg_addr, rtocs(reg_data));       
 248   4                  } else {
 249   4                      printf (" Eth Phy Reg Read Err\n");
 250   4                  }                
 251   3              }
 252   2      #endif
 253   2          }
 254   1      }
 255          
 256          void ui_utils_reg_write (u8 *cmd_buf_p)
 257          {
 258   1          u32  reg_addr;                 
 259   1        char reg_type;
 260   1      
 261   1          if (sscanf(cmd_buf_p+1, "%c", &reg_type) < 1) {
 262   2              return;    
 263   2          }
 264   1      
 265   1          // U32 reg write
 266   1          if (reg_type == 'w' || reg_type == 'W') {
 267   2              u32 reg_data;
 268   2              if (sscanf(cmd_buf_p+2, "%lx %lx", &reg_addr, &reg_data) < 2) {
 269   3                  return;
 270   3              }
 271   2              hal_common_reg_32_write(reg_addr, reg_data);
 272   2              printf("    RegWr:  [0x%08lX] <-- 0x%08lX\n\n", reg_addr, reg_data);
 273   2          } else if(reg_type == 'b' || reg_type == 'B') {
 274   2              u8 reg_data;
 275   2              if (sscanf(cmd_buf_p+2, "%lx %bx", &reg_addr, &reg_data) < 2) {
 276   3                  return;
 277   3              }
 278   2              WriteU8Reg(reg_addr, reg_data);
 279   2              printf("    RegWr:  [0x%08lX] <-- 0x%02bX\n\n", reg_addr, reg_data);
 280   2          } else if(reg_type == 'e' || reg_type == 'E') {
 281   2      #ifdef HYBRII_ETH
 282   2              // Ethernet reg write
 283   2              u8 mac_or_phy;
 284   2              u8 byte_reg_addr;
 285   2      
 286   2              if (sscanf(cmd_buf_p+2, "%c", &mac_or_phy) < 1) {
 287   3                  return;
 288   3              }
 289   2              if (sscanf(cmd_buf_p+3, "%bx", &byte_reg_addr) < 1) {
 290   3                  return;
 291   3              }
 292   2              // Ethernet MAC reg write
 293   2              if (mac_or_phy == 'm' || mac_or_phy == 'M') {
 294   3                  u8 reg_data;
C51 COMPILER V9.52.0.0   UI_UTILS                                                          12/02/2014 14:35:42 PAGE 6   

 295   3                  if (sscanf(cmd_buf_p+4, "%bx", &reg_data) < 1) {
 296   4                      return;
 297   4                  }
 298   3                  WriteU8Reg(ETHMAC_REGISTER_BASEADDR+byte_reg_addr, reg_data);
 299   3            printf("    RegWr:  [0x%02bX] <-- 0x%02bX\n\n", byte_reg_addr, reg_data);
 300   3              }  else if(mac_or_phy == 'p' || mac_or_phy == 'P') {
 301   3                  // Ethernet PHY reg read
 302   3                  u16 reg_data;
 303   3                  if (sscanf(cmd_buf_p+4, "%x", &reg_data) < 1) {
 304   4                      return;
 305   4                  }
 306   3                  if (EHAL_EthPhyRegOp(gEthHalCB.phyChipAddr, byte_reg_addr&0x1F, &reg_data, WR) == STATUS_SUCCE
             -SS) {
 307   4                printf("    RegWr:  [0x%02bX] <-- 0x%04X\n\n", byte_reg_addr, reg_data);
 308   4                  } else {
 309   4                      printf (" Eth Phy Reg Write Err\n");
 310   4                  }                     
 311   3              }
 312   2      #endif
 313   2          }
 314   1      }
 315          
 316          bool abort (void)
 317          {
 318   1          char c;
 319   1      
 320   1          c = _getchar();
 321   1      
 322   1          if (c != 0) {
 323   2              printf("\nUser aborted test");
 324   2              return (TRUE);
 325   2          }
 326   1          return (FALSE);
 327   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1907    ----
   CONSTANT SIZE    =    462    ----
   XDATA SIZE       =      1      38
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
