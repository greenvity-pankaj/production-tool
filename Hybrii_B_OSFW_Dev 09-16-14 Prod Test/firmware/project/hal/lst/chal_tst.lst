C51 COMPILER V9.52.0.0   CHAL_TST                                                          01/10/2015 21:25:26 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CHAL_TST
OBJECT MODULE PLACED IN .\obj\chal_tst.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\chal_tst.c LARGE OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0X2100) INCDIR(..\..
                    -\common;..\..\project\hal\src;..\..\hpgp\src\mux;..\..\hpgp\src\link;..\..\hpgp\src\ctrl;..\..\hpgp\src\nma;..\..\hal;.\
                    -src;..\..\hpgp\src\hal;..\..\hpgp\src\sap;..\..\hpgp\src\test;..\..\hpgp\src\;..\..\common\datapath;..\..\hpgp\src\route
                    -;..\..\..\components\utilities\datatype\inc;..\..\..\components\utilities\event\inc;..\..\..\components\utilities\linkli
                    -st\inc;..\..\..\components\utilities\timer\inc;..\..\app_support;..\..\..\sampleapp\src;..\..\..\sampleapp\inc;..\..\..\
                    -components\hpgp\inc;..\..\..\components\aps\inc) DEFINE(P8051,HYBRII_8051,HYBRII_HPGP,HYBRII_ASIC,PLC_SW_SYNC=1,inline,H
                    -PGP_HAL_TEST,RTX51_TINY_OS,_TIMER_INTERRUPT_,SNIFFER,Hybrii_B,NEW_SYNC,_TIMER_INTERRUPT_,HYBRII_B,HW_SPI_TX_CRC,HW_SPI_R
                    -X_CRC,_CRC_VERIFY_,HYBRII_SPI,SNIFFER,HYBRII_ETH,B_ASICPLC,FREQ_DETECT,PROD_TEST) DEBUG OBJECTEXTEND PRINT(.\lst\chal_ts
                    -t.lst) TABS(2) OBJECT(.\obj\chal_tst.obj)

line level    source

   1          /*
   2          * $Id: chal_tst.c,v 1.1 2013/12/18 17:06:22 yiming Exp $
   3          *
   4          * $Source: /home/cvsrepo/Hybrii_B_OSFW_Dev/firmware/project/hal/src/chal_tst.c,v $
   5          *
   6          * Description : Common HAL Test routines.
   7          *
   8          * Copyright (c) 2010-2011 Greenvity Communications, Inc.
   9          * All rights reserved.
  10          *
  11          * Purpose :
  12          *     Defines uart driver functions and  main user interface module.
  13          *
  14          *
  15          */
  16          
  17          #include <stdio.h>
  18          #include <string.h>
  19          #include <intrins.h>
  20          #include "fm.h"
  21          #include "hal_common.h"
  22          #include "hal_tst.h"
  23          #ifdef ETH_BRDG_DEBUG
              extern u8 myDebugFlag1;
              #endif
  26          
  27          void CHT_TestMem()
  28          {
  29   1        u32 patternWr;
  30   1        u32 patternWrLE;
  31   1        u8* pPatternWrLE;
  32   1        u16 baseAddr;
  33   1        u16 lengthInBytes;
  34   1        u16  i;
  35   1      
  36   1        pPatternWrLE = (u8*)&patternWrLE;
  37   1          printf("HH_TestMem: Enter Start Address :0x");
  38   1        scanf("%x",&baseAddr);
  39   1        printf("\n");
  40   1          printf("HH_TestMem: Enter length in bytes :0x");
  41   1        scanf("%x",&lengthInBytes);
  42   1        printf("\n");
  43   1        printf("HH_TestMem: Enter pattern :0x");
  44   1        scanf("%lx",&patternWr);
  45   1        printf("\n");
  46   1        patternWrLE = ctorl(patternWr);
  47   1        printf ("Testing 0x%X bytes from 0x%X with pattern 0x%lX\n",lengthInBytes,baseAddr,patternWr);
C51 COMPILER V9.52.0.0   CHAL_TST                                                          01/10/2015 21:25:26 PAGE 2   

  48   1      
  49   1        for( i=0 ; i< (lengthInBytes ) ; i++)
  50   1        {         
  51   2          WriteU8Reg(baseAddr + i, pPatternWrLE[i& (u16)0x3]);
  52   2        }
  53   1        for( i=0 ; i<lengthInBytes ; i++)
  54   1        {
  55   2          u8 byteRead = ReadU8Reg(baseAddr + i);
  56   2      
  57   2          if(byteRead != pPatternWrLE[i& (u16)0x3])
  58   2          {
  59   3            printf("Reg 0x%04X mismatch : read 0x%02bX , wrote 0x%02bX \n", (baseAddr + i),byteRead, pPatternWrLE[i
             -& (u16)0x3]);
  60   3          }
  61   2        } 
  62   1        printf("HH_TestMem exit\n");
  63   1      }
  64          
  65          
  66          void CHT_CpUsageDisplay()
  67          {
  68   1        u8 i;
  69   1        for(i=0 ; i <= HYBRII_CPCOUNT_MAX ; i++)
  70   1        {
  71   2          printf("CP[%bu].usage = %bu\n",i,CHAL_GetCPUsageCnt(i));           
  72   2      
  73   2        }
  74   1      }
  75          
  76          
  77          void CHT_TestCps()
  78          {
  79   1        u8  cp[HYBRII_CPCOUNT_MAX+1] = {0xFF};
  80   1        u8  freeCpCnt;
  81   1        u8  refCP;
  82   1        u8  i,j, offset, bufLen;
  83   1      #ifdef MEM_PROTECTION
                u8 wr_buf[HYBRII_CELLBUF_SIZE];
                u8 rd_buf[HYBRII_CELLBUF_SIZE];
              #endif
  87   1      
  88   1        freeCpCnt = CHAL_GetFreeCPCnt();      
  89   1        printf("Enter a reference CP to monitor usage count : ");
  90   1        scanf("%bd",&refCP);
  91   1        printf("CPFifoCnt B4 setting count to 15 = %bu\n",freeCpCnt);
  92   1      
  93   1      #ifdef MEM_PROTECTION
                // set test buffers for CP read/write
                for (i = 0; i < HYBRII_CELLBUF_SIZE; i++)
                  wr_buf[i] = i;
              #endif
  98   1      
  99   1          // Request CPs, Set Count
 100   1        for (i = 0; i <= HYBRII_CPCOUNT_MAX; i++)
 101   1        {
 102   2          printf("Testing cp[%bu]:\n", i);    
 103   2          printf(".... CP Request\n"); 
 104   2          if(CHAL_RequestCP(&cp[i]) == STATUS_FAILURE)
 105   2            break;
 106   2      
 107   2          printf(".... CP Usage\n"); 
 108   2          CHAL_IncrementCPUsageCnt(cp[i], 15);
C51 COMPILER V9.52.0.0   CHAL_TST                                                          01/10/2015 21:25:26 PAGE 3   

 109   2      
 110   2      #ifdef MEM_PROTECTION
              //    bufLen = HYBRII_CELLBUF_SIZE;
              
                  for (bufLen = 0; bufLen <=  HYBRII_CELLBUF_SIZE; bufLen++)
                  {       
                    memset(&rd_buf[0], 0, sizeof(rd_buf));  // clear read buf for every new test
              
              //      for (offset = 0; offset <  (HYBRII_CELLBUF_SIZE/BYTES_PER_DDWORD); offset++)
                    offset = 0;
                    {
                      // write to CP
                      printf(".... CP Write with offset %bu, bufLen %bu\n", offset, bufLen); 
                      if (HHAL_CP_Write_Arb(cp[i], offset, &wr_buf, bufLen) == STATUS_FAILURE)
                      {
                        printf("CP test: WRITE fails at cp %bu, offset %bu, bufLen=%bu\n", cp[i], offset, bufLen);
                        continue;
                      }
              
                      // read from CP and compare
                      printf(".... CP Read with offset %bu\n", offset); 
                      if (HHAL_CP_Read_Arb(cp[i], offset, &rd_buf, bufLen) == STATUS_FAILURE)
                      {
                        printf("CP test: READ fails at cp %bu, offset %bu, bufLen=%bu\n", cp[i], offset, bufLen);
                      }
                      for (j = 0; j < bufLen; j++)
                      {
              #ifdef ETH_BRDG_DEBUG
                          if (myDebugFlag1)
                        {
                          printf("%bx ", rd_buf[j]);
                          if (j && ((j % 20) == 0))
                            printf("\n");
                        }
              #endif
                        if (rd_buf[j] != wr_buf[j])
                        {
                          printf("\nERROR: rd_buf[%bu]=%bu, wr_buf[%bu]=%bu\n", j, rd_buf[j], j, wr_buf[j] );
                        }
                      }
              #ifdef ETH_BRDG_DEBUG
                        if (myDebugFlag1)
                        printf("\n");
              #endif
              
                    }
                  }
              #endif //MEM_PROTECTION
 157   2        }
 158   1        freeCpCnt = CHAL_GetFreeCPCnt();      
 159   1        printf("CPFifoCnt after setting count to 15 = %bu, CP[%bu].usage = %bu\n\n",freeCpCnt,refCP,CHAL_GetCPUsa
             -geCnt(refCP));           
 160   1        //HHT_CpUsageDisplay();
 161   1        //printf("\n\n");
 162   1      
 163   1        for( j = 15; j>0 ; j--)
 164   1        {
 165   2          i = 0;
 166   2          while (i < HYBRII_CPCOUNT_MAX)
 167   2          {
 168   3            //hal_common_reg_32_write(CPU_WRITECP_REG, cp[i]);
 169   3            //printf("Wrote CP = %03Bd : ", cp[i] );
C51 COMPILER V9.52.0.0   CHAL_TST                                                          01/10/2015 21:25:26 PAGE 4   

 170   3            if(cp[i] ==0xFF)
 171   3              break;
 172   3            //hal_common_reg_32_write(CPU_WRITECP_REG, i);
 173   3            CHAL_DecrementReleaseCPCnt(cp[i]);
 174   3            i++;
 175   3          }
 176   2          freeCpCnt = CHAL_GetFreeCPCnt();      
 177   2        printf("CPFifoCnt after iteration %bu = %bu, CP[%bu].usage = %bu\n",j,freeCpCnt,refCP,CHAL_GetCPUsageCnt(
             -refCP));           
 178   2        }
 179   1      }
*** WARNING C280 IN LINE 82 OF src\chal_tst.c: 'offset': unreferenced local variable
*** WARNING C280 IN LINE 82 OF src\chal_tst.c: 'bufLen': unreferenced local variable
 180          
 181          
 182          void CHT_DumpMem()
 183          {
 184   1          u32 patternRd;
 185   1        u32 baseAddr;
 186   1        u16 lengthInBytes;
 187   1        u16  i;
 188   1      
 189   1          printf("HH_TestMem: Enter Start Address :0x");
 190   1        scanf("%lx",&baseAddr);
 191   1        printf("\n");
 192   1          printf("HH_TestMem: Enter length in bytes :0x");
 193   1        scanf("%x",&lengthInBytes);
 194   1        printf("\n");
 195   1      
 196   1        for( i=0 ; i<lengthInBytes ; i+=4)
 197   1        {
 198   2          patternRd = hal_common_reg_32_read(baseAddr + i);
 199   2      
 200   2          if((i & 0x000f) == 0)
 201   2          {
 202   3            printf("\n");
 203   3            printf("[0x%08lX] : ",baseAddr + i);
 204   3          }
 205   2          printf("0x%08lX ,",patternRd , (i & 0x000f));   
 206   2        } 
 207   1        printf("\n");
 208   1      }
 209          
 210          
 211          void CHT_PktBufBankSelTst()
 212          {
 213   1        u8 i;
 214   1      
 215   1        for ( i=0 ; i<2 ; i++)
 216   1        {
 217   2          hal_common_reg_32_write(0xd64, 0);   
 218   2          hal_common_reg_32_write(0x1000, 0x11223344);
 219   2          hal_common_reg_32_write(0xd64, 1);   
 220   2          hal_common_reg_32_write(0x1000, 0x55667788);     
 221   2          hal_common_reg_32_write(0xd64, 2);               
 222   2          hal_common_reg_32_write(0x1000, 0x99aabbcc);     
 223   2          hal_common_reg_32_write(0xd64, 3);              
 224   2              hal_common_reg_32_write(0x1000, 0xddeeff11);
 225   2                 
 226   2          hal_common_reg_32_write(0xd64, 0);             
 227   2              printf("Bank0 DW 0 = %lx\n", hal_common_reg_32_read(0x1000));
 228   2          
C51 COMPILER V9.52.0.0   CHAL_TST                                                          01/10/2015 21:25:26 PAGE 5   

 229   2          hal_common_reg_32_write(0xd64, 1);            
 230   2              printf("Bank1 DW 0 = %lx\n", hal_common_reg_32_read(0x1000));
 231   2          
 232   2          hal_common_reg_32_write(0xd64, 2);         
 233   2              printf("Bank2 DW 0 = %lx\n", hal_common_reg_32_read(0x1000));
 234   2          
 235   2          hal_common_reg_32_write(0xd64, 3);           
 236   2              printf("Bank3 DW 0 = %lx\n", hal_common_reg_32_read(0x1000));
 237   2        }  
 238   1      }
 239          
 240          
 241          void CHAL_CmdHelp()
 242          {
 243   1          printf("Common HAL Test Commands:\n"
 244   1             "c memTest  - HPGP Regs Write-ReadBack test\n"
 245   1             "c cpTest   - CPs Req/Rel test\n"
 246   1             "c cpUsage  - Display current CP usage\n"
 247   1             "c memDump  - Memory Dump\n"
 248   1                 "c bankTest - Test 4 CP Banks"
 249   1                 "\n");
 250   1        return;
 251   1      }
 252          
 253          
 254          void CHAL_CmdHALProcess(char* CmdBuf)
 255          {
 256   1          u8  cmd[10];
 257   1      
 258   1          CmdBuf++;
 259   1      
 260   1        if (sscanf(CmdBuf, "%s", &cmd) < 1 || strcmp(cmd, "?") == 0)
 261   1        {
 262   2          CHAL_CmdHelp();
 263   2              return;
 264   2        }
 265   1      
 266   1          if (strcmp(cmd, "memTest") == 0 || strcmp(cmd, "memtest") == 0)
 267   1        {
 268   2          CHT_TestMem();
 269   2        }
 270   1        else if (strcmp(cmd, "cpTest") == 0 || strcmp(cmd, "cptest") == 0)
 271   1        {
 272   2          CHT_TestCps();
 273   2        }
 274   1        else if (strcmp(cmd, "cpUsage") == 0 || strcmp(cmd, "cpusage") == 0)
 275   1        {
 276   2          CHT_CpUsageDisplay();
 277   2        }
 278   1        else if (strcmp(cmd, "memDump") == 0 || strcmp(cmd, "memdump") == 0)
 279   1        {
 280   2          CHT_DumpMem();
 281   2        }
 282   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1562    ----
   CONSTANT SIZE    =   1000    ----
   XDATA SIZE       =   ----     177
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.52.0.0   CHAL_TST                                                          01/10/2015 21:25:26 PAGE 6   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
