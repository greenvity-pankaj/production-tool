C51 COMPILER V9.52.0.0   EVENT                                                             12/02/2014 14:35:34 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EVENT
OBJECT MODULE PLACED IN .\obj\event.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\common\event.c LARGE OMF2 OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0X2100
                    -) INCDIR(..\..\..\common\datapath;..\..\..\common\include;..\..\..\hal;..\..\src\crypto;..\..\src\ctrl;..\..\src\hal;..\
                    -..\src\link;..\..\src\mux;..\..\src\nma;..\..\src\route;..\..\src\sap;..\..\src\test;..\..\..\project\hal\src;..\..\..\z
                    -igbee;..\..\..\..\components\aps\inc;..\..\..\..\components\utilities\datatype\inc;..\..\..\..\components\utilities\even
                    -t\inc;..\..\..\..\components\utilities\linklist\inc;..\..\..\..\components\utilities\timer\inc;..\..\..\..\sampleapp\src
                    -;..\..\..\..\sampleapp\inc;..\..\..\common;..\..\..\hpgp;..\..\src;..\..\..\..\components\hpgp\inc;..\..\..\app_support;
                    -..\..\..\HybriiB_configuration_rw\src) NOAREGS DEFINE(inline,P8051,C51,HPGP_HAL,HYBRII_8051,HYBRII_HPGP,CCO_FUNC,STA_FUN
                    -C,HPGP_TEST,HPGP_DEBUG,RTX51_TINY_OS,HYBRII_ASIC,PLC_SW_SYNC,HYBRII_ETH,HPGP_MAC_SAP,NMA,HYBRII_SPI,NEW_SYNC,UM,HYBRII_B
                    -,Hybrii_B,HW_SPI_TX_CRC,HW_SPI_RX_CRC,AUTH_AES,PLC_TEST,B_ASICPLC,UART_HOST_INTF_,UART_RAW,MPER_,FREQ_DETECT,SW_RECOVERY
                    -,PROD_TEST) DEBUG PRINT(.\lst\event.lst) TABS(2) OBJECT(.\obj\event.obj)

line level    source

   1          /** =======================================================
   2           * @file event.c
   3           * 
   4           *  @brief Event Module
   5           *
   6           *  Copyright (C) 2010-2011, Greenvity Communications, Inc.
   7           *  All Rights Reserved
   8           *  
   9           * ========================================================*/
  10          
  11          #include <assert.h>
  12          #include <stdlib.h>
  13          #include <string.h>
  14          #include "./event.h"
  15          #include "fm.h"
  16          #include "dmm.h"
  17          
  18          
  19          
  20          
  21          sDb *DB_Alloc(u16 size, u16 headroom)
  22          {
  23   1           sDb xdata *db = NULL;
  24   1           sDb *dbGen;
  25   1      
  26   1      //    db = ( sDb xdata *)malloc(sizeof(sDb) + size + headroom);
  27   1        db = ( sDb xdata *)DMM_Alloc(FW_POOL_ID, sizeof(sDb) + size + headroom);
  28   1          if(db == NULL)
  29   1          {
  30   2              FM_Printf(FM_ERROR, "DB: Fail to allocate a data buffer.\n");
  31   2              return NULL;
  32   2          }
  33   1          else
  34   1          {
  35   2              memset(db, 0, sizeof(sDb) + size + headroom);
  36   2              db->buffDesc.buff = (u8 *)db + sizeof(sDb);
  37   2              db->buffDesc.dataptr = db->buffDesc.buff + headroom;
  38   2              db->buffDesc.datalen = 0;
  39   2              db->buffDesc.bufflen = size + headroom;
  40   2              SLINK_Init(&db->link);
  41   2              dbGen = db;
  42   2          }
  43   1          return dbGen;
  44   1      }
  45          
  46          
C51 COMPILER V9.52.0.0   EVENT                                                             12/02/2014 14:35:34 PAGE 2   

  47          
  48          void DB_Free(sDb *db)
  49          {
  50   1      //    free(db);
  51   1          DMM_Free((u8 *)db);
  52   1      }
  53          
  54          
  55          
  56          
  57          sEvent * EVENT_BcnAlloc(u16 size, u16 headroom)
  58          {
  59   1          sEvent xdata *event = NULL;
  60   1          sEvent *eventGen;
  61   1      //    event = (sEvent xdata*) malloc(sizeof(sEvent) + size + headroom);
  62   1        event = (sEvent *) DMM_Alloc(BCN_POOL_ID, sizeof(sEvent) + size + headroom);
  63   1          if(event == NULL)
  64   1          {
  65   2              FM_Printf(FM_ERROR, "EVENT: Fail to allocate an event.\n");
  66   2              return NULL;
  67   2          }
  68   1          else
  69   1          {
  70   2              memset(event, 0, sizeof(sEvent) + size + headroom);
  71   2              event->buffDesc.buff = (u8 *)event + sizeof(sEvent);
  72   2              event->buffDesc.dataptr = event->buffDesc.buff + headroom;
  73   2              event->buffDesc.datalen = 0;
  74   2              event->buffDesc.bufflen = size + headroom;
  75   2              event->eventHdr.status = EVENT_STATUS_COMPLETE;
  76   2              SLINK_Init(&event->link);
  77   2              eventGen = event;
  78   2          }
  79   1          return eventGen;
  80   1      }
  81          
  82          
  83          sEvent * EVENT_MgmtAlloc(u16 size, u16 headroom)
  84          {
  85   1          sEvent xdata *event = NULL;
  86   1          sEvent *eventGen;
  87   1      //    event = (sEvent xdata*) malloc(sizeof(sEvent) + size + headroom);
  88   1        event = (sEvent *) DMM_Alloc(MGMT_POOL_ID, sizeof(sEvent) + size + headroom);
  89   1          if(event == NULL)
  90   1          {
  91   2              FM_Printf(FM_ERROR, "EVENT: Fail to allocate an event.\n");
  92   2              return NULL;
  93   2          }
  94   1          else
  95   1          {
  96   2              memset(event, 0, sizeof(sEvent) + size + headroom);
  97   2              event->buffDesc.buff = (u8 *)event + sizeof(sEvent);
  98   2              event->buffDesc.dataptr = event->buffDesc.buff + headroom;
  99   2              event->buffDesc.datalen = 0;
 100   2              event->buffDesc.bufflen = size + headroom;
 101   2              event->eventHdr.status = EVENT_STATUS_COMPLETE;
 102   2              SLINK_Init(&event->link);
 103   2              eventGen = event;
 104   2          }
 105   1          return eventGen;
 106   1      }
 107          
 108          
C51 COMPILER V9.52.0.0   EVENT                                                             12/02/2014 14:35:34 PAGE 3   

 109          
 110          
 111          sEvent * EVENT_Alloc(u16 size, u16 headroom) __REENTRANT__ 
 112          {
 113   1          sEvent xdata *event = NULL;
 114   1          sEvent *eventGen;
 115   1      //    event = (sEvent xdata*) malloc(sizeof(sEvent) + size + headroom);
 116   1        event = (sEvent *) DMM_Alloc(FW_POOL_ID, sizeof(sEvent) + size + headroom);
 117   1          if(event == NULL)
 118   1          {
 119   2              FM_Printf(FM_ERROR, "EVENT: Fail to allocate an event.\n");
 120   2              return NULL;
 121   2          }
 122   1          else
 123   1          {
 124   2              memset(event, 0, sizeof(sEvent) + size + headroom);
 125   2              event->buffDesc.buff = (u8 *)event + sizeof(sEvent);
 126   2              event->buffDesc.dataptr = event->buffDesc.buff + headroom;
 127   2              event->buffDesc.datalen = 0;
 128   2              event->buffDesc.bufflen = size + headroom;
 129   2              event->eventHdr.status = EVENT_STATUS_COMPLETE;
 130   2              SLINK_Init(&event->link);
 131   2              eventGen = event;
 132   2          }
 133   1          return eventGen;
 134   1      }
 135          
 136          
 137          void EVENT_Free(sEvent *event)
 138          {
 139   1      //    free(event);
 140   1          DMM_Free((u8 *)event);
 141   1      }
 142          
 143          
 144          void EVENT_Assert(sEvent *event)
 145          {
 146   1          assert((event->buffDesc.dataptr >= event->buffDesc.buff)&&
 148   1                 ((event->buffDesc.dataptr - event->buffDesc.buff + 
 148   1                   event->buffDesc.datalen) <= event->buffDesc.bufflen));  
 149   1      }
 150          
 151          
 152           
 153          /** =========================================================
 154           *
 155           * Edit History
 156           *
 157           * $Source: /home/cvsrepo/Hybrii_B_OSFW_Dev/firmware/common/event.c,v $
 158           *
 159           * $Log: event.c,v $
 160           * Revision 1.3  2014/06/12 13:15:43  ranjan
 161           * -separated bcn,mgmt,um event pools
 162           * -fixed datapath issue due to previous checkin
 163           * -work in progress. neighbour cco detection
 164           *
 165           * Revision 1.2  2014/05/28 10:58:58  prashant
 166           * SDK folder structure changes, Uart changes, removed htm (UI) task
 167           * Varified - UM, LM - iperf (UDP/TCP), overnight test pass
 168           *
 169           * Revision 1.1  2013/12/18 17:03:14  yiming
 170           * no message
C51 COMPILER V9.52.0.0   EVENT                                                             12/02/2014 14:35:34 PAGE 4   

 171           *
 172           * Revision 1.1  2013/12/17 21:42:26  yiming
 173           * no message
 174           *
 175           * Revision 1.2  2013/01/24 00:13:46  yiming
 176           * Use 01-23-2013 Hybrii-A code as first Hybrii-B code base
 177           *
 178           * Revision 1.7  2012/07/25 04:36:08  yuanhua
 179           * enable the DMM.
 180           *
 181           * Revision 1.6  2012/07/24 04:23:17  yuanhua
 182           * added DMM code for dynamic alloction with static memory to avoid memory fragmentation.
 183           *
 184           * Revision 1.5  2012/07/12 05:44:00  kripa
 185           * Use xdata pointers in Alloc() functions, to fix the 'never returns NULL' issue.
 186           * Committed on the Free edition of March Hare Software CVSNT Client.
 187           * Upgrade to CVS Suite for more features and support:
 188           * http://march-hare.com/cvsnt/
 189           *
 190           * Revision 1.4  2012/05/19 05:05:15  yuanhua
 191           * optimized the timer handlers in CTRL and LINK layers.
 192           *
 193           * Revision 1.3  2012/03/11 17:02:24  yuanhua
 194           * (1) added NEK auth in AKM (2) added NMA (3) modified hpgp layer data structures (4) added Makefile for 
             -linux simulation
 195           *
 196           * Revision 1.2  2011/09/09 07:02:31  yuanhua
 197           * migrate the firmware code from the greenchip to the hybrii.
 198           *
 199           * Revision 1.3  2011/08/09 22:45:44  yuanhua
 200           * changed to event structure, seperating HPGP-related events from the general event defination so that th
             -e general event could be used for other purposes than the HPGP.
 201           *
 202           * Revision 1.2  2011/06/24 14:33:18  yuanhua
 203           * (1) Changed event structure (2) Implemented SNSM, including the state machines in network discovery and
             - connection states, becaon process, discover process, and handover detection (3) Integrated the HPGP and SHAL
 204           *
 205           * Revision 1.1  2011/05/06 18:31:47  kripa
 206           * Adding common utils and isr files for Greenchip firmware.
 207           *
 208           * Revision 1.2  2011/04/23 23:09:10  kripa
 209           * EVENT_Alloc(); changed 'event->data' reference to 'event->eventData'.
 210           *
 211           * Revision 1.1  2011/04/08 21:40:59  yuanhua
 212           * Framework
 213           *
 214           *
 215           * ========================================================*/
 216          
 217          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    952    ----
   CONSTANT SIZE    =    311    ----
   XDATA SIZE       =   ----      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.52.0.0   EVENT                                                             12/02/2014 14:35:34 PAGE 5   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
