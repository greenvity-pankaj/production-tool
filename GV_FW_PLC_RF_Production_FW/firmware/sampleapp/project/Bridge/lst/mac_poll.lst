C51 COMPILER V9.53.0.0   MAC_POLL                                                          11/04/2015 20:09:52 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAC_POLL
OBJECT MODULE PLACED IN .\obj\mac_poll.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\firmware\zigbee\mac_poll.c LARGE OBJECTADVANCED OPTIMIZE(9,S
                    -IZE) BROWSE INTVECTOR(0X2100) INCDIR(..\..\..\..\firmware\common\datapath;..\..\..\..\firmware\common\include;..\..\..\.
                    -.\firmware\hal;..\..\..\..\firmware\hpgp\src\crypto;..\..\..\..\firmware\hpgp\src\ctrl;..\..\..\..\firmware\hpgp\src\hal
                    -;..\..\..\..\firmware\hpgp\src\link;..\..\..\..\firmware\hpgp\src\mux;..\..\..\..\firmware\hpgp\src\nma;..\..\..\..\firm
                    -ware\hpgp\src\route;..\..\..\..\firmware\hpgp\src\test;..\..\..\..\firmware\project\hal\src;..\..\..\..\firmware\zigbee;
                    -..\..\..\..\components\aps\inc;..\..\..\..\components\utilities\datatype\inc;..\..\..\..\components\utilities\event\inc;
                    -..\..\..\..\components\utilities\linklist\inc;..\..\..\..\components\utilities\timer\inc;..\..\..\..\components\hpgp\inc
                    -;..\..\..\..\firmware\common;..\..\..\..\firmware\hpgp;..\..\..\..\firmware\hpgp\src;..\..\..\..\firmware\app_support;..
                    -\..\..\..\firmware\HybriiB_configuration_rw\src;..\..\..\..\components\drivers\gpio\inc;..\..\..\..\components\drivers\h
                    -pgp\inc;..\..\..\..\components\drivers\nwk\inc;..\..\..\..\components\drivers\ieee802154\inc;..\..\..\..\components;..\.
                    -.\..\..\components\osal\inc;..\..\..\..\components\nma\hpgp\inc;..\..\..\..\components\nma\ieee802154\inc;..\..\..\..\co
                    -mponents\nma;..\..\..\..\components\utilities\event\inc;..\..\..\..\components\hpgp\inc;..\..\..\..\components\drivers\f
                    -lash\inc;..\..\..\..\components\ieee802154\inc;..\..\..\..\components\drivers\uart\inc;..\..\..\..\components\utilities;
                    -..\..\..\..\components\drivers\hpgp\inc;..\..\..\..\components\drivers\ieee802154\inc;..\..\..\..\components\drivers\nwk
                    -\inc;..\..\..\..\components\utilities\debug\inc;..\..\..\..\sampleapp\inc;..\..\..\..\sampleapp\src;..\..\inc;..\..\..\.
                    -.\components\drivers\i2c\inc;..\..\..\..\components\drivers\gvspi\inc) NOAREGS DEFINE(inline,P8051,C51,HPGP_HAL,HYBRII_8
                    -051,HYBRII_HPGP,CCO_FUNC,STA_FUNC,HPGP_TEST,HPGP_DEBUG,RTX51_TINY_OS,HYBRII_ASIC,PLC_SW_SYNC,HPGP_MAC_SAP,NMA,NEW_SYNC,U
                    -M,HYBRII_B,Hybrii_B,HW_SPI_TX_CRC,HW_SPI_RX_CRC,B_ASICPLC,HYBRII_ASIC_A2,BB_CAL,_CRC_VERIFY_,BB_GAIN_TABLE,B2,FREQ_DETEC
                    -T,HYBRII_B_AFE,_BC_SECURE_TEST_,FREQ_DETECT,BCN_ERR,NO_HOST,MCCO,KEEP_ALIVE,UART_RAW,UART_HOST_INTF,UART_GPIO_INTERRUPT,
                    -MCCO,SW_RECOVERY,HYBRII_802154,DEBUG_DATAPATH,HPGP_DRIVER_APP,LRWPAN_DRIVER_APP,NWKSTARTUP_APP,ROUTE_APP,RTOPO_APP,REGIS
                    -TER_APP,LLP_APP,BRIDGE,DEVICEINTF_APP,SMARTLIGHT_APP,LED_SMART_LIGHT,ROUTE_RECOVERY) PRINT(.\lst\mac_poll.lst) TABS(2) O
                    -BJECT(.\obj\mac_poll.obj)

line level    source

   1          /**
   2           * @file 
   3           *
   4           * Handle MLME-POLL.request
   5           *
   6           * $Id: mac_poll.c,v 1.6 2014/11/26 13:19:41 ranjan Exp $
   7           *
   8           * Copyright (c) 2012, Greenvity Communication
   9           *
  10           */
  11          #ifdef HYBRII_802154
  12          
  13          /* === Includes ============================================================ */
  14          
  15          #include "papdef.h"
  16          #include "timer.h"
  17          #include "return_val.h"
  18          #include "bmm.h"
  19          #include "qmm.h"
  20          #include "mac_const.h"
  21          #include "mac_msgs.h"
  22          #include "mac_data_structures.h"
  23          #include "mac_hal.h"
  24          #include "mac_internal.h"
  25          #include "mac.h"
  26          #include "mac_security.h"
  27          #include "utils_fw.h"
  28          
  29          
  30          /* === Macros ============================================================== */
  31          
  32          
  33          /* === Globals ============================================================= */ 
  34          
C51 COMPILER V9.53.0.0   MAC_POLL                                                          11/04/2015 20:09:52 PAGE 2   

  35          /* === Prototypes ========================================================== */
  36          
  37          /* === Implementation ====================================================== */
  38          
  39          /*
  40           * Initiate mlme poll confirm message.
  41           *
  42           * buf_ptr - Buffer to send poll confirmation to NHLE.
  43           * status  - MLME Poll request status.
  44           */
  45          static void mac_poll_gen_mlme_poll_conf (buffer_t *buf_ptr, uint8_t status)
  46          {
  47   1          mlme_poll_conf_t *mpc = (mlme_poll_conf_t *)BMM_BUFFER_POINTER(buf_ptr);
  48   1      
  49   1          mpc->cmdcode = MLME_POLL_CONFIRM;
  50   1          mpc->status = status;
  51   1      
  52   1          /*
  53   1           * Only go to sleep if poll is not successful,
  54   1           * otherwise stay awake until subsequent evaluation of data frame
  55   1           */
  56   1          if (MAC_SUCCESS != status) {
  57   2              /* Set radio to sleep if allowed */
  58   2              mac_trx_sleep();
  59   2          }
  60   1      
  61   1      #if (defined UM) && (!defined ZBMAC_DIAG)
  62   1        mlme_send_to_host(buf_ptr);
  63   1      #else
                mlme_poll_conf(buf_ptr);
              #endif    
  66   1      }
  67          
  68          
  69          
  70          /*
  71           * This function handles an MLME-POLL.request primitive.
  72           * The MLME-POLL.request primitive is generated by the next
  73           * higher layer and issued to its MLME when data are to be
  74           * requested from a coordinator.
  75           *
  76           * m_p - Pointer to the message from next higher layer
  77           */
  78          void mlme_poll_request (buffer_t *buf_p)
  79          {
  80   1          /*
  81   1           * Polling for data is only allowed, if the node
  82   1           * 1) is not a PAN coordinator,
  83   1           * 2) is not polling already, and
  84   1           * 3) is not scanning.
  85   1           */
  86   1          if ((MAC_POLL_IDLE         == mac_poll_state) &&
  87   1              (MAC_PAN_COORD_STARTED != mac_state     ) &&
  88   1              (MAC_SCAN_IDLE         == mac_scan_state)) {
  89   2              bool            status;
  90   2              address_field_t coord_addr;
  91   2              uint8_t         data_req_addr_mode;
  92   2              mlme_poll_req_t *poll_req_p = (mlme_poll_req_t *)buf_p;
  93   2      
  94   2              /* Wake up radio first */
  95   2              mac_trx_wakeup();
  96   2      
C51 COMPILER V9.53.0.0   MAC_POLL                                                          11/04/2015 20:09:52 PAGE 3   

  97   2              /*
  98   2               * Extract the Coordinator address information from the Poll request.
  99   2               * This is required later for building the proper destination address
 100   2               * information in the data request frame.
 101   2               */
 102   2      
 103   2              if (poll_req_p->CoordAddrMode == FCF_SHORT_ADDR) {
 104   3                  data_req_addr_mode = FCF_SHORT_ADDR;
 105   3                  ADDR_COPY_DST_SRC_16(coord_addr.short_address, 
 106   3                                       poll_req_p->CoordAddress.short_address);
 107   3              } else {
 108   3                  data_req_addr_mode = FCF_LONG_ADDR;
 109   3                  ADDR_COPY_DST_SRC_64(coord_addr.long_address, 
 110   3                                       poll_req_p->CoordAddress.long_address);
 111   3              }
 112   2      
 113   2              /* Build and transmit data request frame due to explicit poll request */
 114   2              status = mac_data_build_and_tx_data_req(true,
 115   2                                                      false,
 116   2                                                      data_req_addr_mode,
 117   2                                                      &coord_addr,
 118   2                                                      poll_req_p->CoordPANId);
 119   2      
 120   2              if (status) {
 121   3                  /* Store the poll request buffer to give poll confirm */
 122   3                  mac_conf_buf_ptr = (uint8_t *)buf_p;
 123   3              } else {
 124   3                  mac_poll_gen_mlme_poll_conf(buf_p, MAC_CHANNEL_ACCESS_FAILURE);
 125   3              }
 126   2          } else {
 127   2              mac_poll_gen_mlme_poll_conf(buf_p, MAC_CHANNEL_ACCESS_FAILURE);
 128   2          }
 129   1      }
 130          
 131          
 132          
 133          /*
 134           * This function implements the POLL_WAIT_TIMER callback.
 135           * If a poll request is pending, a mlme-poll-confirm is generated.
 136           *
 137           * callback_parameter - Callback parameter
 138           */
 139          void mac_poll_wait_time_cb (void *callback_parameter)
 140          {
 141   1          if (MAC_POLL_EXPLICIT == mac_poll_state) {
 142   2              /*
 143   2               * Data is not received on time for the poll request, hence generate
 144   2               * the poll confirm using the poll request buffer which was stored in
 145   2               * mac_conf_buf_ptr.
 146   2               */
 147   2              mac_poll_gen_mlme_poll_conf((buffer_t *)mac_conf_buf_ptr, MAC_NO_DATA);
 148   2          }
 149   1      
 150   1          mac_poll_state = MAC_POLL_IDLE;
 151   1      
 152   1          /* MAC was busy during poll. */
 153   1          MAC_NOT_BUSY();
 154   1      
 155   1          callback_parameter = callback_parameter;  /* Keep compiler happy. */
 156   1      }
 157          
 158          /*
C51 COMPILER V9.53.0.0   MAC_POLL                                                          11/04/2015 20:09:52 PAGE 4   

 159           * This function processes a data response to an MLME-POLL.request.
 160           * Our coordinator has responded with a data frame. It is checked
 161           * whether any data has been received, and the appropriate
 162           * MLME-POLL.confirm message is constructed.
 163           */
 164          void mac_poll_process_data_response (void)
 165          {
 166   1          uint8_t status;
 167   1      
 168   1          if (FCF_FRAMETYPE_BEACON == mac_parse_data.frame_type) {
 169   2              /*
 170   2               * Node is currently in polling state, so only command or data frames
 171   2               * are of interest.
 172   2               * This is an unexpected frame type, do nothing.
 173   2               * Note. Ack frames are not uploaded to this point.
 174   2               * All subsequent actions are not to be done now.
 175   2               * Instead the timer will expire and initiate the proper stuff.
 176   2               */
 177   2               return;
 178   2          } else {
 179   2              /* Stop the FrameResponseTime timer */
 180   2              STM_StopTimer(poll_wait_timer);
 181   2      
 182   2              /*
 183   2               * For received command frames (Association response or
 184   2               * disassociation notification) and for data frames with zero
 185   2               * payload length the potential status for the poll.confirm message
 186   2               * is supposed to be "No data".
 187   2               */
 188   2              status = MAC_NO_DATA;
 189   2      
 190   2              if ((FCF_FRAMETYPE_DATA == mac_parse_data.frame_type) &&
 191   2                  (mac_parse_data.mac_payload_length > 0)) {
 192   3                  /*
 193   3                   * For received data frames with non-zero payload length
 194   3                   * the potential status for the poll.confirm message is
 195   3                   * supposed to be "Success".
 196   3                   */
 197   3                   status = MAC_SUCCESS;
 198   3              }
 199   2          }
 200   1      
 201   1          if (MAC_POLL_EXPLICIT == mac_poll_state) {
 202   2              /*
 203   2               * Data is received on explicit poll request, hence generate 
 204   2               * the poll confirm using the buffer which was stored in
 205   2               * mac_conf_buf_ptr.
 206   2               */
 207   2              mac_poll_gen_mlme_poll_conf((buffer_t *)mac_conf_buf_ptr, status);
 208   2          }
 209   1      
 210   1          /* MAC was busy during poll. */
 211   1          MAC_NOT_BUSY();
 212   1      
 213   1          mac_poll_state = MAC_POLL_IDLE;
 214   1      }
 215          #endif //HYBRII_802154


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    394    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.53.0.0   MAC_POLL                                                          11/04/2015 20:09:52 PAGE 5   

   XDATA SIZE       =   ----      23
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
