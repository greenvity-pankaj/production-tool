C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SPIFLASH_DRV
OBJECT MODULE PLACED IN .\spiflash_drv.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\spiflash_drv.c OPTIMIZE(8,SIZE) BROWSE INCDIR(..\src;C:\Keil\C51\
                    -INC;..\src) DEFINE(IDATA_OPT,FEATURE_CHIPERASE_) DEBUG OBJECTEXTEND CODE PRINT(.\spiflash_drv.lst) TABS(2) PREPRINT(.\sp
                    -iflash_drv.i) OBJECT(.\spiflash_drv.obj)

line level    source

   1          /*
   2          * Description : 8051 bootloader spiflash driver functions
   3          *
   4          * Copyright (c) 2011-2012 Greenvity Communications, Inc.
   5          * All rights reserved.
   6          *
   7          * Author      : Peter Nguyen
   8          * Release Date: 04/27/2013
   9          * Purpose :
  10          *     spiflash driver functions for the bootloader
  11          *
  12          * File: spiflash_drv.c
  13          */
  14          #include "test.h"
  15          
  16          #include <typedef.h>
  17          #include <stdio.h>
  18          #include <reg51.h>
  19          #include <macro_def.h>
  20          #include "spiflash.h"
  21          
  22          #define SPIFL_TXSTAT    0x0300
  23          #define SPIFL_CFG       0x0304
  24          #define SPIFL_MSBDATABIT_FIRST 0x0305
  25          #define SPIFL_NOBYTE2TX 0x0306
  26          #define SPIFL_TXCTRL    0x0308
  27          #define SPIFL_WRDATA    0x030C
  28          #define SPIFL_RDDATA  0x030C
  29          #define SPIFL_WRDATA0   0x030F  //Command/opcode  - Sent first. 
  30          #define SPIFL_WRDATA1   0x030E  //Address MS byte
  31          #define SPIFL_WRDATA2   0x030D  //Address 2nd byte
  32          #define SPIFL_WRDATA3   0x030C  //Address LS byte  - Compiler is big endian, so if sent more than 2 bytes, 
             -sw has to swap byte orders before write 
  33          #define SPIFL_WRDATA4   0x0307  //Data written to sflash  - Sent last
  34          
  35          #define SPIFL_RD         0x03  //Read 1 byte
  36          #define SPIFL_SECERASE   0x20000000  //Sector erase
  37          #define SPIFL_BLKERASE   0x52000000
  38          #define SPIFL_BLK64ERASE 0xD8000000
  39          #ifdef ONEBYTE_COMMAND_ERASE
              #define SPIFL_CHIPERASE  0x60000000 //Chip erase
              #define SPIFL_CHIPERASE1 0xC7000000
              #else
  43          #define SPIFL_CHIPERASE  0x60     //Chip erase
  44          #define SPIFL_CHIPERASE1 0xC7
  45          #endif
  46          #define SPIFL_BYTEPRGRM  0x02000000 //Program 1 byte
  47          #define SPIFL_BYTEREAD   0x03000000 //Read 1 bytes
  48          #define SPIFL_AAI        0xAF //Auto address increment 
  49          #define SPIFL_RDSR       0x05 //Read status register
  50          #define SPIFL_EWSR_B     0x50 //Enable write status register
  51          #define SPIFL_EWSR       0x50000000 //Enable write status register
  52          #define SPIFL_WRSR_B   0x01 //Write status register
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 2   

  53          #define SPIFL_WRSR       0x00010000 //Write status register
  54          #define SPIFL_WREN_B     0x06 //Enable write data byte - this is mainly enable to latch the address, so any
             - command with the address needs to have this command execute before.
  55          #define SPIFL_WREN       0x06000000 //Enable to write data to spiflash
  56          #define SPIFL_WRDI_B   0x04 //Disable write byte.
  57          #define SPIFL_WRDI       0x04000000 //Write disable
  58          #define SPIFL_RDID       0x90 //Read ID
  59          
  60          u8 spiflash_ReadStatusReg(void);
  61          void spiflash_CheckFlashBusy();
  62          void spiFlash_Cmd(u8, u32, u8, u8);
  63          void spiflash_wren(u8);
  64          void spiflash_eraseConfigMem();
  65          void spiflash_eraseSector(u32);
  66          void spiflash_wrsr_unlock(u8);
  67          void test_spiflash(void);
  68          void spiflash_chiperase(void);
  69          void spiflash_eraseLower256k();
  70          void spiflash_CheckFlashBusy();
  71          u8 spiflash_ReadStatusReg(void);
  72          void spiflash_WriteByte(u32, u8);
  73          u8 spiflash_ReadByte(u32);
  74          u8 spiflash_BackupCodeImage(u8);
  75          
  76          
  77          
  78          //***************************************************************
  79          // void spiFlash_Cmd(u8 NumOfByteCmd, u32 CmdData) is to send a command to the spiflash
  80          // An spiflash command may be from 1 to 4 bytes in length
  81          // Input:
  82          //    NumOfByteCmd: The length of command in number of bytes sent to sflash.
  83          //    CmdData: Command data from 1 byte to 4 bytes
  84          //    SpiWriteData: 5th byte to transmit to spi flash in case 5-byte command
  85          //***************************************************************
  86          void spiFlash_Cmd(u8 const NumOfByteCmd, u32 const CmdData, u8 const SpiWriteData, u8 const RdWr)
  87          {
  88   1        u8 idata c;
  89   1        u32 idata temp;
  90   1        temp = swUtil_SwapEndian(CmdData);
  91   1        *(u32 xdata *)SPIFL_WRDATA = (u32)(temp);
  92   1        *(u8 xdata *)SPIFL_WRDATA4 = (u8)(SpiWriteData);
  93   1        *(u8 xdata *)SPIFL_NOBYTE2TX = NumOfByteCmd;
  94   1        if (RdWr){    
  95   2          *(u8 xdata *)SPIFL_TXCTRL    = 0x5; 
  96   2          c = *(u8 xdata *)SPIFL_TXSTAT;
  97   2          while (c!=0)
  98   2          {
  99   3            c = *(u8 xdata *)SPIFL_TXSTAT;
 100   3          }
 101   2          *(u8 xdata *)SPIFL_TXCTRL    = 0x3; 
 102   2        } else {
 103   2          *(u8 xdata *)SPIFL_TXCTRL    = 0x5; 
 104   2        }
 105   1        c = *(u8 xdata *)SPIFL_TXSTAT;
 106   1        while (c!=0)
 107   1        {
 108   2          c = *(u8 xdata *)SPIFL_TXSTAT;
 109   2        }
 110   1        *(u8 xdata *)SPIFL_TXCTRL  = 0x0; 
 111   1        return;
 112   1      }
 113          //***************************************************************
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 3   

 114          // void spiflash_wren(u8 wren) to enable or disable sflash write enable
 115          // Input:
 116          //    wren = 1: Enable write mode
 117          //    wren = 0: Disable write mode
 118          //    the write enable mode will be disable automatically after every write command
 119          //***************************************************************
 120          
 121          void spiflash_wren(u8 const wren)
 122          {
 123   1        if (wren==1)
 124   1          spiFlash_Cmd(1,SPIFL_WREN_B,0,0);
 125   1        else
 126   1          spiFlash_Cmd(1,SPIFL_WRDI_B,0,0);
 127   1        return;
 128   1      }
 129          //***************************************************************
 130          // void spiflash_wrsr_unlock(u8 unlock) is to unlock or lock the spiflash
 131          // Input
 132          //    unlock = 1: is to unlock the chip
 133          //    unlock = 0: is to lock the chip
 134          //***************************************************************
 135          
 136          void spiflash_wrsr_unlock(u8 const unlock)
 137          { 
 138   1        spiflash_wren(1);
 139   1        if (unlock==1)
 140   1          spiFlash_Cmd(2,(u32)(SFLASH_PROTECT_NONE|(SPIFL_WRSR_B<<8)),0,0);
 141   1        else 
 142   1          spiFlash_Cmd(2,(u32)(SFLASH_PROTECT_ALL|(SPIFL_WRSR_B<<8)),0,0);
 143   1        spiflash_CheckFlashBusy();
 144   1        return;
 145   1      }
 146          #ifdef FEATURE_CHIPERASE
              //***************************************************************
              //spiflash_chiperase(): erase the whole chip
              //***************************************************************
              #ifdef ONEBYTE_COMMAND_ERASE
              void spiflash_chiperase()
              {
                u8 c;
                spiflash_wrsr_unlock(1);
                spiflash_wren(1);
                *(u8 xdata *)SPIFL_NOBYTE2TX = 0x1;  
                *(u32 xdata *)SPIFL_WRDATA   = (u32)SPIFL_CHIPERASE;
                *(u8 xdata *)SPIFL_TXCTRL    = 0x5;
                c = *(u8 xdata *)SPIFL_TXSTAT;
                while (c!=0)
                {
                  c = *(u8 xdata *)SPIFL_TXSTAT;
                }
                *(u8 xdata *)SPIFL_TXCTRL  = 0x0;
              
                spiflash_wrsr_unlock(1);
                spiflash_wren(1);
                *(u8 xdata *)SPIFL_NOBYTE2TX = 0x1;  
                *(u32 xdata *)SPIFL_WRDATA   = (u32)SPIFL_CHIPERASE1;
                *(u8 xdata *)SPIFL_TXCTRL  = 0x5; 
                c = *(u8 xdata *)SPIFL_TXSTAT;
                while (c!=0)
                {
                  c = *(u8 xdata *)SPIFL_TXSTAT;
                }
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 4   

                *(u8 xdata *)SPIFL_TXCTRL  = 0x0;
                return;
              }
              #else
              void spiflash_chiperase()
              {
                spiflash_wrsr_unlock(1);
                spiflash_wren(1);
                spiFlash_Cmd((u8)1,(u32)SPIFL_CHIPERASE, 0,0);
                spiflash_wren(1);
                spiFlash_Cmd((u8)1,(u32)SPIFL_CHIPERASE1, 0,0); 
                return;
              }
              #endif
              #endif
 191          //***************************************************************
 192          //void spiflash_CheckFlashBusy(void)
 193          //Read status register untill bit busy == 0
 194          //***************************************************************
 195          void spiflash_CheckFlashBusy()
 196          {
 197   1        u8 idata c;
 198   1      check_st_reg:
 199   1        *(u8 xdata *)SPIFL_NOBYTE2TX = 1;
 200   1        *(u8 xdata *)SPIFL_WRDATA    = (u8)(SPIFL_RDSR);
 201   1        *(u8 xdata *)SPIFL_TXCTRL  = 0x5;
 202   1      check_Txdone1:
 203   1        c = *(u8 xdata *)SPIFL_TXSTAT;
 204   1        if (c!=0)
 205   1          goto check_Txdone1;
 206   1        *(u8 xdata *)SPIFL_TXCTRL  = 0x3;
 207   1      check_Rxdone:
 208   1        c = *(u8 xdata *)SPIFL_TXSTAT;
 209   1        if (c!=0)
 210   1          goto check_Rxdone;
 211   1        c = (*(u8 xdata *)SPIFL_RDDATA)&0x1;
 212   1      #ifdef  TEST_ON_BOARD
                printf("\nBusy = %x",(u16)(0xFF&c));
              #endif
 215   1        if (c==0x1)
 216   1          goto check_st_reg;
 217   1        *(u8 xdata *)SPIFL_TXCTRL  = 0x0;
 218   1        return;
 219   1      }
 220          #if 0
              //***************************************************************
              //spiflash_32KBlkErase(u8 BlockID): a block of 32Kbytes
              //Input: 
              //  BlockID: The block ID of each 32K (0,1,2,3..)
              //***************************************************************
              void spiflash_32KBlkErase(u32 BlockID)
              {
                spiflash_wrsr_unlock((u8)1);
                spiflash_wren((u8)1);
                spiFlash_Cmd((u8)4,(u32)(SPIFL_BLKERASE | (BlockID<<15)), 0,0);
                spiflash_CheckFlashBusy();
              }
              #endif
 234          //***************************************************************
 235          //spiflash_64KBlkErase(u8 BlockID, u8 block64): a block of 64Kbytes
 236          //Input: 
 237          //  BlockID: The block ID of each 32 or 64K (0,1,2,3..)
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 5   

 238          //   block64: 1 - erase block 64K, 0 - erase block 32K
 239          //***************************************************************
 240          
 241          void spiflash_EraseBlock(u32 BlockID, u8 block64)
 242          {
 243   1        spiflash_wrsr_unlock((u8)1);
 244   1        spiflash_wren((u8)1);
 245   1        if (block64==1)
 246   1          spiFlash_Cmd((u8)4,(u32)(SPIFL_BLK64ERASE | (BlockID<<16)), 0,0);
 247   1        else 
 248   1          spiFlash_Cmd((u8)4,(u32)(SPIFL_BLKERASE | (BlockID<<15)), 0,0);   
 249   1        spiflash_CheckFlashBusy();
 250   1        return;
 251   1      }
 252          
 253          //***************************************************************
 254          //void spiflash_erase256k() erase 0-256K bytes of code area in the spi flash
 255          //***************************************************************
 256          void spiflash_eraseLower256k()
 257          {
 258   1        u8 idata BlckID;
 259   1        printf("\n --> Deleting code image ");
 260   1        for (BlckID=0;BlckID<4;BlckID++){
 261   2          printf(".");
 262   2          spiflash_EraseBlock(BlckID, 1);
 263   2        }
 264   1        for (BlckID=0;BlckID<8;BlckID++){
 265   2          printf(".");
 266   2          spiflash_EraseBlock(BlckID, 0);
 267   2        }
 268   1        for (BlckID=0;BlckID<64;BlckID++){
 269   2          spiflash_eraseSector(BlckID);
 270   2          printf(".");    
 271   2        }
 272   1        return;
 273   1      }
 274          //***************************************************************
 275          //void spiflash_eraseBackup256k() 
 276          //This function is to erase 256k-512K bytes of backup code area in the spi flash
 277          //***************************************************************
 278          void spiflash_eraseBackup256k()
 279          {
 280   1        u8 idata BlckID;
 281   1        printf("\n --> Deleting backup code image ");
 282   1        for (BlckID=4;BlckID<9;BlckID++){
 283   2          printf(".");
 284   2          spiflash_EraseBlock(BlckID, 1);
 285   2        }
 286   1        for (BlckID=8;BlckID<18;BlckID++){
 287   2          printf(".");
 288   2          spiflash_EraseBlock(BlckID, 0);
 289   2        }
 290   1        for (BlckID=64;BlckID<144;BlckID++){
 291   2          spiflash_eraseSector(BlckID);
 292   2          printf(".");    
 293   2        }
 294   1        return;
 295   1      }
 296          #ifdef PROGRAM_CONFIGURATION
              //***************************************************************
              //spiflash_eraseConfigMem() erase 32k bytes of configuration data in the spi flash
              //Configuration data is located at address 0x00100000 - 0x0x001000FF; 
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 6   

              //Sector 256, beyond 1Mbyte
              //***************************************************************
              
              void spiflash_eraseConfigMem()
              {
                printf("\n --> Delete configuration memory ...");
                spiflash_eraseSector(GVTY_CONFIG_DATA_SECTOR);
                spiflash_EraseBlock(32, 0);
                spiflash_EraseBlock(16, 1);
                spiflash_wrsr_unlock((u8)0);
                printf("\n");
                return;
              }
              #endif
 314          
 315          
 316          //***************************************************************
 317          //void spiflash_WriteByte(u32 Addr, u8 IData)
 318          //***************************************************************
 319          
 320          void spiflash_WriteByte(u32 Addr, u8 IData)
 321          {
 322   1        spiflash_wren(1);
 323   1        spiFlash_Cmd(5, (SPIFL_BYTEPRGRM|Addr), IData,0);
 324   1        spiflash_CheckFlashBusy();
 325   1        return;
 326   1      }
 327          
 328          //***************************************************************
 329          //void spiflash_ReadByte(u32 Addr, u8 IData)
 330          //***************************************************************
 331          
 332          u8 spiflash_ReadByte(u32 Addr)
 333          {
 334   1        spiFlash_Cmd((u8)4,(u32)(SPIFL_BYTEREAD|Addr),0,1);
 335   1        return (*(u8 xdata *)SPIFL_RDDATA); 
 336   1      }
 337          //***************************************************************
 338          //void spiflash_eraseSector(u32 Addr)
 339          //To erase sectors of 4kbyte
 340          //***************************************************************
 341          void spiflash_eraseSector(u32 Sector)
 342          {
 343   1        spiflash_wrsr_unlock((u8)1);
 344   1        spiflash_wren((u8)1);
 345   1        spiFlash_Cmd((u8)4,(u32)(SPIFL_SECERASE | (Sector<<12)),0,0);
 346   1        spiflash_CheckFlashBusy();
 347   1        return;
 348   1      }
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION L?0050 (BEGIN)
0000 8F00        R     MOV     ?_spiFlash_Cmd?BYTE+04H,R7
0002 8E00        R     MOV     ?_spiFlash_Cmd?BYTE+03H,R6
0004 8D00        R     MOV     ?_spiFlash_Cmd?BYTE+02H,R5
0006 F500        R     MOV     ?_spiFlash_Cmd?BYTE+01H,A
0008 E4                CLR     A
0009 F500        R     MOV     ?_spiFlash_Cmd?BYTE+05H,A
000B F500        R     MOV     ?_spiFlash_Cmd?BYTE+06H,A
000D 7F04              MOV     R7,#04H
             ; FUNCTION _spiFlash_Cmd (BEGIN)
                                           ; SOURCE LINE # 86
000F 8F00        R     MOV     NumOfByteCmd,R7
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 90
0011 AF00        R     MOV     R7,CmdData+03H
0013 AE00        R     MOV     R6,CmdData+02H
0015 AD00        R     MOV     R5,CmdData+01H
0017 AC00        R     MOV     R4,CmdData
0019 120000      E     LCALL   _swUtil_SwapEndian
001C 7800        R     MOV     R0,#LOW temp
001E 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 91
0021 7800        R     MOV     R0,#LOW temp
0023 120000      E     LCALL   ?C?LLDIDATA
0026 90030C            MOV     DPTR,#030CH
0029 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 92
002C 900307            MOV     DPTR,#0307H
002F E500        R     MOV     A,SpiWriteData
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0032 900306            MOV     DPTR,#0306H
0035 E500        R     MOV     A,NumOfByteCmd
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0038 E500        R     MOV     A,RdWr
003A 6021              JZ      ?C0001
                                           ; SOURCE LINE # 95
003C 900308            MOV     DPTR,#0308H
003F 7405              MOV     A,#05H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0042 900300            MOV     DPTR,#0300H
0045 E0                MOVX    A,@DPTR
0046 7800        R     MOV     R0,#LOW c
0048 F6                MOV     @R0,A
0049         ?C0002:
                                           ; SOURCE LINE # 97
0049 7800        R     MOV     R0,#LOW c
004B E6                MOV     A,@R0
004C 6007              JZ      ?C0003
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
004E 900300            MOV     DPTR,#0300H
0051 E0                MOVX    A,@DPTR
0052 F6                MOV     @R0,A
                                           ; SOURCE LINE # 100
0053 80F4              SJMP    ?C0002
0055         ?C0003:
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 8   

                                           ; SOURCE LINE # 101
0055 900308            MOV     DPTR,#0308H
0058 7403              MOV     A,#03H
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
005B 8006              SJMP    ?C0004
005D         ?C0001:
                                           ; SOURCE LINE # 103
005D 900308            MOV     DPTR,#0308H
0060 7405              MOV     A,#05H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
0063         ?C0004:
                                           ; SOURCE LINE # 105
0063 900300            MOV     DPTR,#0300H
0066 E0                MOVX    A,@DPTR
0067 7800        R     MOV     R0,#LOW c
0069 F6                MOV     @R0,A
006A         ?C0005:
                                           ; SOURCE LINE # 106
006A 7800        R     MOV     R0,#LOW c
006C E6                MOV     A,@R0
006D 6007              JZ      ?C0006
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
006F 900300            MOV     DPTR,#0300H
0072 E0                MOVX    A,@DPTR
0073 F6                MOV     @R0,A
                                           ; SOURCE LINE # 109
0074 80F4              SJMP    ?C0005
0076         ?C0006:
                                           ; SOURCE LINE # 110
0076 900308            MOV     DPTR,#0308H
0079 E4                CLR     A
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
007B         ?C0007:
007B 22                RET     
             ; FUNCTION _spiFlash_Cmd (END)

             ; FUNCTION _spiflash_wren (BEGIN)
                                           ; SOURCE LINE # 121
;---- Variable 'wren' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0000 BF0106            CJNE    R7,#01H,?C0008
                                           ; SOURCE LINE # 124
0003 E4                CLR     A
0004 750006      R     MOV     ?_spiFlash_Cmd?BYTE+04H,#06H
0007 8004              SJMP    ?C0047
0009         ?C0008:
                                           ; SOURCE LINE # 126
0009 E4                CLR     A
000A 750004      R     MOV     ?_spiFlash_Cmd?BYTE+04H,#04H
000D         ?C0047:
000D F500        R     MOV     ?_spiFlash_Cmd?BYTE+03H,A
000F F500        R     MOV     ?_spiFlash_Cmd?BYTE+02H,A
0011 F500        R     MOV     ?_spiFlash_Cmd?BYTE+01H,A
0013 F500        R     MOV     ?_spiFlash_Cmd?BYTE+05H,A
0015 F500        R     MOV     ?_spiFlash_Cmd?BYTE+06H,A
0017 7F01              MOV     R7,#01H
0019 120000      R     LCALL   _spiFlash_Cmd
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 9   

                                           ; SOURCE LINE # 128
001C         ?C0010:
001C 22                RET     
             ; FUNCTION _spiflash_wren (END)

             ; FUNCTION _spiflash_wrsr_unlock (BEGIN)
                                           ; SOURCE LINE # 136
0000 8F00        R     MOV     unlock,R7
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0002 7F01              MOV     R7,#01H
0004 120000      R     LCALL   _spiflash_wren
                                           ; SOURCE LINE # 139
0007 E500        R     MOV     A,unlock
0009 B40105            CJNE    A,#01H,?C0011
                                           ; SOURCE LINE # 140
000C E4                CLR     A
000D F500        R     MOV     ?_spiFlash_Cmd?BYTE+04H,A
000F 8004              SJMP    ?C0048
0011         ?C0011:
                                           ; SOURCE LINE # 142
0011 E4                CLR     A
0012 7500BC      R     MOV     ?_spiFlash_Cmd?BYTE+04H,#0BCH
0015         ?C0048:
0015 750001      R     MOV     ?_spiFlash_Cmd?BYTE+03H,#01H
0018 F500        R     MOV     ?_spiFlash_Cmd?BYTE+02H,A
001A F500        R     MOV     ?_spiFlash_Cmd?BYTE+01H,A
001C F500        R     MOV     ?_spiFlash_Cmd?BYTE+05H,A
001E F500        R     MOV     ?_spiFlash_Cmd?BYTE+06H,A
0020 7F02              MOV     R7,#02H
0022 120000      R     LCALL   _spiFlash_Cmd
0025         ?C0012:
                                           ; SOURCE LINE # 143
0025 120000      R     LCALL   spiflash_CheckFlashBusy
                                           ; SOURCE LINE # 145
0028         ?C0013:
0028 22                RET     
             ; FUNCTION _spiflash_wrsr_unlock (END)

             ; FUNCTION spiflash_CheckFlashBusy (BEGIN)
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 198
0000         check_st_reg:
                                           ; SOURCE LINE # 199
0000 900306            MOV     DPTR,#0306H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0006 90030C            MOV     DPTR,#030CH
0009 7405              MOV     A,#05H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
000C 900308            MOV     DPTR,#0308H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0010         check_Txdone1:
                                           ; SOURCE LINE # 203
0010 900300            MOV     DPTR,#0300H
0013 E0                MOVX    A,@DPTR
0014 7800        R     MOV     R0,#LOW c
0016 F6                MOV     @R0,A
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 10  

                                           ; SOURCE LINE # 204
0017 70F7              JNZ     check_Txdone1
                                           ; SOURCE LINE # 205
0019         ?C0016:
                                           ; SOURCE LINE # 206
0019 900308            MOV     DPTR,#0308H
001C 7403              MOV     A,#03H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
001F         check_Rxdone:
                                           ; SOURCE LINE # 208
001F 900300            MOV     DPTR,#0300H
0022 E0                MOVX    A,@DPTR
0023 7800        R     MOV     R0,#LOW c
0025 F6                MOV     @R0,A
                                           ; SOURCE LINE # 209
0026 70F7              JNZ     check_Rxdone
                                           ; SOURCE LINE # 210
0028         ?C0018:
                                           ; SOURCE LINE # 211
0028 90030C            MOV     DPTR,#030CH
002B E0                MOVX    A,@DPTR
002C 5401              ANL     A,#01H
002E 7800        R     MOV     R0,#LOW c
0030 F6                MOV     @R0,A
                                           ; SOURCE LINE # 215
0031 6401              XRL     A,#01H
0033 60CB              JZ      check_st_reg
                                           ; SOURCE LINE # 216
0035         ?C0019:
                                           ; SOURCE LINE # 217
0035 900308            MOV     DPTR,#0308H
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
003A         ?C0020:
003A 22                RET     
             ; FUNCTION spiflash_CheckFlashBusy (END)

             ; FUNCTION L?0051 (BEGIN)
0000 E6                MOV     A,@R0
0001 FF                MOV     R7,A
0002 E4                CLR     A
0003 FC                MOV     R4,A
0004 FD                MOV     R5,A
0005 FE                MOV     R6,A
0006 750001      R     MOV     ?_spiflash_EraseBlock?BYTE+04H,#01H
             ; FUNCTION _spiflash_EraseBlock (BEGIN)
                                           ; SOURCE LINE # 241
0009 8F00        R     MOV     BlockID+03H,R7
000B 8E00        R     MOV     BlockID+02H,R6
000D 8D00        R     MOV     BlockID+01H,R5
000F 8C00        R     MOV     BlockID,R4
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
0011 7F01              MOV     R7,#01H
0013 120000      R     LCALL   _spiflash_wrsr_unlock
                                           ; SOURCE LINE # 244
0016 7F01              MOV     R7,#01H
0018 120000      R     LCALL   _spiflash_wren
                                           ; SOURCE LINE # 245
001B E500        R     MOV     A,block64
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 11  

001D AF00        R     MOV     R7,BlockID+03H
001F AE00        R     MOV     R6,BlockID+02H
0021 AD00        R     MOV     R5,BlockID+01H
0023 AC00        R     MOV     R4,BlockID
0025 B4010A            CJNE    A,#01H,?C0021
                                           ; SOURCE LINE # 246
0028 7810              MOV     R0,#010H
002A 120000      E     LCALL   ?C?LSHL
002D EC                MOV     A,R4
002E 44D8              ORL     A,#0D8H
0030 8008              SJMP    ?C0049
0032         ?C0021:
                                           ; SOURCE LINE # 248
0032 780F              MOV     R0,#0FH
0034 120000      E     LCALL   ?C?LSHL
0037 EC                MOV     A,R4
0038 4452              ORL     A,#052H
003A         ?C0049:
003A 120000      R     LCALL   L?0050
003D         ?C0022:
                                           ; SOURCE LINE # 249
003D 120000      R     LCALL   spiflash_CheckFlashBusy
                                           ; SOURCE LINE # 251
0040         ?C0023:
0040 22                RET     
             ; FUNCTION _spiflash_EraseBlock (END)

             ; FUNCTION spiflash_eraseLower256k (BEGIN)
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 259
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_0
0004 7900        R     MOV     R1,#LOW ?SC_0
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 260
0009 E4                CLR     A
000A 7800        R     MOV     R0,#LOW BlckID
000C F6                MOV     @R0,A
000D         ?C0024:
                                           ; SOURCE LINE # 261
000D 7BFF              MOV     R3,#0FFH
000F 7A00        R     MOV     R2,#HIGH ?SC_27
0011 7900        R     MOV     R1,#LOW ?SC_27
0013 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 262
0016 7800        R     MOV     R0,#LOW BlckID
0018 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 263
001B 7800        R     MOV     R0,#LOW BlckID
001D 06                INC     @R0
001E E6                MOV     A,@R0
001F C3                CLR     C
0020 9404              SUBB    A,#04H
0022 40E9              JC      ?C0024
0024         ?C0025:
                                           ; SOURCE LINE # 264
0024 E4                CLR     A
0025 7800        R     MOV     R0,#LOW BlckID
0027 F6                MOV     @R0,A
0028         ?C0027:
                                           ; SOURCE LINE # 265
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 12  

0028 7BFF              MOV     R3,#0FFH
002A 7A00        R     MOV     R2,#HIGH ?SC_27
002C 7900        R     MOV     R1,#LOW ?SC_27
002E 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 266
0031 7800        R     MOV     R0,#LOW BlckID
0033 E6                MOV     A,@R0
0034 FF                MOV     R7,A
0035 E4                CLR     A
0036 FC                MOV     R4,A
0037 FD                MOV     R5,A
0038 FE                MOV     R6,A
0039 F500        R     MOV     ?_spiflash_EraseBlock?BYTE+04H,A
003B 120000      R     LCALL   _spiflash_EraseBlock
                                           ; SOURCE LINE # 267
003E 7800        R     MOV     R0,#LOW BlckID
0040 06                INC     @R0
0041 E6                MOV     A,@R0
0042 C3                CLR     C
0043 9408              SUBB    A,#08H
0045 40E1              JC      ?C0027
0047         ?C0028:
                                           ; SOURCE LINE # 268
0047 E4                CLR     A
0048 7800        R     MOV     R0,#LOW BlckID
004A F6                MOV     @R0,A
004B         ?C0030:
004B 7800        R     MOV     R0,#LOW BlckID
004D E6                MOV     A,@R0
004E FF                MOV     R7,A
004F C3                CLR     C
0050 9440              SUBB    A,#040H
0052 5015              JNC     ?C0033
                                           ; SOURCE LINE # 269
0054 E4                CLR     A
0055 FC                MOV     R4,A
0056 FD                MOV     R5,A
0057 FE                MOV     R6,A
0058 120000      R     LCALL   _spiflash_eraseSector
                                           ; SOURCE LINE # 270
005B 7BFF              MOV     R3,#0FFH
005D 7A00        R     MOV     R2,#HIGH ?SC_27
005F 7900        R     MOV     R1,#LOW ?SC_27
0061 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 271
0064 7800        R     MOV     R0,#LOW BlckID
0066 06                INC     @R0
0067 80E2              SJMP    ?C0030
                                           ; SOURCE LINE # 273
0069         ?C0033:
0069 22                RET     
             ; FUNCTION spiflash_eraseLower256k (END)

             ; FUNCTION spiflash_eraseBackup256k (BEGIN)
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 281
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_29
0004 7900        R     MOV     R1,#LOW ?SC_29
0006 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 282
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 13  

0009 7800        R     MOV     R0,#LOW BlckID
000B 7604              MOV     @R0,#04H
000D         ?C0034:
                                           ; SOURCE LINE # 283
000D 7BFF              MOV     R3,#0FFH
000F 7A00        R     MOV     R2,#HIGH ?SC_27
0011 7900        R     MOV     R1,#LOW ?SC_27
0013 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 284
0016 7800        R     MOV     R0,#LOW BlckID
0018 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 285
001B 7800        R     MOV     R0,#LOW BlckID
001D 06                INC     @R0
001E E6                MOV     A,@R0
001F C3                CLR     C
0020 9409              SUBB    A,#09H
0022 40E9              JC      ?C0034
0024         ?C0035:
                                           ; SOURCE LINE # 286
0024 7800        R     MOV     R0,#LOW BlckID
0026 7608              MOV     @R0,#08H
0028         ?C0037:
                                           ; SOURCE LINE # 287
0028 7BFF              MOV     R3,#0FFH
002A 7A00        R     MOV     R2,#HIGH ?SC_27
002C 7900        R     MOV     R1,#LOW ?SC_27
002E 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 288
0031 7800        R     MOV     R0,#LOW BlckID
0033 E6                MOV     A,@R0
0034 FF                MOV     R7,A
0035 E4                CLR     A
0036 FC                MOV     R4,A
0037 FD                MOV     R5,A
0038 FE                MOV     R6,A
0039 F500        R     MOV     ?_spiflash_EraseBlock?BYTE+04H,A
003B 120000      R     LCALL   _spiflash_EraseBlock
                                           ; SOURCE LINE # 289
003E 7800        R     MOV     R0,#LOW BlckID
0040 06                INC     @R0
0041 E6                MOV     A,@R0
0042 C3                CLR     C
0043 9412              SUBB    A,#012H
0045 40E1              JC      ?C0037
0047         ?C0038:
                                           ; SOURCE LINE # 290
0047 7800        R     MOV     R0,#LOW BlckID
0049 7640              MOV     @R0,#040H
004B         ?C0040:
004B 7800        R     MOV     R0,#LOW BlckID
004D E6                MOV     A,@R0
004E FF                MOV     R7,A
004F C3                CLR     C
0050 9490              SUBB    A,#090H
0052 5015              JNC     ?C0043
                                           ; SOURCE LINE # 291
0054 E4                CLR     A
0055 FC                MOV     R4,A
0056 FD                MOV     R5,A
0057 FE                MOV     R6,A
0058 120000      R     LCALL   _spiflash_eraseSector
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 14  

                                           ; SOURCE LINE # 292
005B 7BFF              MOV     R3,#0FFH
005D 7A00        R     MOV     R2,#HIGH ?SC_27
005F 7900        R     MOV     R1,#LOW ?SC_27
0061 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 293
0064 7800        R     MOV     R0,#LOW BlckID
0066 06                INC     @R0
0067 80E2              SJMP    ?C0040
                                           ; SOURCE LINE # 295
0069         ?C0043:
0069 22                RET     
             ; FUNCTION spiflash_eraseBackup256k (END)

             ; FUNCTION _spiflash_WriteByte (BEGIN)
                                           ; SOURCE LINE # 320
0000 8F00        R     MOV     Addr+03H,R7
0002 8E00        R     MOV     Addr+02H,R6
0004 8D00        R     MOV     Addr+01H,R5
0006 8C00        R     MOV     Addr,R4
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0008 7F01              MOV     R7,#01H
000A 120000      R     LCALL   _spiflash_wren
                                           ; SOURCE LINE # 323
000D E500        R     MOV     A,Addr+03H
000F FF                MOV     R7,A
0010 E500        R     MOV     A,Addr+02H
0012 FE                MOV     R6,A
0013 E500        R     MOV     A,Addr+01H
0015 FD                MOV     R5,A
0016 E500        R     MOV     A,Addr
0018 4402              ORL     A,#02H
001A 8F00        R     MOV     ?_spiFlash_Cmd?BYTE+04H,R7
001C 8E00        R     MOV     ?_spiFlash_Cmd?BYTE+03H,R6
001E 8D00        R     MOV     ?_spiFlash_Cmd?BYTE+02H,R5
0020 F500        R     MOV     ?_spiFlash_Cmd?BYTE+01H,A
0022 850000      R     MOV     ?_spiFlash_Cmd?BYTE+05H,IData
0025 E4                CLR     A
0026 F500        R     MOV     ?_spiFlash_Cmd?BYTE+06H,A
0028 7F05              MOV     R7,#05H
002A 120000      R     LCALL   _spiFlash_Cmd
                                           ; SOURCE LINE # 324
002D 120000      R     LCALL   spiflash_CheckFlashBusy
                                           ; SOURCE LINE # 326
0030         ?C0044:
0030 22                RET     
             ; FUNCTION _spiflash_WriteByte (END)

             ; FUNCTION _spiflash_ReadByte (BEGIN)
                                           ; SOURCE LINE # 332
0000 8F00        R     MOV     Addr+03H,R7
0002 8E00        R     MOV     Addr+02H,R6
0004 8D00        R     MOV     Addr+01H,R5
0006 8C00        R     MOV     Addr,R4
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
0008 E500        R     MOV     A,Addr
000A 4403              ORL     A,#03H
000C 8F00        R     MOV     ?_spiFlash_Cmd?BYTE+04H,R7
000E 8E00        R     MOV     ?_spiFlash_Cmd?BYTE+03H,R6
0010 8D00        R     MOV     ?_spiFlash_Cmd?BYTE+02H,R5
C51 COMPILER V9.54   SPIFLASH_DRV                                                          10/07/2016 17:55:49 PAGE 15  

0012 F500        R     MOV     ?_spiFlash_Cmd?BYTE+01H,A
0014 E4                CLR     A
0015 F500        R     MOV     ?_spiFlash_Cmd?BYTE+05H,A
0017 750001      R     MOV     ?_spiFlash_Cmd?BYTE+06H,#01H
001A 7F04              MOV     R7,#04H
001C 120000      R     LCALL   _spiFlash_Cmd
                                           ; SOURCE LINE # 335
001F 90030C            MOV     DPTR,#030CH
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
                                           ; SOURCE LINE # 336
0024         ?C0045:
0024 22                RET     
             ; FUNCTION _spiflash_ReadByte (END)

             ; FUNCTION _spiflash_eraseSector (BEGIN)
                                           ; SOURCE LINE # 341
0000 8F00        R     MOV     Sector+03H,R7
0002 8E00        R     MOV     Sector+02H,R6
0004 8D00        R     MOV     Sector+01H,R5
0006 8C00        R     MOV     Sector,R4
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
0008 7F01              MOV     R7,#01H
000A 120000      R     LCALL   _spiflash_wrsr_unlock
                                           ; SOURCE LINE # 344
000D 7F01              MOV     R7,#01H
000F 120000      R     LCALL   _spiflash_wren
                                           ; SOURCE LINE # 345
0012 AF00        R     MOV     R7,Sector+03H
0014 AE00        R     MOV     R6,Sector+02H
0016 AD00        R     MOV     R5,Sector+01H
0018 AC00        R     MOV     R4,Sector
001A 780C              MOV     R0,#0CH
001C 120000      E     LCALL   ?C?LSHL
001F EC                MOV     A,R4
0020 4420              ORL     A,#020H
0022 120000      R     LCALL   L?0050
                                           ; SOURCE LINE # 346
0025 120000      R     LCALL   spiflash_CheckFlashBusy
                                           ; SOURCE LINE # 348
0028         ?C0046:
0028 22                RET     
             ; FUNCTION _spiflash_eraseSector (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    657    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      26
   IDATA SIZE       =   ----       8
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
