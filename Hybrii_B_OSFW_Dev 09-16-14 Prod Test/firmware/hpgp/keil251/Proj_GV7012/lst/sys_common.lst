C51 COMPILER V9.52.0.0   SYS_COMMON                                                        12/02/2014 14:35:36 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SYS_COMMON
OBJECT MODULE PLACED IN .\obj\sys_common.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\common\sys_common.c LARGE OMF2 OPTIMIZE(9,SIZE) BROWSE INTVECTOR(0
                    -X2100) INCDIR(..\..\..\common\datapath;..\..\..\common\include;..\..\..\hal;..\..\src\crypto;..\..\src\ctrl;..\..\src\ha
                    -l;..\..\src\link;..\..\src\mux;..\..\src\nma;..\..\src\route;..\..\src\sap;..\..\src\test;..\..\..\project\hal\src;..\..
                    -\..\zigbee;..\..\..\..\components\aps\inc;..\..\..\..\components\utilities\datatype\inc;..\..\..\..\components\utilities
                    -\event\inc;..\..\..\..\components\utilities\linklist\inc;..\..\..\..\components\utilities\timer\inc;..\..\..\..\sampleap
                    -p\src;..\..\..\..\sampleapp\inc;..\..\..\common;..\..\..\hpgp;..\..\src;..\..\..\..\components\hpgp\inc;..\..\..\app_sup
                    -port;..\..\..\HybriiB_configuration_rw\src) NOAREGS DEFINE(inline,P8051,C51,HPGP_HAL,HYBRII_8051,HYBRII_HPGP,CCO_FUNC,ST
                    -A_FUNC,HPGP_TEST,HPGP_DEBUG,RTX51_TINY_OS,HYBRII_ASIC,PLC_SW_SYNC,HYBRII_ETH,HPGP_MAC_SAP,NMA,HYBRII_SPI,NEW_SYNC,UM,HYB
                    -RII_B,Hybrii_B,HW_SPI_TX_CRC,HW_SPI_RX_CRC,AUTH_AES,PLC_TEST,B_ASICPLC,UART_HOST_INTF_,UART_RAW,MPER_,FREQ_DETECT,SW_REC
                    -OVERY,PROD_TEST) DEBUG PRINT(.\lst\sys_common.lst) TABS(2) OBJECT(.\obj\sys_common.obj)

line level    source

   1          /** =======================================================
   2           * @file sys_common.c
   3           * 
   4           *  @brief system common file
   5           *
   6           *  Copyright (C) 2013-2014, Greenvity Communications, Inc.
   7           *  All Rights Reserved
   8           *  
   9           * ========================================================*/
  10          
  11          
  12          #include <stdlib.h>
  13          #include <string.h> 
  14          #include <stdio.h>
  15          #include "fm.h"
  16          #include "ism.h"
  17          #include "hal_reg.h"
  18          #include "hal_common.h"
  19          #include "sys_common.h"
  20          
  21          #define VAL(str) #str
  22          #define TOSTRING(str) VAL(str)
  23          #ifdef LOG_FLASH
              u8 log[600];
              u16 *logLen = &log[2];
              u16 *blockId = &log[0];
              u32 logIndx = 4;
              
              
              u32 STM_GetTick();
              #endif
  32          #ifdef Flash_Config
              void System_Config(u8);
              #endif
  35          #ifdef VERSION
              u8 gVersion[20] = TOSTRING (VERSION);
              #else
  38          #if defined(HYBRII_HPGP) && defined(HYBRII_ZIGBEE) && defined(POWER_SAVE)
              u8 gVersion[20] = "ZP-V2.10.2.3\0";
              #elif defined(HYBRII_HPGP) && defined(HYBRII_ZIGBEE)
              u8 gVersion[20] = "ZP-V2.10.1\0";
              #elif defined(HPGP_HAL_TEST) && defined(POWER_SAVE) 
              u8 gVersion[20] = "P-V1.10.2.3\0";
              #elif defined(HPGP_HAL_TEST) && defined(MPER)
              u8 gVersion[20] = "P-V2.9.1.7\0";
              #elif defined(UM)
C51 COMPILER V9.52.0.0   SYS_COMMON                                                        12/02/2014 14:35:36 PAGE 2   

  47          u8 gVersion[20] = "P-V2.10.6\0";
  48          #else
              u8 gVersion[20] = "P-V1.10.1.5\0";
              #endif
  51          #endif
  52          u8 *get_Version()
  53          {
  54   1        return gVersion;
  55   1      }
  56          #ifdef LOG_FLASH
              
              void getTime(sTime *t)
              {
              
                  u32 tick, time;
                  tick = STM_GetTick();
                  time = tick/50;
                  t->hr = time/3600;
                  t->min = (time%3600)/60;
                  t->sec = (time%60); 
                  t->msec = (tick % 100);
              
              }
              
              void tickToTime(sTime *t, u32 tick)
              {
              
                  u32 time;
                  time = tick/50;
                  t->hr = time/3600;
                  t->min = (time%3600)/60;
                  t->sec = (time%60); 
                  t->msec = (tick % 100);
              
              }
              #endif
  83          
  84          #ifdef Flash_Config
              //***************************************************************
              //System_Config ();
              //Load/Set configuration data into the data ram @ 0xE000 or Set configuration data to register
              //Input:
              //         SCommand = 0: Load configuration data to configuration data structure
              //                         = 1: configuration data to register
              //                         = others: reserved. Do nothing 
              //***************************************************************
              void System_Config(u8 SCommand)
              {
                
                if (SCommand == 0)
                  printf("\n --> Reload configuration data\n");
                else
                  printf("\n --> Set configuration data to register");
                
                  if (SCommand == 0)
                  {     
                    Load_Config_Data(1, (u8 *)&sysConfig);      
                  }
                  else
                  {
                      unsigned int k=0;
                    
C51 COMPILER V9.52.0.0   SYS_COMMON                                                        12/02/2014 14:35:36 PAGE 3   

                   for (k=0; k< 8; k++)
                   {
                       printf("%bx ", (u8) sysConfig.SeqNum[k]);
                   }
                   printf("\n");
                   for (k=0; k< 8; k++)
                   {
                       printf("%bx ", (u8) sysConfig.systemName[k]);
                   }
                   printf("\n");
                   for (k=0; k< 6; k++)
                   {
                       printf("%bx ", (u8) sysConfig.macAddress[k]);
                   }
                   printf("\n");
                   printf("default NID ");
                   for (k=0; k< 7; k++)
                   {
                       printf("%bx ", (u8) sysConfig.defaultNID[k]);
                   }
                   printf("\n");
                   //for (k=0; k< 6; k++)
                   {
                       printf("STEI = %bx, DTEI = %bx", (u8) sysConfig.defaultSTEI, (u8) sysConfig.defaultDTEI);
                   }
                   printf("\n");
                   for (k=0; k< 8; k++)
                   {
                       printf("%bx ", (u8) sysConfig.zigbeeAddr[k]);
                   }
                   printf("\n");
                   //for (k=0; k< 8; k++)
                   {
                       printf("SysConfig: default channel = %bx ", (u8) sysConfig.defaultCH);
                   }
                   printf("\n");
                   printf("default LO leak reg 23,24 setting");
                   {
                       printf("Reg23 = %bx, Reg24 = %bx ", (u8) sysConfig.defaultLOLeak23, (u8) sysConfig.defaultLOLeak24)
             -;
                   }
                   printf("\n");
                   printf("Channel VCO calibration value\n");
                   for (k=0; k< 16; k++)
                   {
                       printf("%bx ", (u8) sysConfig.VCOCal[k]);
                   }
                   printf("\n");
                  } 
                
                return;
              }
              #endif
 161          #ifdef LOG_FLASH
              
              void logEvent(u8 id, u8 subId, u16 evntId, void *buff, u8 len)
              {
                  sTime t;
                  sEventLog *event;
                  getTime(&t);
                  event = (sEventLog*)&log[logIndx];
                  event->id = id;
C51 COMPILER V9.52.0.0   SYS_COMMON                                                        12/02/2014 14:35:36 PAGE 4   

                  event->len = len + 8;
                  event->subId = subId;
                  event->eventId = evntId;
                  memcpy((u8*)&event->tm, (u8*)&t, sizeof(sTime));
                  logIndx += sizeof(sEventLog);
                  if(len != 0)
                  {
                      memcpy((u8*)&log[logIndx], (u8*)buff, len);
                      logIndx += len;
                  }
              
                  if(logIndx >= 230)
                  {   
                      if(*blockId >= 3500)
                      {
                    FM_Printf(FM_USER, "Logging stoped: Mem full - Erase Logs\n");
                          return;//*blockId = 0;
                      }
                      // flash logIndx logs
                      LogToFlash( log, *blockId, *logLen);
                      (*blockId)++;
                      
                      logIndx = 4;
                  }
              
                  *logLen = logIndx;
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =      7    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     20    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
