A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\spiflash.OBJ
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE .\spiflash.src PR(.\spiflash.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\spiflash.SRC generated from: ..\src\spiflash.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil_v5\C51\BIN\C51.EXE ..\src\spiflash.c OPTIMIZE(8,SIZE) BROWSE INCDIR(..\src
                             ;C:\Keil\C51\INC;..\src) DEFINE(IDATA_OPT,FEATURE_CHIPERASE_) DEBUG OBJECTEXTEND CODE PRINT
                             (.\spiflash.lst) TABS(2) PREPRINT(.\spiflash.i) SRC(.\spiflash.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    SPIFLASH
                       8     
  0080                 9     P0      DATA    080H
  0090                10     P1      DATA    090H
  00A0                11     P2      DATA    0A0H
  009F                12     BANKSEL DATA    09FH
  00B0                13     P3      DATA    0B0H
  00B4                14     T0      BIT     0B0H.4
  00D6                15     AC      BIT     0D0H.6
  00B5                16     T1      BIT     0B0H.5
  00AF                17     EA      BIT     0A8H.7
  00A8                18     IE      DATA    0A8H
  00B7                19     RD      BIT     0B0H.7
  00F8                20     MEMCTRL DATA    0F8H
  00AC                21     ES      BIT     0A8H.4
  00B8                22     IP      DATA    0B8H
  0098                23     RI      BIT     098H.0
  00B2                24     INT0    BIT     0B0H.2
  00D7                25     CY      BIT     0D0H.7
  0099                26     TI      BIT     098H.1
  00B3                27     INT1    BIT     0B0H.3
  00BC                28     PS      BIT     0B8H.4
  0081                29     SP      DATA    081H
  00D2                30     OV      BIT     0D0H.2
  00B6                31     WR      BIT     0B0H.6
  0099                32     SBUF    DATA    099H
  0087                33     PCON    DATA    087H
  0098                34     SCON    DATA    098H
  0089                35     TMOD    DATA    089H
  0088                36     TCON    DATA    088H
  0089                37     IE0     BIT     088H.1
  008B                38     IE1     BIT     088H.3
  00F0                39     B       DATA    0F0H
  00E0                40     ACC     DATA    0E0H
  00A9                41     ET0     BIT     0A8H.1
  00AB                42     ET1     BIT     0A8H.3
  008D                43     TF0     BIT     088H.5
  008F                44     TF1     BIT     088H.7
  00F4                45     CRLA_H  DATA    0F4H
  009A                46     RB8     BIT     098H.2
  008C                47     TH0     DATA    08CH
  00A8                48     EX0     BIT     0A8H.0
  0088                49     IT0     BIT     088H.0
  008D                50     TH1     DATA    08DH
  009B                51     TB8     BIT     098H.3
  00AA                52     EX1     BIT     0A8H.2
  008A                53     IT1     BIT     088H.2
  00D0                54     P       BIT     0D0H.0
  00F3                55     CRLA_L  DATA    0F3H
  009F                56     SM0     BIT     098H.7
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     2

  008A                57     TL0     DATA    08AH
  009E                58     SM1     BIT     098H.6
  008B                59     TL1     DATA    08BH
  009D                60     SM2     BIT     098H.5
  00F2                61     CRSA_H  DATA    0F2H
  00B9                62     PT0     BIT     0B8H.1
  00BB                63     PT1     BIT     0B8H.3
  00D3                64     RS0     BIT     0D0H.3
  008C                65     TR0     BIT     088H.4
  00D4                66     RS1     BIT     0D0H.4
  00F1                67     CRSA_L  DATA    0F1H
  008E                68     TR1     BIT     088H.6
  00B8                69     PX0     BIT     0B8H.0
  00BA                70     PX1     BIT     0B8H.2
  0083                71     DPH     DATA    083H
  0082                72     DPL     DATA    082H
  009C                73     REN     BIT     098H.4
  00B0                74     RXD     BIT     0B0H.0
  00B1                75     TXD     BIT     0B0H.1
  00D5                76     F0      BIT     0D0H.5
  00D0                77     PSW     DATA    0D0H
                      78     ?PR?_crc_ccitt_update?SPIFLASH           SEGMENT CODE 
                      79     ?PR?load_sflash2cram?SPIFLASH            SEGMENT CODE 
                      80     ?PR?_dump_code?SPIFLASH                  SEGMENT CODE 
                      81     ?PR?dump_BackupCode?SPIFLASH             SEGMENT CODE 
                      82     ?PR?_swUtil_SwapEndian?SPIFLASH          SEGMENT CODE 
                      83     ?DT?_swUtil_SwapEndian?SPIFLASH          SEGMENT DATA OVERLAYABLE 
                      84     ?PR?_memUtil_ClearEram?SPIFLASH          SEGMENT CODE 
                      85     ?PR?_Download_Uart2Sflash?SPIFLASH       SEGMENT CODE 
                      86     ?DT?_Download_Uart2Sflash?SPIFLASH       SEGMENT DATA OVERLAYABLE 
                      87     ?PR?_spiflash_BackupCodeImage?SPIFLASH   SEGMENT CODE 
                      88     ?PR?_spiflash_RestoreCodeImage?SPIFLASH  SEGMENT CODE 
                      89     ?DT?_spiflash_RestoreCodeImage?SPIFLASH  SEGMENT DATA OVERLAYABLE 
                      90     ?CO?SPIFLASH         SEGMENT CODE 
                      91     ?ID?load_sflash2cram?SPIFLASH            SEGMENT IDATA OVERLAYABLE 
                      92     ?ID?_dump_code?SPIFLASH                  SEGMENT IDATA OVERLAYABLE 
                      93     ?ID?dump_BackupCode?SPIFLASH             SEGMENT IDATA OVERLAYABLE 
                      94     ?ID?_Download_Uart2Sflash?SPIFLASH       SEGMENT IDATA OVERLAYABLE 
                      95     ?ID?_spiflash_BackupCodeImage?SPIFLASH   SEGMENT IDATA OVERLAYABLE 
                      96     ?ID?_spiflash_RestoreCodeImage?SPIFLASH  SEGMENT IDATA OVERLAYABLE 
                      97             EXTRN   CODE (_spiflash_wrsr_unlock)
                      98             EXTRN   CODE (_ParseHexRecord)
                      99             EXTRN   CODE (_printf)
                     100             EXTRN   DATA (?_printf?BYTE)
                     101             EXTRN   XDATA (Eram2SflashAddr)
                     102             EXTRN   CODE (spiflash_eraseBackup256k)
                     103             EXTRN   IDATA (ErrCnt)
                     104             EXTRN   CODE (_spiflash_ReadByte)
                     105             EXTRN   XDATA (Uart2EramAddr)
                     106             EXTRN   XDATA (SflashAddr)
                     107             EXTRN   CODE (_spiflash_WriteByte)
                     108             EXTRN   DATA (?_spiflash_WriteByte?BYTE)
                     109             EXTRN   CODE (DisableWrCRam)
                     110             EXTRN   CODE (spiflash_eraseLower256k)
                     111             EXTRN   XDATA (Addr32_1)
                     112             EXTRN   CODE (_get1char)
                     113             EXTRN   CODE (EnableWrCRam)
                     114             EXTRN   CODE (?C?LSTKXDATA)
                     115             EXTRN   CODE (?C?LLDXDATA)
                     116             EXTRN   CODE (?C?LSTXDATA)
                     117             EXTRN   CODE (?C?LSHL)
                     118             EXTRN   CODE (?C?LOR)
                     119             EXTRN   CODE (?C?ULSHR)
                     120             EXTRN   CODE (?C?IILDX)
                     121             EXTRN   CODE (?C?IMUL)
                     122             EXTRN   CODE (?C?LLDXDATA0)
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     3

                     123             EXTRN   CODE (?C?ULCMP)
                     124             EXTRN   CODE (?C?LSTKIDATA)
                     125             EXTRN   CODE (?C?LLDIDATA0)
                     126             EXTRN   CODE (?C?LMUL)
                     127             EXTRN   CODE (?C?LSTIDATA)
                     128             EXTRN   CODE (?C?LLDIDATA)
                     129             EXTRN   CODE (?C?LADD)
                     130             PUBLIC  _spiflash_RestoreCodeImage
                     131             PUBLIC  _spiflash_BackupCodeImage
                     132             PUBLIC  _Download_Uart2Sflash
                     133             PUBLIC  _memUtil_ClearEram
                     134             PUBLIC  _swUtil_SwapEndian
                     135             PUBLIC  dump_BackupCode
                     136             PUBLIC  _dump_code
                     137             PUBLIC  load_sflash2cram
                     138             PUBLIC  _crc_ccitt_update
                     139     
----                 140             RSEG  ?DT?_spiflash_RestoreCodeImage?SPIFLASH
0000                 141     ?_spiflash_RestoreCodeImage?BYTE:
0000                 142        auto_cnf?869:   DS   1
                     143     
----                 144             RSEG  ?DT?_Download_Uart2Sflash?SPIFLASH
0000                 145     ?_Download_Uart2Sflash?BYTE:
0000                 146     auto_backup?660:   DS   1
                     147     
----                 148             RSEG  ?DT?_swUtil_SwapEndian?SPIFLASH
0000                 149     ?_swUtil_SwapEndian?BYTE:
0000                 150           var32?458:   DS   4
                     151     
----                 152             RSEG  ?ID?load_sflash2cram?SPIFLASH
0000                 153           dbyte?142:   DS   1
                     154     
----                 155             RSEG  ?ID?load_sflash2cram?SPIFLASH
0001                 156           banks?143:   DS   1
                     157     
----                 158             RSEG  ?ID?load_sflash2cram?SPIFLASH
0002                 159            addr?144:   DS   2
                     160     
----                 161             RSEG  ?ID?load_sflash2cram?SPIFLASH
0004                 162          datcnt?145:   DS   2
                     163     
----                 164             RSEG  ?ID?load_sflash2cram?SPIFLASH
0006                 165         progcnt?146:   DS   2
                     166     
----                 167             RSEG  ?ID?load_sflash2cram?SPIFLASH
0008                 168        calc_crc?147:   DS   2
                     169     
----                 170             RSEG  ?ID?load_sflash2cram?SPIFLASH
000A                 171      flag_error?148:   DS   1
                     172     
----                 173             RSEG  ?ID?_dump_code?SPIFLASH
0000                 174            addr?250:   DS   2
                     175     
----                 176             RSEG  ?ID?_dump_code?SPIFLASH
0002                 177               i?251:   DS   2
                     178     
----                 179             RSEG  ?ID?_dump_code?SPIFLASH
0004                 180           dbyte?252:   DS   1
                     181     
----                 182             RSEG  ?ID?_dump_code?SPIFLASH
0005                 183           banks?253:   DS   1
                     184     
----                 185             RSEG  ?ID?dump_BackupCode?SPIFLASH
0000                 186            addr?354:   DS   2
                     187     
----                 188             RSEG  ?ID?dump_BackupCode?SPIFLASH
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     4

0002                 189               i?355:   DS   2
                     190     
----                 191             RSEG  ?ID?dump_BackupCode?SPIFLASH
0004                 192           dbyte?356:   DS   1
                     193     
----                 194             RSEG  ?ID?dump_BackupCode?SPIFLASH
0005                 195           banks?357:   DS   1
                     196     
----                 197             RSEG  ?ID?_Download_Uart2Sflash?SPIFLASH
0000                 198               c?661:   DS   1
                     199     
----                 200             RSEG  ?ID?_Download_Uart2Sflash?SPIFLASH
0001                 201       mem_crc16?662:   DS   2
                     202     
----                 203             RSEG  ?ID?_Download_Uart2Sflash?SPIFLASH
0003                 204      addr_count?663:   DS   2
                     205     
----                 206             RSEG  ?ID?_Download_Uart2Sflash?SPIFLASH
0005                 207     max_addr_count?664:   DS   2
                     208     
----                 209             RSEG  ?ID?_Download_Uart2Sflash?SPIFLASH
0007                 210       temp_data?665:   DS   1
                     211     
----                 212             RSEG  ?ID?_Download_Uart2Sflash?SPIFLASH
0008                 213     flash_verify_error?666:   DS   1
                     214     
----                 215             RSEG  ?ID?_spiflash_BackupCodeImage?SPIFLASH
0000                 216            Dat1?768:   DS   1
                     217     
----                 218             RSEG  ?ID?_spiflash_RestoreCodeImage?SPIFLASH
0000                 219            Dat1?870:   DS   1
                     220     
----                 221             RSEG  ?ID?_spiflash_RestoreCodeImage?SPIFLASH
0001                 222        calc_crc?871:   DS   2
                     223     
----                 224             RSEG  ?ID?_spiflash_RestoreCodeImage?SPIFLASH
0003                 225      addr_count?872:   DS   4
                     226     
----                 227             RSEG  ?ID?_spiflash_RestoreCodeImage?SPIFLASH
0007                 228     base_addr_offset?873:   DS   4
                     229     
----                 230             RSEG  ?ID?_spiflash_RestoreCodeImage?SPIFLASH
000B                 231         bank_id?874:   DS   1
                     232     
----                 233             RSEG  ?ID?_spiflash_RestoreCodeImage?SPIFLASH
000C                 234     flash_verify_error?875:   DS   1
                     235     
----                 236             RSEG  ?ID?_spiflash_RestoreCodeImage?SPIFLASH
000D                 237     max_bank_size?876:   DS   4
                     238     
----                 239             RSEG  ?CO?SPIFLASH
0000                 240     ?SC_0:
0000 0A202D2D        241             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'S' ,'y' ,'s' ,'t' 
0004 3E205379                
0008 7374                    
000A 656D2069        242             DB  'e' ,'m' ,' ' ,'i' ,'s' ,' ' ,'b' ,'o' ,'o' ,'t' 
000E 7320626F                
0012 6F74                    
0014 696E6720        243             DB  'i' ,'n' ,'g' ,' ' ,'u' ,'p' ,' ' ,000H
0018 75702000                
                     244     
001C                 245     ?SC_28:
001C 2E00            246             DB  '.' ,000H
                     247     
001E                 248     ?SC_30:
001E 0A435243        249             DB  00AH,'C' ,'R' ,'C' ,' ' ,'R' ,'e' ,'a' ,'d' ,000H
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     5

0022 20526561                
0026 6400                    
                     250     
0028                 251     ?SC_40:
0028 0A202530        252             DB  00AH,' ' ,'%' ,'0' ,'2' ,'b' ,'x' ,000H
002C 32627800                
                     253     
0030                 254     ?SC_48:
0030 0A636F6D        255             DB  00AH,'c' ,'o' ,'m' ,'m' ,'o' ,'n' ,' ' ,'c' ,'r' 
0034 6D6F6E20                
0038 6372                    
003A 63206D61        256             DB  'c' ,' ' ,'m' ,'a' ,'t' ,'c' ,'h' ,' ' ,'%' ,'0' 
003E 74636820                
0042 2530                    
0044 34780A00        257             DB  '4' ,'x' ,00AH,000H
                     258     
0048                 259     ?SC_72:
0048 0A636F6D        260             DB  00AH,'c' ,'o' ,'m' ,'m' ,'o' ,'n' ,' ' ,'c' ,'r' 
004C 6D6F6E20                
0050 6372                    
0052 63206661        261             DB  'c' ,' ' ,'f' ,'a' ,'i' ,'l' ,' ' ,'%' ,'0' ,'4' 
0056 696C2025                
005A 3034                    
005C 782C6C6F        262             DB  'x' ,',' ,'l' ,'o' ,' ' ,'%' ,'0' ,'2' ,'b' ,'x' 
0060 20253032                
0064 6278                    
0066 2C686920        263             DB  ',' ,'h' ,'i' ,' ' ,'%' ,'0' ,'2' ,'b' ,'x' ,00AH
006A 25303262                
006E 780A                    
0070 00              264             DB  000H
                     265     
0071                 266     ?SC_113:
0071 42616E6B        267             DB  'B' ,'a' ,'n' ,'k' ,' ' ,'%' ,'b' ,'u' ,' ' ,'c' 
0075 20256275                
0079 2063                    
007B 7263206D        268             DB  'r' ,'c' ,' ' ,'m' ,'a' ,'t' ,'c' ,'h' ,' ' ,'%' 
007F 61746368                
0083 2025                    
0085 3034780A        269             DB  '0' ,'4' ,'x' ,00AH,000H
0089 00                      
                     270     
008A                 271     ?SC_138:
008A 0A42616E        272             DB  00AH,'B' ,'a' ,'n' ,'k' ,' ' ,'%' ,'b' ,'u' ,' ' 
008E 6B202562                
0092 7520                    
0094 63726320        273             DB  'c' ,'r' ,'c' ,' ' ,'f' ,'a' ,'i' ,'l' ,' ' ,'%' 
0098 6661696C                
009C 2025                    
009E 3034782C        274             DB  '0' ,'4' ,'x' ,',' ,'l' ,'o' ,' ' ,'%' ,'0' ,'2' 
00A2 6C6F2025                
00A6 3032                    
00A8 62782C68        275             DB  'b' ,'x' ,',' ,'h' ,'i' ,' ' ,'%' ,'0' ,'2' ,'b' 
00AC 69202530                
00B0 3262                    
00B2 780A00          276             DB  'x' ,00AH,000H
                     277     
00B5                 278     ?SC_181:
00B5 0A202D2D        279             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'R' ,'u' ,'n' ,'n' 
00B9 3E205275                
00BD 6E6E                    
00BF 696E6720        280             DB  'i' ,'n' ,'g' ,' ' ,'f' ,'i' ,'r' ,'m' ,'w' ,'a' 
00C3 6669726D                
00C7 7761                    
00C9 72650A0A        281             DB  'r' ,'e' ,00AH,00AH,000H
00CD 00                      
                     282     
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     6

00CE                 283     ?SC_206:
00CE 0A202D2D        284             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'D' ,'u' ,'m' ,'p' 
00D2 3E204475                
00D6 6D70                    
00D8 2073666C        285             DB  ' ' ,'s' ,'f' ,'l' ,'a' ,'s' ,'h' ,000H
00DC 61736800                
                     286     
00E0                 287     ?SC_224:
00E0 0A307825        288             DB  00AH,'0' ,'x' ,'%' ,'0' ,'4' ,'X' ,':' ,000H
00E4 3034583A                
00E8 00                      
                     289     
00E9                 290     ?SC_233:
00E9 20253032        291             DB  ' ' ,'%' ,'0' ,'2' ,'X' ,000H
00ED 5800                    
                     292     
00EF                 293     ?SC_239:
00EF 0A0A202D        294             DB  00AH,00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'B' ,'a' ,'n' 
00F3 2D3E2042                
00F7 616E                    
00F9 6B202530        295             DB  'k' ,' ' ,'%' ,'0' ,'2' ,'X' ,00AH,000H
00FD 32580A00                
                     296     
0101                 297     ?SC_257:
0101 0A202D2D        298             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'D' ,'u' ,'m' ,'p' 
0105 3E204475                
0109 6D70                    
010B 20626163        299             DB  ' ' ,'b' ,'a' ,'c' ,'k' ,'u' ,'p' ,' ' ,'c' ,'o' 
010F 6B757020                
0113 636F                    
0115 646500          300             DB  'd' ,'e' ,000H
                     301     
0118                 302     ?SC_280:
0118 0A202D2D        303             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'P' ,'r' ,'o' ,'g' 
011C 3E205072                
0120 6F67                    
0122 72616D20        304             DB  'r' ,'a' ,'m' ,' ' ,'S' ,'F' ,'L' ,'A' ,'S' ,'H' 
0126 53464C41                
012A 5348                    
012C 20592F4E        305             DB  ' ' ,'Y' ,'/' ,'N' ,'?' ,' ' ,':' ,000H
0130 3F203A00                
                     306     
0134                 307     ?SC_308:
0134 0A202D2D        308             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'D' ,'e' ,'l' ,'e' 
0138 3E204465                
013C 6C65                    
013E 74652063        309             DB  't' ,'e' ,' ' ,'c' ,'u' ,'r' ,'r' ,'e' ,'n' ,'t' 
0142 75727265                
0146 6E74                    
0148 20636F64        310             DB  ' ' ,'c' ,'o' ,'d' ,'e' ,' ' ,'Y' ,'/' ,'N' ,'?' 
014C 6520592F                
0150 4E3F                    
0152 203A00          311             DB  ' ' ,':' ,000H
                     312     
0155                 313     ?SC_341:
0155 0A0A2023        314             DB  00AH,00AH,' ' ,'#' ,'#' ,'#' ,'#' ,'#' ,' ' ,'D' 
0159 23232323                
015D 2044                    
015F 6F776E6C        315             DB  'o' ,'w' ,'n' ,'l' ,'o' ,'a' ,'d' ,' ' ,'c' ,'o' 
0163 6F616420                
0167 636F                    
0169 64652066        316             DB  'd' ,'e' ,' ' ,'f' ,'o' ,'r' ,' ' ,'-' ,' ' ,'B' 
016D 6F72202D                
0171 2042                    
0173 414E4B2D        317             DB  'A' ,'N' ,'K' ,'-' ,'%' ,'0' ,'2' ,'X' ,' ' ,'#' 
0177 25303258                
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     7

017B 2023                    
017D 23232323        318             DB  '#' ,'#' ,'#' ,'#' ,00AH,000H
0181 0A00                    
                     319     
0183                 320     ?SC_387:
0183 0A202D2D        321             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'W' ,'r' ,'i' ,'t' 
0187 3E205772                
018B 6974                    
018D 696E6720        322             DB  'i' ,'n' ,'g' ,' ' ,'t' ,'o' ,' ' ,'s' ,'f' ,'l' 
0191 746F2073                
0195 666C                    
0197 61736820        323             DB  'a' ,'s' ,'h' ,' ' ,000H
019B 00                      
                     324     
019C                 325     ?SC_412:
019C 0A0A202A        326             DB  00AH,00AH,' ' ,'*' ,'*' ,'*' ,' ' ,'S' ,'F' ,'L' 
01A0 2A2A2053                
01A4 464C                    
01A6 41534820        327             DB  'A' ,'S' ,'H' ,' ' ,'p' ,'r' ,'o' ,'g' ,'r' ,'a' 
01AA 70726F67                
01AE 7261                    
01B0 6D6D696E        328             DB  'm' ,'m' ,'i' ,'n' ,'g' ,' ' ,'e' ,'r' ,'r' ,'o' 
01B4 67206572                
01B8 726F                    
01BA 72204020        329             DB  'r' ,' ' ,'@' ,' ' ,'0' ,'x' ,'%' ,'0' ,'8' ,'l' 
01BE 30782530                
01C2 386C                    
01C4 58202D20        330             DB  'X' ,' ' ,'-' ,' ' ,'t' ,'r' ,'y' ,' ' ,'a' ,'g' 
01C8 74727920                
01CC 6167                    
01CE 61696E0A        331             DB  'a' ,'i' ,'n' ,00AH,00AH,000H
01D2 0A00                    
                     332     
01D4                 333     ?SC_468:
01D4 0A202A2A        334             DB  00AH,' ' ,'*' ,'*' ,'*' ,' ' ,'E' ,'R' ,'R' ,'O' 
01D8 2A204552                
01DC 524F                    
01DE 5220646F        335             DB  'R' ,' ' ,'d' ,'o' ,'w' ,'n' ,'l' ,'o' ,'a' ,'d' 
01E2 776E6C6F                
01E6 6164                    
01E8 696E6720        336             DB  'i' ,'n' ,'g' ,' ' ,'f' ,'r' ,'o' ,'m' ,' ' ,'U' 
01EC 66726F6D                
01F0 2055                    
01F2 41525420        337             DB  'A' ,'R' ,'T' ,' ' ,'t' ,'o' ,' ' ,'R' ,'A' ,'M' 
01F6 746F2052                
01FA 414D                    
01FC 00              338             DB  000H
                     339     
01FD                 340     ?SC_509:
01FD 0A435243        341             DB  00AH,'C' ,'R' ,'C' ,' ' ,'B' ,'a' ,'n' ,'k' ,' ' 
0201 2042616E                
0205 6B20                    
0207 25627520        342             DB  '%' ,'b' ,'u' ,' ' ,'=' ,' ' ,'%' ,'x' ,000H
020B 3D202578                
020F 00                      
                     343     
0210                 344     ?SC_528:
0210 0A202A2A        345             DB  00AH,' ' ,'*' ,'*' ,'*' ,' ' ,'P' ,'r' ,'o' ,'g' 
0214 2A205072                
0218 6F67                    
021A 72616D6D        346             DB  'r' ,'a' ,'m' ,'m' ,'i' ,'n' ,'g' ,' ' ,'s' ,'f' 
021E 696E6720                
0222 7366                    
0224 6C617368        347             DB  'l' ,'a' ,'s' ,'h' ,' ' ,'d' ,'o' ,'n' ,'e' ,'!' 
0228 20646F6E                
022C 6521                    
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     8

022E 0A00            348             DB  00AH,000H
                     349     
0230                 350     ?SC_560:
0230 0A202D2D        351             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'B' ,'a' ,'c' ,'k' 
0234 3E204261                
0238 636B                    
023A 75702063        352             DB  'u' ,'p' ,' ' ,'c' ,'o' ,'d' ,'e' ,' ' ,'i' ,'m' 
023E 6F646520                
0242 696D                    
0244 61676520        353             DB  'a' ,'g' ,'e' ,' ' ,'Y' ,'/' ,'N' ,'?' ,':' ,000H
0248 592F4E3F                
024C 3A00                    
                     354     
024E                 355     ?SC_590:
024E 0A202D2D        356             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'D' ,'e' ,'l' ,'e' 
0252 3E204465                
0256 6C65                    
0258 7465206F        357             DB  't' ,'e' ,' ' ,'o' ,'l' ,'d' ,' ' ,'b' ,'a' ,'c' 
025C 6C642062                
0260 6163                    
0262 6B757020        358             DB  'k' ,'u' ,'p' ,' ' ,'i' ,'m' ,'a' ,'g' ,'e' ,' ' 
0266 696D6167                
026A 6520                    
026C 592F4E3F        359             DB  'Y' ,'/' ,'N' ,'?' ,':' ,000H
0270 3A00                    
                     360     
0272                 361     ?SC_626:
0272 0A0A202D        362             DB  00AH,00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'B' ,'a' ,'c' 
0276 2D3E2042                
027A 6163                    
027C 6B696E67        363             DB  'k' ,'i' ,'n' ,'g' ,' ' ,'u' ,'p' ,' ' ,'c' ,'o' 
0280 20757020                
0284 636F                    
0286 64652069        364             DB  'd' ,'e' ,' ' ,'i' ,'m' ,'a' ,'g' ,'e' ,' ' ,000H
028A 6D616765                
028E 2000                    
                     365     
0290                 366     ?SC_656:
0290 0A202A2A        367             DB  00AH,' ' ,'*' ,'*' ,'*' ,' ' ,'C' ,'o' ,'d' ,'e' 
0294 2A20436F                
0298 6465                    
029A 20726573        368             DB  ' ' ,'r' ,'e' ,'s' ,'t' ,'o' ,'r' ,'i' ,'n' ,'g' 
029E 746F7269                
02A2 6E67                    
02A4 20657272        369             DB  ' ' ,'e' ,'r' ,'r' ,'o' ,'r' ,' ' ,'@' ,' ' ,'0' 
02A8 6F722040                
02AC 2030                    
02AE 78253038        370             DB  'x' ,'%' ,'0' ,'8' ,'l' ,'X' ,00AH,00AH,000H
02B2 6C580A0A                
02B6 00                      
                     371     
02B7                 372     ?SC_695:
02B7 0A202D2D        373             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'B' ,'a' ,'c' ,'k' 
02BB 3E204261                
02BF 636B                    
02C1 75702063        374             DB  'u' ,'p' ,' ' ,'c' ,'o' ,'d' ,'e' ,' ' ,'d' ,'o' 
02C5 6F646520                
02C9 646F                    
02CB 6E652100        375             DB  'n' ,'e' ,'!' ,000H
                     376     
02CF                 377     ?SC_719:
02CF 0A204368        378             DB  00AH,' ' ,'C' ,'h' ,'e' ,'c' ,'k' ,'i' ,'n' ,'g' 
02D3 65636B69                
02D7 6E67                    
02D9 20696E74        379             DB  ' ' ,'i' ,'n' ,'t' ,'e' ,'g' ,'r' ,'i' ,'t' ,'y' 
02DD 65677269                
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE     9

02E1 7479                    
02E3 206F6620        380             DB  ' ' ,'o' ,'f' ,' ' ,'B' ,'a' ,'c' ,'k' ,'u' ,'p' 
02E7 4261636B                
02EB 7570                    
02ED 202E2E2E        381             DB  ' ' ,'.' ,'.' ,'.' ,000H
02F1 00                      
                     382     
02F2                 383     ?SC_754:
02F2 0A42616E        384             DB  00AH,'B' ,'a' ,'n' ,'k' ,' ' ,'I' ,'D' ,' ' ,'%' 
02F6 6B204944                
02FA 2025                    
02FC 62752C43        385             DB  'b' ,'u' ,',' ,'C' ,'R' ,'C' ,' ' ,'%' ,'0' ,'4' 
0300 52432025                
0304 3034                    
0306 5800            386             DB  'X' ,000H
                     387     
0308                 388     ?SC_776:
0308 0A202D2D        389             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'R' ,'e' ,'c' ,'o' 
030C 3E205265                
0310 636F                    
0312 76657220        390             DB  'v' ,'e' ,'r' ,' ' ,'c' ,'o' ,'d' ,'e' ,' ' ,'i' 
0316 636F6465                
031A 2069                    
031C 6D616765        391             DB  'm' ,'a' ,'g' ,'e' ,' ' ,'Y' ,'/' ,'N' ,'?' ,':' 
0320 20592F4E                
0324 3F3A                    
0326 00              392             DB  000H
                     393     
0327                 394     ?SC_807:
0327 0A202D2D        395             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'D' ,'e' ,'l' ,'e' 
032B 3E204465                
032F 6C65                    
0331 74652063        396             DB  't' ,'e' ,' ' ,'c' ,'o' ,'d' ,'e' ,' ' ,'i' ,'m' 
0335 6F646520                
0339 696D                    
033B 61676520        397             DB  'a' ,'g' ,'e' ,' ' ,'Y' ,'/' ,'N' ,'?' ,':' ,000H
033F 592F4E3F                
0343 3A00                    
                     398     
0345                 399     ?SC_837:
0345 0A202D2D        400             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'R' ,'e' ,'s' ,'t' 
0349 3E205265                
034D 7374                    
034F 6F72696E        401             DB  'o' ,'r' ,'i' ,'n' ,'g' ,' ' ,'c' ,'o' ,'d' ,'e' 
0353 6720636F                
0357 6465                    
0359 20696D61        402             DB  ' ' ,'i' ,'m' ,'a' ,'g' ,'e' ,' ' ,000H
035D 67652000                
                     403     
0361                 404     ?SC_865:
0361 0A202D2D        405             DB  00AH,' ' ,'-' ,'-' ,'>' ,' ' ,'R' ,'e' ,'s' ,'t' 
0365 3E205265                
0369 7374                    
036B 6F72696E        406             DB  'o' ,'r' ,'i' ,'n' ,'g' ,' ' ,'c' ,'o' ,'d' ,'e' 
036F 6720636F                
0373 6465                    
0375 20696D61        407             DB  ' ' ,'i' ,'m' ,'a' ,'g' ,'e' ,' ' ,'d' ,'o' ,'n' 
0379 67652064                
037D 6F6E                    
037F 652100          408             DB  'e' ,'!' ,000H
                     409     
0382                 410     ?SC_898:
0382 0A426163        411             DB  00AH,'B' ,'a' ,'c' ,'k' ,'u' ,'p' ,' ' ,'i' ,'n' 
0386 6B757020                
038A 696E                    
038C 74656772        412             DB  't' ,'e' ,'g' ,'r' ,'i' ,'t' ,'y' ,' ' ,'f' ,'a' 
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    10

0390 69747920                
0394 6661                    
0396 696C6564        413             DB  'i' ,'l' ,'e' ,'d' ,'.' ,00AH,' ' ,'C' ,'P' ,'U' 
039A 2E0A2043                
039E 5055                    
03A0 20526573        414             DB  ' ' ,'R' ,'e' ,'s' ,'e' ,'t' ,000H
03A4 657400                  
                     415     
                     416     ; /*
                     417     ; * Description : 8051 bootloader spiflash utility
                     418     ; *
                     419     ; * Copyright (c) 2011-2012 Greenvity Communications, Inc.
                     420     ; * All rights reserved.
                     421     ; *
                     422     ; * Author      : Peter Nguyen
                     423     ; * Release Date: 04/27/2013
                     424     ; * Purpose :
                     425     ; *     spiflash utility functions for bootloader
                     426     ; *
                     427     ; * File: spiflash_drv.c
                     428     ; */
                     429     ; #include <stdio.h>
                     430     ; #include <stdlib.h>
                     431     ; #include <ctype.h>
                     432     ; #include <REG51.h>
                     433     ; #include "typedef.h"
                     434     ; #include "macro_def.h"
                     435     ; #include "cmem_ctrl.h"
                     436     ; #include "hex_file_hdl.h"
                     437     ; #include "Spiflash_drv.h"
                     438     ; #include "spiflash.h"
                     439     ; #include "uart.h"
                     440     ; #include "global_var.h"
                     441     ; 
                     442     ; #define lo8(value16) (value16 & 0xFF)
                     443     ; #define hi8(value16) ((value16 >> 8) & 0xFF)
                     444     ; #if 0
                     445     ; u8 lo8(u16 idata value16) 
                     446     ; {
                     447     ;       u8 idata dbyte; 
                     448     ;       dbyte = value16 & 0xFF;
                     449     ;       return dbyte;
                     450     ; }
                     451     ; 
                     452     ; u8 hi8(u16 idata value16)
                     453     ; {
                     454     ;       u8 idata dbyte;
                     455     ;       dbyte = (value16 >> 8);
                     456     ;       dbyte &= 0xFF;
                     457     ;       return dbyte;
                     458     ; 
                     459     ; }
                     460     ; #endif
                     461     ; u16 crc_ccitt_update (u16 idata crc, u8 data_byte)
                     462     
----                 463             RSEG  ?PR?_crc_ccitt_update?SPIFLASH
0000                 464     _crc_ccitt_update:
                     465             USING   0
                     466                             ; SOURCE LINE # 46
                     467     ;---- Variable 'data_byte?041' assigned to Register 'R5' ----
                     468     ;---- Variable 'crc?040' assigned to Register 'R2/R3' ----
0000 AA06            469             MOV     R2,AR6
                     470     ; {
                     471                             ; SOURCE LINE # 47
                     472     ;     data_byte ^= lo8(crc);
                     473                             ; SOURCE LINE # 48
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    11

0002 EF              474             MOV     A,R7
0003 6205            475             XRL     AR5,A
                     476     ;     data_byte ^= data_byte << 4;
                     477                             ; SOURCE LINE # 49
0005 ED              478             MOV     A,R5
0006 C4              479             SWAP    A
0007 54F0            480             ANL     A,#0F0H
0009 6205            481             XRL     AR5,A
                     482     ; 
                     483     ;    return ((((u16)data_byte << 8) | hi8(crc)) ^
                     484     ;              (u8)(data_byte >> 4) ^ ((u16)data_byte << 3));
                     485                             ; SOURCE LINE # 52
000B ED              486             MOV     A,R5
000C F583            487             MOV     DPH,A
000E EA              488             MOV     A,R2
000F FF              489             MOV     R7,A
0010 E583            490             MOV     A,DPH
0012 FE              491             MOV     R6,A
0013 ED              492             MOV     A,R5
0014 C4              493             SWAP    A
0015 540F            494             ANL     A,#0FH
0017 FB              495             MOV     R3,A
0018 EE              496             MOV     A,R6
0019 FA              497             MOV     R2,A
001A EF              498             MOV     A,R7
001B 6B              499             XRL     A,R3
001C FB              500             MOV     R3,A
001D AF05            501             MOV     R7,AR5
001F EF              502             MOV     A,R7
0020 75F008          503             MOV     B,#08H
0023 A4              504             MUL     AB
0024 FF              505             MOV     R7,A
0025 E5F0            506             MOV     A,B
0027 6A              507             XRL     A,R2
0028 FE              508             MOV     R6,A
0029 EF              509             MOV     A,R7
002A 6B              510             XRL     A,R3
002B FF              511             MOV     R7,A
                     512     ; }
                     513                             ; SOURCE LINE # 53
002C                 514     ?C0001:
002C 22              515             RET     
                     516     ; END OF _crc_ccitt_update
                     517     
                     518     ; 
                     519     ; 
                     520     ; #if 0
                     521     ; void test_cram()
                     522     ; {
                     523     ;       u8 idata rdata, cmp;
                     524     ;       u16 idata addr, memcnt, bankn;
                     525     ;       
                     526     ;       EnableWrCRam();
                     527     ;     printf("\n --> Testing cram\n");
                     528     ;       BANKSEL = 0;
                     529     ;       addr = COMMONADDR_L;
                     530     ;       for (memcnt=0; memcnt<COMMON_LEN; memcnt++) 
                     531     ;       {
                     532     ;               cmp = (u8)addr;
                     533     ;               *(u8 xdata *)addr = (u8)cmp;
                     534     ;               addr++;
                     535     ;       }
                     536     ;       for (bankn=0; bankn<NUM_OF_BANK; bankn++)
                     537     ;       {
                     538     ;               addr = BANKADDR_L;
                     539     ;               BANKSEL = bankn;
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    12

                     540     ;               for (memcnt=0; memcnt<CBANK_LEN; memcnt++)
                     541     ;               {
                     542     ;                       cmp =  (u8)(addr+bankn);
                     543     ;                       *(u8 xdata *)addr = (u8)cmp;
                     544     ;                       addr++;
                     545     ;               }       
                     546     ;       }
                     547     ;       DisableWrCRam ();
                     548     ;       BANKSEL = 0;
                     549     ;       addr = COMMONADDR_L;
                     550     ;       for (memcnt=0; memcnt<COMMON_LEN; memcnt++)
                     551     ;       {
                     552     ;               rdata = *(u8 code *)addr;
                     553     ;               cmp = (u8)addr;
                     554     ;               if (rdata!=cmp){
                     555     ;                       printf("\nF:%04X %02X", addr, (u16)rdata);
                     556     ;               } else if ((addr & 0x0F)==0){
                     557     ;                       printf(".");
                     558     ;               }
                     559     ;               addr++;
                     560     ;       }
                     561     ;       for (bankn=0; bankn<NUM_OF_BANK; bankn++)
                     562     ;       {
                     563     ;               addr = BANKADDR_L;
                     564     ;               BANKSEL = bankn;
                     565     ;               for (memcnt=0; memcnt<CBANK_LEN; memcnt++)
                     566     ;               {
                     567     ;                       rdata = *(u8 code *)addr;
                     568     ;                       cmp =  (u8)(addr+bankn);
                     569     ;                       if (rdata!=cmp){
                     570     ;                               printf("\nFB%x:%04X %02X", bankn, addr, (u16)rdata);
                     571     ;                       } else if ((addr & 0x0F)==0){
                     572     ;                               printf(".");
                     573     ;                       }
                     574     ;                       addr++;
                     575     ;               }       
                     576     ;       }
                     577     ;       return;
                     578     ; }
                     579     ; #endif
                     580     ; //***************************************************************
                     581     ; //void dump_code(u8 dflag)
                     582     ; //Dump code from CRAM or SFLASH
                     583     ; //Input:
                     584     ; //            dflag = 0: Dump code from CRAM
                     585     ; //                     = 1: Dump code from SFLASH
                     586     ; //***************************************************************
                     587     ; void load_sflash2cram()
                     588     
----                 589             RSEG  ?PR?load_sflash2cram?SPIFLASH
0000                 590     load_sflash2cram:
                     591             USING   0
                     592                             ; SOURCE LINE # 123
                     593     ; {
                     594                             ; SOURCE LINE # 124
                     595     ;     u8 idata dbyte, banks;                                            
                     596     ;       u16 idata addr, datcnt, progcnt;                  
                     597     ;       u16 idata  calc_crc;
                     598     ;       u8 idata flag_error = 0;
                     599                             ; SOURCE LINE # 128
0000 E4              600             CLR     A
0001 7800     F      601             MOV     R0,#LOW (flag_error?148)
0003 F6              602             MOV     @R0,A
                     603     ;       printf("\n --> System is booting up ");
                     604                             ; SOURCE LINE # 129
0004 7BFF            605             MOV     R3,#0FFH
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    13

0006 7A00     F      606             MOV     R2,#HIGH (?SC_0)
0008 7900     F      607             MOV     R1,#LOW (?SC_0)
000A 120000   F      608             LCALL   _printf
                     609     ; 
                     610     ;     EnableWrCRam();
                     611                             ; SOURCE LINE # 131
000D 120000   F      612             LCALL   EnableWrCRam
                     613     ;       addr = COMMONADDR_L; 
                     614                             ; SOURCE LINE # 132
0010 7800     F      615             MOV     R0,#LOW (addr?144)
0012 7620            616             MOV     @R0,#020H
0014 08              617             INC     R0
0015 7600            618             MOV     @R0,#00H
                     619     ;                       
                     620     ;       progcnt = 0;
                     621                             ; SOURCE LINE # 134
0017 E4              622             CLR     A
0018 7800     F      623             MOV     R0,#LOW (progcnt?146)
001A F6              624             MOV     @R0,A
001B 08              625             INC     R0
001C F6              626             MOV     @R0,A
                     627     ;       BANKSEL = 0;
                     628                             ; SOURCE LINE # 135
001D F59F            629             MOV     BANKSEL,A
                     630     ;       calc_crc = (u16)0;
                     631                             ; SOURCE LINE # 136
001F 08              632             INC     R0
0020 F6              633             MOV     @R0,A
0021 08              634             INC     R0
0022 F6              635             MOV     @R0,A
                     636     ;       for (datcnt = 0; datcnt<COM_BANK0_LEN; datcnt++)  
                     637                             ; SOURCE LINE # 137
0023 7800     F      638             MOV     R0,#LOW (datcnt?145)
0025 F6              639             MOV     @R0,A
0026 08              640             INC     R0
0027 F6              641             MOV     @R0,A
0028                 642     ?C0002:
                     643     ;       {
                     644                             ; SOURCE LINE # 138
                     645     ;               dbyte = *((u8 code * )addr);
                     646                             ; SOURCE LINE # 139
0028 7800     F      647             MOV     R0,#LOW (addr?144)
002A E6              648             MOV     A,@R0
002B FE              649             MOV     R6,A
002C 08              650             INC     R0
002D E6              651             MOV     A,@R0
002E FF              652             MOV     R7,A
002F F582            653             MOV     DPL,A
0031 8E83            654             MOV     DPH,R6
0033 E4              655             CLR     A
0034 93              656             MOVC    A,@A+DPTR
0035 7800     F      657             MOV     R0,#LOW (dbyte?142)
0037 F6              658             MOV     @R0,A
                     659     ;               *((u8 xdata * )addr) = dbyte;
                     660                             ; SOURCE LINE # 140
0038 8F82            661             MOV     DPL,R7
003A 8E83            662             MOV     DPH,R6
003C F0              663             MOVX    @DPTR,A
                     664     ;               
                     665     ;               if(datcnt >= (CRAM_START - COMMONADDR_L))
                     666                             ; SOURCE LINE # 142
003D C3              667             CLR     C
003E 7800     F      668             MOV     R0,#LOW (datcnt?145)
0040 E6              669             MOV     A,@R0
0041 9401            670             SUBB    A,#01H
0043 4015            671             JC      ?C0005
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    14

                     672     ;               {
                     673                             ; SOURCE LINE # 143
                     674     ;                       calc_crc = crc_ccitt_update(calc_crc,dbyte);
                     675                             ; SOURCE LINE # 144
0045 7800     F      676             MOV     R0,#LOW (calc_crc?147)
0047 E6              677             MOV     A,@R0
0048 FE              678             MOV     R6,A
0049 08              679             INC     R0
004A E6              680             MOV     A,@R0
004B FF              681             MOV     R7,A
004C 7800     F      682             MOV     R0,#LOW (dbyte?142)
004E E6              683             MOV     A,@R0
004F FD              684             MOV     R5,A
0050 120000   F      685             LCALL   _crc_ccitt_update
0053 7800     F      686             MOV     R0,#LOW (calc_crc?147)
0055 A606            687             MOV     @R0,AR6
0057 08              688             INC     R0
0058 A607            689             MOV     @R0,AR7
                     690     ;               }
                     691                             ; SOURCE LINE # 145
005A                 692     ?C0005:
                     693     ;               
                     694     ;               addr++;
                     695                             ; SOURCE LINE # 147
005A 7800     F      696             MOV     R0,#LOW (addr?144+01H)
005C 06              697             INC     @R0
005D E6              698             MOV     A,@R0
005E 18              699             DEC     R0
005F 7001            700             JNZ     ?C0109
0061 06              701             INC     @R0
0062                 702     ?C0109:
                     703     ;               progcnt++;
                     704                             ; SOURCE LINE # 148
0062 7800     F      705             MOV     R0,#LOW (progcnt?146+01H)
0064 06              706             INC     @R0
0065 E6              707             MOV     A,@R0
0066 18              708             DEC     R0
0067 7001            709             JNZ     ?C0110
0069 06              710             INC     @R0
006A                 711     ?C0110:
                     712     ;               if (progcnt==5000)
                     713                             ; SOURCE LINE # 149
006A 7800     F      714             MOV     R0,#LOW (progcnt?146)
006C B61313          715             CJNE    @R0,#013H,?C0004
006F 08              716             INC     R0
0070 B6880F          717             CJNE    @R0,#088H,?C0004
                     718     ;               {
                     719                             ; SOURCE LINE # 150
                     720     ;                       printf(".");
                     721                             ; SOURCE LINE # 151
0073 7BFF            722             MOV     R3,#0FFH
0075 7A00     F      723             MOV     R2,#HIGH (?SC_28)
0077 7900     F      724             MOV     R1,#LOW (?SC_28)
0079 120000   F      725             LCALL   _printf
                     726     ;                       progcnt = 0;
                     727                             ; SOURCE LINE # 152
007C E4              728             CLR     A
007D 7800     F      729             MOV     R0,#LOW (progcnt?146)
007F F6              730             MOV     @R0,A
0080 08              731             INC     R0
0081 F6              732             MOV     @R0,A
                     733     ;               }               
                     734                             ; SOURCE LINE # 153
                     735     ;       }
                     736                             ; SOURCE LINE # 154
0082                 737     ?C0004:
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    15

0082 7800     F      738             MOV     R0,#LOW (datcnt?145+01H)
0084 06              739             INC     @R0
0085 E6              740             MOV     A,@R0
0086 18              741             DEC     R0
0087 7001            742             JNZ     ?C0111
0089 06              743             INC     @R0
008A                 744     ?C0111:
008A C3              745             CLR     C
008B 7800     F      746             MOV     R0,#LOW (datcnt?145)
008D E6              747             MOV     A,@R0
008E 94E0            748             SUBB    A,#0E0H
0090 4096            749             JC      ?C0002
0092                 750     ?C0003:
                     751     ;       printf("\nCRC Read");
                     752                             ; SOURCE LINE # 155
0092 7BFF            753             MOV     R3,#0FFH
0094 7A00     F      754             MOV     R2,#HIGH (?SC_30)
0096 7900     F      755             MOV     R1,#LOW (?SC_30)
0098 120000   F      756             LCALL   _printf
                     757     ;       addr = COMMONADDR_L;
                     758                             ; SOURCE LINE # 156
009B 7800     F      759             MOV     R0,#LOW (addr?144)
009D 7620            760             MOV     @R0,#020H
009F 08              761             INC     R0
00A0 7600            762             MOV     @R0,#00H
                     763     ; 
                     764     ;       // loop for crc dump remove after debug 
                     765     ;       for (datcnt = 0; datcnt<17; datcnt++)
                     766                             ; SOURCE LINE # 159
00A2 E4              767             CLR     A
00A3 08              768             INC     R0
00A4 F6              769             MOV     @R0,A
00A5 08              770             INC     R0
00A6 F6              771             MOV     @R0,A
00A7                 772     ?C0007:
                     773     ;       {
                     774                             ; SOURCE LINE # 160
                     775     ;               printf("\n %02bx",*((u8 xdata * )addr));
                     776                             ; SOURCE LINE # 161
00A7 7BFF            777             MOV     R3,#0FFH
00A9 7A00     F      778             MOV     R2,#HIGH (?SC_40)
00AB 7900     F      779             MOV     R1,#LOW (?SC_40)
00AD 7800     F      780             MOV     R0,#LOW (addr?144)
00AF E6              781             MOV     A,@R0
00B0 FE              782             MOV     R6,A
00B1 08              783             INC     R0
00B2 E6              784             MOV     A,@R0
00B3 F582            785             MOV     DPL,A
00B5 8E83            786             MOV     DPH,R6
00B7 E0              787             MOVX    A,@DPTR
00B8 F500     F      788             MOV     ?_printf?BYTE+03H,A
00BA 120000   F      789             LCALL   _printf
                     790     ;               addr++;
                     791                             ; SOURCE LINE # 162
00BD 7800     F      792             MOV     R0,#LOW (addr?144+01H)
00BF 06              793             INC     @R0
00C0 E6              794             MOV     A,@R0
00C1 18              795             DEC     R0
00C2 7001            796             JNZ     ?C0112
00C4 06              797             INC     @R0
00C5                 798     ?C0112:
                     799     ;       }
                     800                             ; SOURCE LINE # 163
00C5 7800     F      801             MOV     R0,#LOW (datcnt?145+01H)
00C7 06              802             INC     @R0
00C8 E6              803             MOV     A,@R0
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    16

00C9 18              804             DEC     R0
00CA 7001            805             JNZ     ?C0113
00CC 06              806             INC     @R0
00CD                 807     ?C0113:
00CD C3              808             CLR     C
00CE 7800     F      809             MOV     R0,#LOW (datcnt?145+01H)
00D0 E6              810             MOV     A,@R0
00D1 9411            811             SUBB    A,#011H
00D3 18              812             DEC     R0
00D4 E6              813             MOV     A,@R0
00D5 9400            814             SUBB    A,#00H
00D7 40CE            815             JC      ?C0007
00D9                 816     ?C0008:
                     817     ; // test loop end
                     818     ; 
                     819     ;       //if((((u8*)&calc_crc)[0] == *((u8 xdata * )COMMONADDR_L)) && 
                     820     ;       //      (((u8*)&calc_crc)[1] == *((u8 xdata * )(COMMONADDR_L+1))))
                     821     ;       if((lo8(calc_crc) == *((u8 xdata * )COMMONADDR_L)) && (hi8(calc_crc) == *((u8 xdata
                              * )(COMMONADDR_L+1))))
                     822                             ; SOURCE LINE # 168
00D9 7800     F      823             MOV     R0,#LOW (calc_crc?147)
00DB E6              824             MOV     A,@R0
00DC FE              825             MOV     R6,A
00DD 08              826             INC     R0
00DE E6              827             MOV     A,@R0
00DF FF              828             MOV     R7,A
00E0 FD              829             MOV     R5,A
00E1 902000          830             MOV     DPTR,#02000H
00E4 E0              831             MOVX    A,@DPTR
00E5 FB              832             MOV     R3,A
00E6 ED              833             MOV     A,R5
00E7 B5031C          834             CJNE    A,AR3,?C0010
00EA EE              835             MOV     A,R6
00EB FF              836             MOV     R7,A
00EC A3              837             INC     DPTR
00ED E0              838             MOVX    A,@DPTR
00EE FD              839             MOV     R5,A
00EF EF              840             MOV     A,R7
00F0 B50513          841             CJNE    A,AR5,?C0010
                     842     ;       {
                     843                             ; SOURCE LINE # 169
                     844     ;               printf("\ncommon crc match %04x\n",calc_crc);
                     845                             ; SOURCE LINE # 170
00F3 7BFF            846             MOV     R3,#0FFH
00F5 7A00     F      847             MOV     R2,#HIGH (?SC_48)
00F7 7900     F      848             MOV     R1,#LOW (?SC_48)
00F9 18              849             DEC     R0
00FA E6              850             MOV     A,@R0
00FB F500     F      851             MOV     ?_printf?BYTE+03H,A
00FD 08              852             INC     R0
00FE E6              853             MOV     A,@R0
00FF F500     F      854             MOV     ?_printf?BYTE+04H,A
0101 120000   F      855             LCALL   _printf
                     856     ;       }
                     857                             ; SOURCE LINE # 171
0104 8020            858             SJMP    ?C0011
0106                 859     ?C0010:
                     860     ;       else
                     861     ;       {
                     862                             ; SOURCE LINE # 173
                     863     ;               printf("\ncommon crc fail %04x,lo %02bx,hi %02bx\n",calc_crc,*((u8 xdata * 
                             )COMMONADDR_L),*((u8 xdata * )(COMMONADDR_L+1)));
                     864                             ; SOURCE LINE # 174
0106 7BFF            865             MOV     R3,#0FFH
0108 7A00     F      866             MOV     R2,#HIGH (?SC_72)
010A 7900     F      867             MOV     R1,#LOW (?SC_72)
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    17

010C 7800     F      868             MOV     R0,#LOW (calc_crc?147)
010E E6              869             MOV     A,@R0
010F F500     F      870             MOV     ?_printf?BYTE+03H,A
0111 08              871             INC     R0
0112 E6              872             MOV     A,@R0
0113 F500     F      873             MOV     ?_printf?BYTE+04H,A
0115 902000          874             MOV     DPTR,#02000H
0118 E0              875             MOVX    A,@DPTR
0119 F500     F      876             MOV     ?_printf?BYTE+05H,A
011B A3              877             INC     DPTR
011C E0              878             MOVX    A,@DPTR
011D F500     F      879             MOV     ?_printf?BYTE+06H,A
011F 120000   F      880             LCALL   _printf
                     881     ;               flag_error = 1;
                     882                             ; SOURCE LINE # 175
0122 7800     F      883             MOV     R0,#LOW (flag_error?148)
0124 7601            884             MOV     @R0,#01H
                     885     ;       }
                     886                             ; SOURCE LINE # 176
0126                 887     ?C0011:
                     888     ; 
                     889     ;       if(flag_error == 1)
                     890                             ; SOURCE LINE # 178
0126 7800     F      891             MOV     R0,#LOW (flag_error?148)
0128 E6              892             MOV     A,@R0
0129 6401            893             XRL     A,#01H
012B 7003            894             JNZ     $ + 5H
012D 020000   F      895             LJMP    ?load_sflash2cram?FLASH_CRC_ERROR_HANDLE
                     896     ;       {
                     897                             ; SOURCE LINE # 179
                     898     ;               goto    FLASH_CRC_ERROR_HANDLE;
                     899                             ; SOURCE LINE # 180
                     900     ;       }
                     901                             ; SOURCE LINE # 181
0130                 902     ?C0012:
                     903     ; 
                     904     ; 
                     905     ;       progcnt = 0;
                     906                             ; SOURCE LINE # 184
0130 E4              907             CLR     A
0131 7800     F      908             MOV     R0,#LOW (progcnt?146)
0133 F6              909             MOV     @R0,A
0134 08              910             INC     R0
0135 F6              911             MOV     @R0,A
                     912     ;       
                     913     ;       for (banks=1;banks<NUM_OF_BANK;banks++)
                     914                             ; SOURCE LINE # 186
0136 7800     F      915             MOV     R0,#LOW (banks?143)
0138 7601            916             MOV     @R0,#01H
013A                 917     ?C0014:
013A 7800     F      918             MOV     R0,#LOW (banks?143)
013C E6              919             MOV     A,@R0
013D FF              920             MOV     R7,A
013E C3              921             CLR     C
013F 9408            922             SUBB    A,#08H
0141 4003            923             JC      $ + 5H
0143 020000   F      924             LJMP    ?C0015
                     925     ;       {
                     926                             ; SOURCE LINE # 187
                     927     ;               BANKSEL = banks;
                     928                             ; SOURCE LINE # 188
0146 8F9F            929             MOV     BANKSEL,R7
                     930     ;               addr = BANKADDR_L;
                     931                             ; SOURCE LINE # 189
0148 08              932             INC     R0
0149 76A0            933             MOV     @R0,#0A0H
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    18

014B 08              934             INC     R0
014C 7600            935             MOV     @R0,#00H
                     936     ;               calc_crc = (u16)0;
                     937                             ; SOURCE LINE # 190
014E E4              938             CLR     A
014F 7800     F      939             MOV     R0,#LOW (calc_crc?147)
0151 F6              940             MOV     @R0,A
0152 08              941             INC     R0
0153 F6              942             MOV     @R0,A
                     943     ;               for (datcnt=0; datcnt<CBANK_LEN; datcnt++)
                     944                             ; SOURCE LINE # 191
0154 7800     F      945             MOV     R0,#LOW (datcnt?145)
0156 F6              946             MOV     @R0,A
0157 08              947             INC     R0
0158 F6              948             MOV     @R0,A
0159                 949     ?C0017:
                     950     ;               {
                     951                             ; SOURCE LINE # 192
                     952     ;                       dbyte = *((u8 code * )addr);
                     953                             ; SOURCE LINE # 193
0159 7800     F      954             MOV     R0,#LOW (addr?144)
015B E6              955             MOV     A,@R0
015C FE              956             MOV     R6,A
015D 08              957             INC     R0
015E E6              958             MOV     A,@R0
015F FF              959             MOV     R7,A
0160 F582            960             MOV     DPL,A
0162 8E83            961             MOV     DPH,R6
0164 E4              962             CLR     A
0165 93              963             MOVC    A,@A+DPTR
0166 7800     F      964             MOV     R0,#LOW (dbyte?142)
0168 F6              965             MOV     @R0,A
                     966     ;                       *((u8 xdata * )addr) = dbyte;
                     967                             ; SOURCE LINE # 194
0169 E6              968             MOV     A,@R0
016A FD              969             MOV     R5,A
016B 8F82            970             MOV     DPL,R7
016D 8E83            971             MOV     DPH,R6
016F F0              972             MOVX    @DPTR,A
                     973     ; #if 0                 
                     974     ;                       if(banks==1)
                     975     ;                       {
                     976     ;                               if ((addr&0x0007)==0)
                     977     ;                                       printf ("\n0x%04X:", addr);
                     978     ; 
                     979     ;                               printf (" %02X", (u16)dbyte);
                     980     ; 
                     981     ;                       }
                     982     ; #endif                        
                     983     ;                       calc_crc = crc_ccitt_update(calc_crc,dbyte);
                     984                             ; SOURCE LINE # 205
0170 7800     F      985             MOV     R0,#LOW (calc_crc?147)
0172 E6              986             MOV     A,@R0
0173 FE              987             MOV     R6,A
0174 08              988             INC     R0
0175 E6              989             MOV     A,@R0
0176 FF              990             MOV     R7,A
0177 120000   F      991             LCALL   _crc_ccitt_update
017A 18              992             DEC     R0
017B A606            993             MOV     @R0,AR6
017D 08              994             INC     R0
017E A607            995             MOV     @R0,AR7
                     996     ;                       
                     997     ;                       addr++;
                     998                             ; SOURCE LINE # 207
0180 7800     F      999             MOV     R0,#LOW (addr?144+01H)
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    19

0182 06             1000             INC     @R0
0183 E6             1001             MOV     A,@R0
0184 18             1002             DEC     R0
0185 7001           1003             JNZ     ?C0116
0187 06             1004             INC     @R0
0188                1005     ?C0116:
                    1006     ;                       progcnt++;
                    1007                             ; SOURCE LINE # 208
0188 7800     F     1008             MOV     R0,#LOW (progcnt?146+01H)
018A 06             1009             INC     @R0
018B E6             1010             MOV     A,@R0
018C 18             1011             DEC     R0
018D 7001           1012             JNZ     ?C0117
018F 06             1013             INC     @R0
0190                1014     ?C0117:
                    1015     ;                       if (progcnt==5000)
                    1016                             ; SOURCE LINE # 209
0190 7800     F     1017             MOV     R0,#LOW (progcnt?146)
0192 B61313         1018             CJNE    @R0,#013H,?C0019
0195 08             1019             INC     R0
0196 B6880F         1020             CJNE    @R0,#088H,?C0019
                    1021     ;                       {
                    1022                             ; SOURCE LINE # 210
                    1023     ;                               printf(".");
                    1024                             ; SOURCE LINE # 211
0199 7BFF           1025             MOV     R3,#0FFH
019B 7A00     F     1026             MOV     R2,#HIGH (?SC_28)
019D 7900     F     1027             MOV     R1,#LOW (?SC_28)
019F 120000   F     1028             LCALL   _printf
                    1029     ;                               progcnt = 0;
                    1030                             ; SOURCE LINE # 212
01A2 E4             1031             CLR     A
01A3 7800     F     1032             MOV     R0,#LOW (progcnt?146)
01A5 F6             1033             MOV     @R0,A
01A6 08             1034             INC     R0
01A7 F6             1035             MOV     @R0,A
                    1036     ;                       }               
                    1037                             ; SOURCE LINE # 213
                    1038     ;               }
                    1039                             ; SOURCE LINE # 214
01A8                1040     ?C0019:
01A8 7800     F     1041             MOV     R0,#LOW (datcnt?145+01H)
01AA 06             1042             INC     @R0
01AB E6             1043             MOV     A,@R0
01AC 18             1044             DEC     R0
01AD 7001           1045             JNZ     ?C0118
01AF 06             1046             INC     @R0
01B0                1047     ?C0118:
01B0 C3             1048             CLR     C
01B1 7800     F     1049             MOV     R0,#LOW (datcnt?145)
01B3 E6             1050             MOV     A,@R0
01B4 9460           1051             SUBB    A,#060H
01B6 40A1           1052             JC      ?C0017
01B8                1053     ?C0018:
                    1054     ;               //printf("\nCRC = %04x\n",calc_crc);
                    1055     ;               if((lo8(calc_crc) == *((u8 xdata * )(COMMONADDR_L + banks*2))) && 
                    1056     ;                       (hi8(calc_crc) == *((u8 xdata * )(COMMONADDR_L + (banks*2)+1))))
                    1057                             ; SOURCE LINE # 217
01B8 7800     F     1058             MOV     R0,#LOW (banks?143)
01BA E6             1059             MOV     A,@R0
01BB F9             1060             MOV     R1,A
01BC 75F002         1061             MOV     B,#02H
01BF A4             1062             MUL     AB
01C0 2400           1063             ADD     A,#00H
01C2 FF             1064             MOV     R7,A
01C3 E5F0           1065             MOV     A,B
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    20

01C5 3420           1066             ADDC    A,#020H
01C7 8F82           1067             MOV     DPL,R7
01C9 F583           1068             MOV     DPH,A
01CB E0             1069             MOVX    A,@DPTR
01CC FF             1070             MOV     R7,A
01CD 7800     F     1071             MOV     R0,#LOW (calc_crc?147)
01CF E6             1072             MOV     A,@R0
01D0 FC             1073             MOV     R4,A
01D1 08             1074             INC     R0
01D2 E6             1075             MOV     A,@R0
01D3 FD             1076             MOV     R5,A
01D4 6F             1077             XRL     A,R7
01D5 7001           1078             JNZ     ?C0119
01D7 E4             1079             CLR     A
01D8                1080     ?C0119:
01D8 702F           1081             JNZ     ?C0021
01DA E9             1082             MOV     A,R1
01DB 75F002         1083             MOV     B,#02H
01DE A4             1084             MUL     AB
01DF 2401           1085             ADD     A,#01H
01E1 FF             1086             MOV     R7,A
01E2 E5F0           1087             MOV     A,B
01E4 3420           1088             ADDC    A,#020H
01E6 8F82           1089             MOV     DPL,R7
01E8 F583           1090             MOV     DPH,A
01EA E0             1091             MOVX    A,@DPTR
01EB FB             1092             MOV     R3,A
01EC EC             1093             MOV     A,R4
01ED B50319         1094             CJNE    A,AR3,?C0021
                    1095     ;               //if((((u8*)&calc_crc)[0] == *((u8 xdata * )(COMMONADDR_L + banks*2))) && 
                    1096     ;               //      (((u8*)&calc_crc)[1] == *((u8 xdata * )(COMMONADDR_L + (banks*2)+1)
                             )))
                    1097     ;               {
                    1098                             ; SOURCE LINE # 220
                    1099     ;                       printf("\Bank %bu crc match %04x\n",banks,calc_crc);
                    1100                             ; SOURCE LINE # 221
01F0 7BFF           1101             MOV     R3,#0FFH
01F2 7A00     F     1102             MOV     R2,#HIGH (?SC_113)
01F4 7900     F     1103             MOV     R1,#LOW (?SC_113)
01F6 7800     F     1104             MOV     R0,#LOW (banks?143)
01F8 E6             1105             MOV     A,@R0
01F9 F500     F     1106             MOV     ?_printf?BYTE+03H,A
01FB 7800     F     1107             MOV     R0,#LOW (calc_crc?147)
01FD E6             1108             MOV     A,@R0
01FE F500     F     1109             MOV     ?_printf?BYTE+04H,A
0200 08             1110             INC     R0
0201 E6             1111             MOV     A,@R0
0202 F500     F     1112             MOV     ?_printf?BYTE+05H,A
0204 120000   F     1113             LCALL   _printf
                    1114     ;               }
                    1115                             ; SOURCE LINE # 222
0207 8041           1116             SJMP    ?C0022
0209                1117     ?C0021:
                    1118     ;               else
                    1119     ;               {
                    1120                             ; SOURCE LINE # 224
                    1121     ;                       printf("\nBank %bu crc fail %04x,lo %02bx,hi %02bx\n",banks,calc_cr
                             c,*((u8 xdata * )(COMMONADDR_L + banks*2)),
                    1122     ;                                                                                          
                                                                                          *((u8 xdata * )(COMMONADDR_L + (banks*2)+1)));
                    1123                             ; SOURCE LINE # 226
0209 7BFF           1124             MOV     R3,#0FFH
020B 7A00     F     1125             MOV     R2,#HIGH (?SC_138)
020D 7900     F     1126             MOV     R1,#LOW (?SC_138)
020F 7800     F     1127             MOV     R0,#LOW (banks?143)
0211 E6             1128             MOV     A,@R0
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    21

0212 FF             1129             MOV     R7,A
0213 F500     F     1130             MOV     ?_printf?BYTE+03H,A
0215 7800     F     1131             MOV     R0,#LOW (calc_crc?147)
0217 E6             1132             MOV     A,@R0
0218 F500     F     1133             MOV     ?_printf?BYTE+04H,A
021A 08             1134             INC     R0
021B E6             1135             MOV     A,@R0
021C F500     F     1136             MOV     ?_printf?BYTE+05H,A
021E EF             1137             MOV     A,R7
021F 75F002         1138             MOV     B,#02H
0222 A4             1139             MUL     AB
0223 FF             1140             MOV     R7,A
0224 AEF0           1141             MOV     R6,B
0226 2400           1142             ADD     A,#00H
0228 FD             1143             MOV     R5,A
0229 EE             1144             MOV     A,R6
022A 3420           1145             ADDC    A,#020H
022C 8D82           1146             MOV     DPL,R5
022E F583           1147             MOV     DPH,A
0230 E0             1148             MOVX    A,@DPTR
0231 F500     F     1149             MOV     ?_printf?BYTE+06H,A
0233 EF             1150             MOV     A,R7
0234 2401           1151             ADD     A,#01H
0236 FF             1152             MOV     R7,A
0237 EE             1153             MOV     A,R6
0238 3420           1154             ADDC    A,#020H
023A 8F82           1155             MOV     DPL,R7
023C F583           1156             MOV     DPH,A
023E E0             1157             MOVX    A,@DPTR
023F F500     F     1158             MOV     ?_printf?BYTE+07H,A
0241 120000   F     1159             LCALL   _printf
                    1160     ; 
                    1161     ;                       flag_error = 1;
                    1162                             ; SOURCE LINE # 228
0244 7800     F     1163             MOV     R0,#LOW (flag_error?148)
0246 7601           1164             MOV     @R0,#01H
                    1165     ;                       break;
                    1166                             ; SOURCE LINE # 229
0248 800D           1167             SJMP    ?C0015
                    1168     ;               }
                    1169                             ; SOURCE LINE # 230
024A                1170     ?C0022:
                    1171     ;               if(flag_error == 1)
                    1172                             ; SOURCE LINE # 231
024A 7800     F     1173             MOV     R0,#LOW (flag_error?148)
024C E6             1174             MOV     A,@R0
024D 6401           1175             XRL     A,#01H
024F 6006           1176             JZ      ?C0015
                    1177     ;               {
                    1178                             ; SOURCE LINE # 232
                    1179     ;                       break;
                    1180                             ; SOURCE LINE # 233
                    1181     ;               }
                    1182                             ; SOURCE LINE # 234
0251                1183     ?C0023:
                    1184     ;       }
                    1185                             ; SOURCE LINE # 235
0251                1186     ?C0016:
0251 7800     F     1187             MOV     R0,#LOW (banks?143)
0253 06             1188             INC     @R0
0254 020000   F     1189             LJMP    ?C0014
0257                1190     ?C0015:
                    1191     ;       DisableWrCRam ();
                    1192                             ; SOURCE LINE # 236
0257 120000   F     1193             LCALL   DisableWrCRam
                    1194     ; 
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    22

                    1195     ;       if(flag_error == 1)
                    1196                             ; SOURCE LINE # 238
025A 7800     F     1197             MOV     R0,#LOW (flag_error?148)
025C E6             1198             MOV     A,@R0
025D 6401           1199             XRL     A,#01H
025F 600F           1200             JZ      ?load_sflash2cram?FLASH_CRC_ERROR_HANDLE
                    1201     ;       {
                    1202                             ; SOURCE LINE # 239
                    1203     ;               goto    FLASH_CRC_ERROR_HANDLE;
                    1204                             ; SOURCE LINE # 240
                    1205     ;       }
                    1206                             ; SOURCE LINE # 241
0261                1207     ?C0024:
                    1208     ;       printf("\n --> Running firmware\n\n");
                    1209                             ; SOURCE LINE # 242
0261 7BFF           1210             MOV     R3,#0FFH
0263 7A00     F     1211             MOV     R2,#HIGH (?SC_181)
0265 7900     F     1212             MOV     R1,#LOW (?SC_181)
0267 120000   F     1213             LCALL   _printf
                    1214     ;       #pragma asm
                    1215     ;               MOV     SP, #06FH
026A 75816F         1216               MOV   SP, #06FH
                    1217     ;               LJMP  CRAM_START;
026D 022100         1218               LJMP  0x2100;
                    1219     ;       #pragma endasm
                    1220     ; 
                    1221     ; 
                    1222     ; FLASH_CRC_ERROR_HANDLE:
                    1223                             ; SOURCE LINE # 249
0270                1224     ?load_sflash2cram?FLASH_CRC_ERROR_HANDLE:
                    1225     ;       //add code for backup integrity check
                    1226     ;       DisableWrCRam ();
                    1227                             ; SOURCE LINE # 251
0270 120000   F     1228             LCALL   DisableWrCRam
                    1229     ;       (void)spiflash_RestoreCodeImage(1);
                    1230                             ; SOURCE LINE # 252
0273 7F01           1231             MOV     R7,#01H
0275 120000   F     1232             LCALL   _spiflash_RestoreCodeImage
                    1233     ;       *((u8 xdata * )(0x34)) = 1; // wb 34 1 system reset
                    1234                             ; SOURCE LINE # 253
0278 900034         1235             MOV     DPTR,#034H
027B 7401           1236             MOV     A,#01H
027D F0             1237             MOVX    @DPTR,A
                    1238     ;       return;
                    1239     ; }
                    1240                             ; SOURCE LINE # 255
027E                1241     ?C0025:
027E 22             1242             RET     
                    1243     ; END OF load_sflash2cram
                    1244     
                    1245     ; 
                    1246     ; //***************************************************************
                    1247     ; //void dump_code(u8 dflag)
                    1248     ; //Dump code from CRAM or SFLASH
                    1249     ; //Input:
                    1250     ; //            dflag = 0: Dump code from CRAM
                    1251     ; //                     = 1: Dump code from SFLASH
                    1252     ; //***************************************************************
                    1253     ; 
                    1254     ; void dump_code(u8 dflag)
                    1255     
----                1256             RSEG  ?PR?_dump_code?SPIFLASH
0000                1257     _dump_code:
                    1258             USING   0
                    1259                             ; SOURCE LINE # 265
                    1260     ;---- Variable 'dflag?249' assigned to Register 'R7' ----
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    23

                    1261     ; {
                    1262                             ; SOURCE LINE # 266
                    1263     ;       u16 idata addr, i;
                    1264     ;       u8 idata dbyte, banks;
                    1265     ;       //u32 idata flash_address = (u32)0;
                    1266     ; #if 0 
                    1267     ;       if (dflag==0)
                    1268     ;       {
                    1269     ;               printf("\n --> Dump code RAM");
                    1270     ;               DisableWrCRam ();
                    1271     ;       }
                    1272     ;       else 
                    1273     ; #endif        
                    1274     ;       if (dflag==1)
                    1275                             ; SOURCE LINE # 278
0000 BF010C         1276             CJNE    R7,#01H,?C0026
                    1277     ;       {
                    1278                             ; SOURCE LINE # 279
                    1279     ;               EnableWrCRam();
                    1280                             ; SOURCE LINE # 280
0003 120000   F     1281             LCALL   EnableWrCRam
                    1282     ;               printf("\n --> Dump sflash");
                    1283                             ; SOURCE LINE # 281
0006 7BFF           1284             MOV     R3,#0FFH
0008 7A00     F     1285             MOV     R2,#HIGH (?SC_206)
000A 7900     F     1286             MOV     R1,#LOW (?SC_206)
000C 120000   F     1287             LCALL   _printf
                    1288     ;       } 
                    1289                             ; SOURCE LINE # 282
000F                1290     ?C0026:
                    1291     ; #if 0 
                    1292     ;       else if (dflag==2)
                    1293     ;       {
                    1294     ;               printf("\n --> Dump 64K eram");
                    1295     ;               goto dump_eram;
                    1296     ; 
                    1297     ;       }
                    1298     ; #endif
                    1299     ;       
                    1300     ;       addr = COMMONADDR_L; 
                    1301                             ; SOURCE LINE # 292
000F 7800     F     1302             MOV     R0,#LOW (addr?250)
0011 7620           1303             MOV     @R0,#020H
0013 08             1304             INC     R0
0014 7600           1305             MOV     @R0,#00H
                    1306     ;       for (i=0; i<COM_BANK0_LEN; i++)
                    1307                             ; SOURCE LINE # 293
0016 E4             1308             CLR     A
0017 08             1309             INC     R0
0018 F6             1310             MOV     @R0,A
0019 08             1311             INC     R0
001A F6             1312             MOV     @R0,A
001B                1313     ?C0027:
                    1314     ;       {
                    1315                             ; SOURCE LINE # 294
                    1316     ;               if ((addr&0x0007)==0)
                    1317                             ; SOURCE LINE # 295
001B 7800     F     1318             MOV     R0,#LOW (addr?250)
001D E6             1319             MOV     A,@R0
001E FE             1320             MOV     R6,A
001F 08             1321             INC     R0
0020 E6             1322             MOV     A,@R0
0021 FF             1323             MOV     R7,A
0022 5407           1324             ANL     A,#07H
0024 700D           1325             JNZ     ?C0030
                    1326     ;                       printf ("\n0x%04X:", addr);
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    24

                    1327                             ; SOURCE LINE # 296
0026 7BFF           1328             MOV     R3,#0FFH
0028 7A00     F     1329             MOV     R2,#HIGH (?SC_224)
002A 7900     F     1330             MOV     R1,#LOW (?SC_224)
002C 8E00     F     1331             MOV     ?_printf?BYTE+03H,R6
002E 8F00     F     1332             MOV     ?_printf?BYTE+04H,R7
0030 120000   F     1333             LCALL   _printf
0033                1334     ?C0030:
                    1335     ; 
                    1336     ;               dbyte = *(u8 code *)addr;
                    1337                             ; SOURCE LINE # 298
0033 7800     F     1338             MOV     R0,#LOW (addr?250)
0035 E6             1339             MOV     A,@R0
0036 FE             1340             MOV     R6,A
0037 08             1341             INC     R0
0038 E6             1342             MOV     A,@R0
0039 F582           1343             MOV     DPL,A
003B 8E83           1344             MOV     DPH,R6
003D E4             1345             CLR     A
003E 93             1346             MOVC    A,@A+DPTR
003F FF             1347             MOV     R7,A
0040 7800     F     1348             MOV     R0,#LOW (dbyte?252)
0042 F6             1349             MOV     @R0,A
                    1350     ;               addr++;
                    1351                             ; SOURCE LINE # 299
0043 7800     F     1352             MOV     R0,#LOW (addr?250+01H)
0045 06             1353             INC     @R0
0046 E6             1354             MOV     A,@R0
0047 18             1355             DEC     R0
0048 7001           1356             JNZ     ?C0121
004A 06             1357             INC     @R0
004B                1358     ?C0121:
                    1359     ;               //flash_address++;
                    1360     ;               printf (" %02X", (u16)dbyte);
                    1361                             ; SOURCE LINE # 301
004B 7BFF           1362             MOV     R3,#0FFH
004D 7A00     F     1363             MOV     R2,#HIGH (?SC_233)
004F 7900     F     1364             MOV     R1,#LOW (?SC_233)
0051 750000   F     1365             MOV     ?_printf?BYTE+03H,#00H
0054 8F00     F     1366             MOV     ?_printf?BYTE+04H,R7
0056 120000   F     1367             LCALL   _printf
                    1368     ;       }
                    1369                             ; SOURCE LINE # 302
0059 7800     F     1370             MOV     R0,#LOW (i?251+01H)
005B 06             1371             INC     @R0
005C E6             1372             MOV     A,@R0
005D 18             1373             DEC     R0
005E 7001           1374             JNZ     ?C0122
0060 06             1375             INC     @R0
0061                1376     ?C0122:
0061 C3             1377             CLR     C
0062 7800     F     1378             MOV     R0,#LOW (i?251)
0064 E6             1379             MOV     A,@R0
0065 94E0           1380             SUBB    A,#0E0H
0067 40B2           1381             JC      ?C0027
0069                1382     ?C0028:
                    1383     ;       for (banks=1; banks<8;banks++)
                    1384                             ; SOURCE LINE # 303
0069 7800     F     1385             MOV     R0,#LOW (banks?253)
006B 7601           1386             MOV     @R0,#01H
006D                1387     ?C0031:
006D 7800     F     1388             MOV     R0,#LOW (banks?253)
006F E6             1389             MOV     A,@R0
0070 FF             1390             MOV     R7,A
0071 C3             1391             CLR     C
0072 9408           1392             SUBB    A,#08H
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    25

0074 5072           1393             JNC     ?C0032
                    1394     ;       {
                    1395                             ; SOURCE LINE # 304
                    1396     ;               printf("\n\n --> Bank %02X\n", (u16)banks);
                    1397                             ; SOURCE LINE # 305
0076 7BFF           1398             MOV     R3,#0FFH
0078 7A00     F     1399             MOV     R2,#HIGH (?SC_239)
007A 7900     F     1400             MOV     R1,#LOW (?SC_239)
007C 750000   F     1401             MOV     ?_printf?BYTE+03H,#00H
007F 8F00     F     1402             MOV     ?_printf?BYTE+04H,R7
0081 120000   F     1403             LCALL   _printf
                    1404     ;               BANKSEL = banks;
                    1405                             ; SOURCE LINE # 306
0084 7800     F     1406             MOV     R0,#LOW (banks?253)
0086 E6             1407             MOV     A,@R0
0087 F59F           1408             MOV     BANKSEL,A
                    1409     ;               addr = BANKADDR_L;
                    1410                             ; SOURCE LINE # 307
0089 7800     F     1411             MOV     R0,#LOW (addr?250)
008B 76A0           1412             MOV     @R0,#0A0H
008D 08             1413             INC     R0
008E 7600           1414             MOV     @R0,#00H
                    1415     ;               for (i=0; i<CBANK_LEN; i++)
                    1416                             ; SOURCE LINE # 308
0090 E4             1417             CLR     A
0091 08             1418             INC     R0
0092 F6             1419             MOV     @R0,A
0093 08             1420             INC     R0
0094 F6             1421             MOV     @R0,A
0095                1422     ?C0034:
                    1423     ;               {
                    1424                             ; SOURCE LINE # 309
                    1425     ;                       if ((addr&0x0007)==0)
                    1426                             ; SOURCE LINE # 310
0095 7800     F     1427             MOV     R0,#LOW (addr?250)
0097 E6             1428             MOV     A,@R0
0098 FE             1429             MOV     R6,A
0099 08             1430             INC     R0
009A E6             1431             MOV     A,@R0
009B FF             1432             MOV     R7,A
009C 5407           1433             ANL     A,#07H
009E 700D           1434             JNZ     ?C0037
                    1435     ;                               printf ("\n0x%04X:", addr);
                    1436                             ; SOURCE LINE # 311
00A0 7BFF           1437             MOV     R3,#0FFH
00A2 7A00     F     1438             MOV     R2,#HIGH (?SC_224)
00A4 7900     F     1439             MOV     R1,#LOW (?SC_224)
00A6 8E00     F     1440             MOV     ?_printf?BYTE+03H,R6
00A8 8F00     F     1441             MOV     ?_printf?BYTE+04H,R7
00AA 120000   F     1442             LCALL   _printf
00AD                1443     ?C0037:
                    1444     ; 
                    1445     ;                       dbyte = *(u8 code *)addr;
                    1446                             ; SOURCE LINE # 313
00AD 7800     F     1447             MOV     R0,#LOW (addr?250)
00AF E6             1448             MOV     A,@R0
00B0 FE             1449             MOV     R6,A
00B1 08             1450             INC     R0
00B2 E6             1451             MOV     A,@R0
00B3 F582           1452             MOV     DPL,A
00B5 8E83           1453             MOV     DPH,R6
00B7 E4             1454             CLR     A
00B8 93             1455             MOVC    A,@A+DPTR
00B9 FF             1456             MOV     R7,A
00BA 7800     F     1457             MOV     R0,#LOW (dbyte?252)
00BC F6             1458             MOV     @R0,A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    26

                    1459     ;                       addr++;
                    1460                             ; SOURCE LINE # 314
00BD 7800     F     1461             MOV     R0,#LOW (addr?250+01H)
00BF 06             1462             INC     @R0
00C0 E6             1463             MOV     A,@R0
00C1 18             1464             DEC     R0
00C2 7001           1465             JNZ     ?C0123
00C4 06             1466             INC     @R0
00C5                1467     ?C0123:
                    1468     ;                       //flash_address++;
                    1469     ;                       printf (" %02X", (u16)dbyte);
                    1470                             ; SOURCE LINE # 316
00C5 7BFF           1471             MOV     R3,#0FFH
00C7 7A00     F     1472             MOV     R2,#HIGH (?SC_233)
00C9 7900     F     1473             MOV     R1,#LOW (?SC_233)
00CB 750000   F     1474             MOV     ?_printf?BYTE+03H,#00H
00CE 8F00     F     1475             MOV     ?_printf?BYTE+04H,R7
00D0 120000   F     1476             LCALL   _printf
                    1477     ;               }
                    1478                             ; SOURCE LINE # 317
00D3 7800     F     1479             MOV     R0,#LOW (i?251+01H)
00D5 06             1480             INC     @R0
00D6 E6             1481             MOV     A,@R0
00D7 18             1482             DEC     R0
00D8 7001           1483             JNZ     ?C0124
00DA 06             1484             INC     @R0
00DB                1485     ?C0124:
00DB C3             1486             CLR     C
00DC 7800     F     1487             MOV     R0,#LOW (i?251)
00DE E6             1488             MOV     A,@R0
00DF 9460           1489             SUBB    A,#060H
00E1 40B2           1490             JC      ?C0034
                    1491     ;       }
                    1492                             ; SOURCE LINE # 318
00E3                1493     ?C0033:
00E3 7800     F     1494             MOV     R0,#LOW (banks?253)
00E5 06             1495             INC     @R0
00E6 8085           1496             SJMP    ?C0031
00E8                1497     ?C0032:
                    1498     ; //    printf("Flash end addr: %lx", flash_address);
                    1499     ;       DisableWrCRam ();
                    1500                             ; SOURCE LINE # 320
00E8 120000   F     1501             LCALL   DisableWrCRam
                    1502     ;       return;
                    1503     ;       
                    1504     ; #if 0 
                    1505     ; dump_eram:
                    1506     ;       addr = COMMONADDR_L;
                    1507     ; Cont_dump_eram:
                    1508     ;       if ((addr&0x0007)==0){
                    1509     ;               printf ("\n0x%04X:", addr);
                    1510     ;       }
                    1511     ;       dbyte = *(u8 xdata *)addr;
                    1512     ;       printf (" %02X", (u16)dbyte);
                    1513     ;       if (addr!=0xFFFF)
                    1514     ;       {
                    1515     ;               addr++;
                    1516     ;               goto Cont_dump_eram;
                    1517     ;       }       
                    1518     ; #endif
                    1519     ;       
                    1520     ;       return;
                    1521     ; }
                    1522                             ; SOURCE LINE # 340
00EB                1523     ?C0038:
00EB 22             1524             RET     
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    27

                    1525     ; END OF _dump_code
                    1526     
                    1527     ; 
                    1528     ; #if 1
                    1529     ; //***************************************************************
                    1530     ; //void dump_BackupImage()
                    1531     ; //Dump code from backup image
                    1532     ; //***************************************************************
                    1533     ; 
                    1534     ; void dump_BackupCode()
                    1535     
----                1536             RSEG  ?PR?dump_BackupCode?SPIFLASH
0000                1537     dump_BackupCode:
                    1538             USING   0
                    1539                             ; SOURCE LINE # 348
                    1540     ; {
                    1541                             ; SOURCE LINE # 349
                    1542     ;       u16 idata addr, i;
                    1543     ;       u8 idata dbyte, banks;
                    1544     ;       SflashAddr = 0x50000;
                    1545                             ; SOURCE LINE # 352
0000 900000   F     1546             MOV     DPTR,#SflashAddr
0003 120000   F     1547             LCALL   ?C?LSTKXDATA
0006 00             1548             DB      00H
0007 05             1549             DB      05H
0008 00             1550             DB      00H
0009 00             1551             DB      00H
                    1552     ;       printf("\n --> Dump backup code");
                    1553                             ; SOURCE LINE # 353
000A 7BFF           1554             MOV     R3,#0FFH
000C 7A00     F     1555             MOV     R2,#HIGH (?SC_257)
000E 7900     F     1556             MOV     R1,#LOW (?SC_257)
0010 120000   F     1557             LCALL   _printf
                    1558     ;       for (i=0; i<COM_BANK0_LEN; i++)
                    1559                             ; SOURCE LINE # 354
0013 E4             1560             CLR     A
0014 7800     F     1561             MOV     R0,#LOW (i?355)
0016 F6             1562             MOV     @R0,A
0017 08             1563             INC     R0
0018 F6             1564             MOV     @R0,A
0019                1565     ?C0039:
0019 7800     F     1566             MOV     R0,#LOW (i?355)
001B E6             1567             MOV     A,@R0
001C FE             1568             MOV     R6,A
001D 08             1569             INC     R0
001E E6             1570             MOV     A,@R0
001F FF             1571             MOV     R7,A
0020 C3             1572             CLR     C
0021 EE             1573             MOV     A,R6
0022 94E0           1574             SUBB    A,#0E0H
0024 5058           1575             JNC     ?C0040
                    1576     ;       {
                    1577                             ; SOURCE LINE # 355
                    1578     ;               if ((i&0x0007)==0){
                    1579                             ; SOURCE LINE # 356
0026 EF             1580             MOV     A,R7
0027 5407           1581             ANL     A,#07H
0029 7012           1582             JNZ     ?C0042
                    1583     ;                       printf ("\n0x%04X:",(u16)(i+0x2000));
                    1584                             ; SOURCE LINE # 357
002B 7BFF           1585             MOV     R3,#0FFH
002D 7A00     F     1586             MOV     R2,#HIGH (?SC_224)
002F 7900     F     1587             MOV     R1,#LOW (?SC_224)
0031 26             1588             ADD     A,@R0
0032 F500     F     1589             MOV     ?_printf?BYTE+04H,A
0034 18             1590             DEC     R0
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    28

0035 E6             1591             MOV     A,@R0
0036 3420           1592             ADDC    A,#020H
0038 F500     F     1593             MOV     ?_printf?BYTE+03H,A
003A 120000   F     1594             LCALL   _printf
                    1595     ;               }
                    1596                             ; SOURCE LINE # 358
003D                1597     ?C0042:
                    1598     ;               dbyte = spiflash_ReadByte(SflashAddr);
                    1599                             ; SOURCE LINE # 359
003D 900000   F     1600             MOV     DPTR,#SflashAddr
0040 120000   F     1601             LCALL   ?C?LLDXDATA
0043 120000   F     1602             LCALL   _spiflash_ReadByte
0046 7800     F     1603             MOV     R0,#LOW (dbyte?356)
0048 A607           1604             MOV     @R0,AR7
                    1605     ;               SflashAddr++;
                    1606                             ; SOURCE LINE # 360
004A 900000   F     1607             MOV     DPTR,#SflashAddr
004D 120000   F     1608             LCALL   ?C?LLDXDATA
0050 EF             1609             MOV     A,R7
0051 2401           1610             ADD     A,#01H
0053 FF             1611             MOV     R7,A
0054 E4             1612             CLR     A
0055 3E             1613             ADDC    A,R6
0056 FE             1614             MOV     R6,A
0057 E4             1615             CLR     A
0058 3D             1616             ADDC    A,R5
0059 FD             1617             MOV     R5,A
005A E4             1618             CLR     A
005B 3C             1619             ADDC    A,R4
005C FC             1620             MOV     R4,A
005D 900000   F     1621             MOV     DPTR,#SflashAddr
0060 120000   F     1622             LCALL   ?C?LSTXDATA
                    1623     ;               printf (" %02X", (u16)dbyte);
                    1624                             ; SOURCE LINE # 361
0063 7BFF           1625             MOV     R3,#0FFH
0065 7A00     F     1626             MOV     R2,#HIGH (?SC_233)
0067 7900     F     1627             MOV     R1,#LOW (?SC_233)
0069 7800     F     1628             MOV     R0,#LOW (dbyte?356)
006B E6             1629             MOV     A,@R0
006C 750000   F     1630             MOV     ?_printf?BYTE+03H,#00H
006F F500     F     1631             MOV     ?_printf?BYTE+04H,A
0071 120000   F     1632             LCALL   _printf
                    1633     ;       }
                    1634                             ; SOURCE LINE # 362
0074 7800     F     1635             MOV     R0,#LOW (i?355+01H)
0076 06             1636             INC     @R0
0077 E6             1637             MOV     A,@R0
0078 18             1638             DEC     R0
0079 709E           1639             JNZ     ?C0039
007B 06             1640             INC     @R0
007C                1641     ?C0125:
007C 809B           1642             SJMP    ?C0039
007E                1643     ?C0040:
                    1644     ;       for (banks=1; banks<8;banks++)
                    1645                             ; SOURCE LINE # 363
007E 7800     F     1646             MOV     R0,#LOW (banks?357)
0080 7601           1647             MOV     @R0,#01H
0082                1648     ?C0043:
0082 7800     F     1649             MOV     R0,#LOW (banks?357)
0084 E6             1650             MOV     A,@R0
0085 FF             1651             MOV     R7,A
0086 C3             1652             CLR     C
0087 9408           1653             SUBB    A,#08H
0089 4003           1654             JC      $ + 5H
008B 020000   F     1655             LJMP    ?C0050
                    1656     ;       {
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    29

                    1657                             ; SOURCE LINE # 364
                    1658     ;               printf("\n\n --> Bank %02X\n", (u16)banks);
                    1659                             ; SOURCE LINE # 365
008E 7BFF           1660             MOV     R3,#0FFH
0090 7A00     F     1661             MOV     R2,#HIGH (?SC_239)
0092 7900     F     1662             MOV     R1,#LOW (?SC_239)
0094 750000   F     1663             MOV     ?_printf?BYTE+03H,#00H
0097 8F00     F     1664             MOV     ?_printf?BYTE+04H,R7
0099 120000   F     1665             LCALL   _printf
                    1666     ;               addr = BANKADDR_L;
                    1667                             ; SOURCE LINE # 366
009C 7800     F     1668             MOV     R0,#LOW (addr?354)
009E 76A0           1669             MOV     @R0,#0A0H
00A0 08             1670             INC     R0
00A1 7600           1671             MOV     @R0,#00H
                    1672     ;               for (i=0; i<CBANK_LEN; i++)
                    1673                             ; SOURCE LINE # 367
00A3 E4             1674             CLR     A
00A4 08             1675             INC     R0
00A5 F6             1676             MOV     @R0,A
00A6 08             1677             INC     R0
00A7 F6             1678             MOV     @R0,A
00A8                1679     ?C0046:
                    1680     ;               {
                    1681                             ; SOURCE LINE # 368
                    1682     ;                       if ((addr&0x0007)==0)
                    1683                             ; SOURCE LINE # 369
00A8 7800     F     1684             MOV     R0,#LOW (addr?354)
00AA E6             1685             MOV     A,@R0
00AB FE             1686             MOV     R6,A
00AC 08             1687             INC     R0
00AD E6             1688             MOV     A,@R0
00AE FF             1689             MOV     R7,A
00AF 5407           1690             ANL     A,#07H
00B1 700D           1691             JNZ     ?C0049
                    1692     ;                               printf ("\n0x%04X:", addr);
                    1693                             ; SOURCE LINE # 370
00B3 7BFF           1694             MOV     R3,#0FFH
00B5 7A00     F     1695             MOV     R2,#HIGH (?SC_224)
00B7 7900     F     1696             MOV     R1,#LOW (?SC_224)
00B9 8E00     F     1697             MOV     ?_printf?BYTE+03H,R6
00BB 8F00     F     1698             MOV     ?_printf?BYTE+04H,R7
00BD 120000   F     1699             LCALL   _printf
00C0                1700     ?C0049:
                    1701     ; 
                    1702     ;                       addr++;
                    1703                             ; SOURCE LINE # 372
00C0 7800     F     1704             MOV     R0,#LOW (addr?354+01H)
00C2 06             1705             INC     @R0
00C3 E6             1706             MOV     A,@R0
00C4 18             1707             DEC     R0
00C5 7001           1708             JNZ     ?C0126
00C7 06             1709             INC     @R0
00C8                1710     ?C0126:
                    1711     ;                       dbyte = spiflash_ReadByte(SflashAddr);
                    1712                             ; SOURCE LINE # 373
00C8 900000   F     1713             MOV     DPTR,#SflashAddr
00CB 120000   F     1714             LCALL   ?C?LLDXDATA
00CE 120000   F     1715             LCALL   _spiflash_ReadByte
00D1 7800     F     1716             MOV     R0,#LOW (dbyte?356)
00D3 A607           1717             MOV     @R0,AR7
                    1718     ;                       SflashAddr++;
                    1719                             ; SOURCE LINE # 374
00D5 900000   F     1720             MOV     DPTR,#SflashAddr
00D8 120000   F     1721             LCALL   ?C?LLDXDATA
00DB EF             1722             MOV     A,R7
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    30

00DC 2401           1723             ADD     A,#01H
00DE FF             1724             MOV     R7,A
00DF E4             1725             CLR     A
00E0 3E             1726             ADDC    A,R6
00E1 FE             1727             MOV     R6,A
00E2 E4             1728             CLR     A
00E3 3D             1729             ADDC    A,R5
00E4 FD             1730             MOV     R5,A
00E5 E4             1731             CLR     A
00E6 3C             1732             ADDC    A,R4
00E7 FC             1733             MOV     R4,A
00E8 900000   F     1734             MOV     DPTR,#SflashAddr
00EB 120000   F     1735             LCALL   ?C?LSTXDATA
                    1736     ;                       printf (" %02X", (u16)dbyte);
                    1737                             ; SOURCE LINE # 375
00EE 7BFF           1738             MOV     R3,#0FFH
00F0 7A00     F     1739             MOV     R2,#HIGH (?SC_233)
00F2 7900     F     1740             MOV     R1,#LOW (?SC_233)
00F4 7800     F     1741             MOV     R0,#LOW (dbyte?356)
00F6 E6             1742             MOV     A,@R0
00F7 750000   F     1743             MOV     ?_printf?BYTE+03H,#00H
00FA F500     F     1744             MOV     ?_printf?BYTE+04H,A
00FC 120000   F     1745             LCALL   _printf
                    1746     ;               }
                    1747                             ; SOURCE LINE # 376
00FF 7800     F     1748             MOV     R0,#LOW (i?355+01H)
0101 06             1749             INC     @R0
0102 E6             1750             MOV     A,@R0
0103 18             1751             DEC     R0
0104 7001           1752             JNZ     ?C0127
0106 06             1753             INC     @R0
0107                1754     ?C0127:
0107 C3             1755             CLR     C
0108 7800     F     1756             MOV     R0,#LOW (i?355)
010A E6             1757             MOV     A,@R0
010B 9460           1758             SUBB    A,#060H
010D 4099           1759             JC      ?C0046
                    1760     ;       }
                    1761                             ; SOURCE LINE # 377
010F                1762     ?C0045:
010F 7800     F     1763             MOV     R0,#LOW (banks?357)
0111 06             1764             INC     @R0
0112 020000   F     1765             LJMP    ?C0043
                    1766     ;       return;
                    1767     ; }
                    1768                             ; SOURCE LINE # 379
0115                1769     ?C0050:
0115 22             1770             RET     
                    1771     ; END OF dump_BackupCode
                    1772     
                    1773     ; #endif
                    1774     ; #ifdef PROGRAM_CONFIGURATION
                    1775     ; //***************************************************************
                    1776     ; // Program_Config_Data() is to program configuration data into spi flash at the address
                    1777     ; // 0x00100000
                    1778     ; //***************************************************************
                    1779     ; void Program_Config_Data()
                    1780     ; {
                    1781     ;       char idata c;
                    1782     ;       u32 idata ConfigAddr;
                    1783     ;       u8 idata HexVal;
                    1784     ;       u8 idata FirstChar = 0;
                    1785     ;       DisableWrCRam ();
                    1786     ;       printf("\n **** PROGRAM CONFIGURATION DATA ****\n");
                    1787     ;       printf("\n --> Erase configuration data Y/N?: ");
                    1788     ;       c = _get1char();
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    31

                    1789     ;       TI = 0;
                    1790     ;       SBUF = c;
                    1791     ;       while (TI==0);
                    1792     ;       if (c!='Y')
                    1793     ;       {
                    1794     ;               c = '1';
                    1795     ;               goto AbortPrgConfigData;
                    1796     ;       }
                    1797     ;       spiflash_eraseConfigMem();
                    1798     ;       spiflash_wrsr_unlock((u8)1);
                    1799     ;       printf("\n --> Waiting for configuration data (equal or less than 512 bytes, ended 
                             by $): ");   
                    1800     ;       ConfigAddr = GVTY_CONFIG_DATA_ADDR;
                    1801     ; Read_Config_data:
                    1802     ;       c = _get1char();
                    1803     ;       switch (c)
                    1804     ;       {       
                    1805     ;       case 27:
                    1806     ;               goto AbortPrgConfigData;
                    1807     ;               break;
                    1808     ;       case '$':
                    1809     ;               goto EndPrgConfigData;
                    1810     ;               break;
                    1811     ;       default:
                    1812     ;               if (isxdigit(c))
                    1813     ;               {
                    1814     ;                       if (FirstChar++==0)
                    1815     ;                       {
                    1816     ;                               HexVal = (u8)((Asc2Hex((u8*)&c))<<4);
                    1817     ;                       }
                    1818     ;                       else 
                    1819     ;                       {
                    1820     ;                               HexVal |= Asc2Hex((u8*)&c);
                    1821     ;                               spiflash_WriteByte(ConfigAddr++,HexVal);
                    1822     ;                               if ((ConfigAddr&0x7)==0)
                    1823     ;                                       printf(".");
                    1824     ;                               FirstChar=0;
                    1825     ;                       }
                    1826     ;               }
                    1827     ;               break;
                    1828     ;       }       
                    1829     ;       if (ConfigAddr==(GVTY_CONFIG_END_ADDR+1))
                    1830     ;       {
                    1831     ;               goto EndPrgConfigData;
                    1832     ;       } else {
                    1833     ;               goto Read_Config_data;
                    1834     ;       }
                    1835     ; AbortPrgConfigData:
                    1836     ;       printf ("\n\n --> Abort programming configuration data\n");
                    1837     ;       goto CloseConfigProgramming;
                    1838     ; EndPrgConfigData:
                    1839     ;       printf ("\n\n --> Finish programming configuration data\n");
                    1840     ; CloseConfigProgramming:
                    1841     ;       spiflash_wrsr_unlock(0);
                    1842     ;       return;
                    1843     ; }
                    1844     ; //***************************************************************
                    1845     ; //Load_Config_Data();
                    1846     ; //Load configuration data into the data ram @ 0xE000
                    1847     ; //Input:
                    1848     ; //    LoadConfig = 1: Load configuration data to data ram
                    1849     ; //                       = 0: Dump configuration data onto screen
                    1850     ; //***************************************************************
                    1851     ; void Load_Config_Data(u8 LoadConfig)
                    1852     ; {
                    1853     ;       u32 idata Temp;
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    32

                    1854     ;       u8 idata c, d, e;
                    1855     ;       if (LoadConfig==0)
                    1856     ;               printf("\n --> Dump configuration data\n");
                    1857     ;       else
                    1858     ;               printf("\n --> Loading configuration data ");
                    1859     ;       for (Temp=0;Temp<512;Temp++)
                    1860     ;       {
                    1861     ;               c = spiflash_ReadByte((u32)(GVTY_CONFIG_DATA_ADDR+Temp));
                    1862     ;               d = spiflash_ReadByte((u32)(GVTY_CONFIG_DATA_ADDR+Temp+1));
                    1863     ;               e = spiflash_ReadByte((u32)(GVTY_CONFIG_DATA_ADDR+Temp+2));
                    1864     ;               if (c==0xFF && d==0xFF & e==0xFF) 
                    1865     ;                       break;
                    1866     ;               if (LoadConfig==0)
                    1867     ;               {                       
                    1868     ;                       printf("\n@0x%03X: 0x%02X",(u16)(0xFFFF&Temp), (u16)(0xFF&c));
                    1869     ;               }
                    1870     ;               else
                    1871     ;               {
                    1872     ;                       *(u8 xdata *)((u16)(0xFFFF&(GVTY_CONFIG_DRAM_ADDR + Temp))) = c;
                    1873     ;                       if (Temp&0x7==0)
                    1874     ;                               printf(".");
                    1875     ;               }
                    1876     ;       }
                    1877     ;       printf("\n");
                    1878     ;       return;
                    1879     ; }
                    1880     ; #endif
                    1881     ; //***************************************************************
                    1882     ; // salutil_Big2LittleEndian(u32)
                    1883     ; // Sofware Abstraction Utility to convert a 32 bit big endian to 32 bit little endian or 
                             vs
                    1884     ; //***************************************************************
                    1885     ; u32 swUtil_SwapEndian(u32 var32)
                    1886     
----                1887             RSEG  ?PR?_swUtil_SwapEndian?SPIFLASH
0000                1888     _swUtil_SwapEndian:
                    1889             USING   0
                    1890                             ; SOURCE LINE # 492
0000 8F00     F     1891             MOV     var32?458+03H,R7
0002 8E00     F     1892             MOV     var32?458+02H,R6
0004 8D00     F     1893             MOV     var32?458+01H,R5
0006 8C00     F     1894             MOV     var32?458,R4
                    1895     ; {
                    1896                             ; SOURCE LINE # 493
                    1897     ;       return ((var32&0x000000FF)<<24 |
                    1898                             ; SOURCE LINE # 494
0008 E4             1899             CLR     A
0009 FF             1900             MOV     R7,A
000A E4             1901             CLR     A
000B FD             1902             MOV     R5,A
000C FC             1903             MOV     R4,A
000D 7808           1904             MOV     R0,#08H
000F 120000   F     1905             LCALL   ?C?LSHL
0012 C004           1906             PUSH    AR4
0014 C005           1907             PUSH    AR5
0016 C006           1908             PUSH    AR6
0018 C007           1909             PUSH    AR7
001A E500     F     1910             MOV     A,var32?458+03H
001C FF             1911             MOV     R7,A
001D E4             1912             CLR     A
001E FE             1913             MOV     R6,A
001F FD             1914             MOV     R5,A
0020 FC             1915             MOV     R4,A
0021 7818           1916             MOV     R0,#018H
0023 120000   F     1917             LCALL   ?C?LSHL
0026 D003           1918             POP     AR3
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    33

0028 D002           1919             POP     AR2
002A D001           1920             POP     AR1
002C D000           1921             POP     AR0
002E 120000   F     1922             LCALL   ?C?LOR
0031 C004           1923             PUSH    AR4
0033 C005           1924             PUSH    AR5
0035 C006           1925             PUSH    AR6
0037 C007           1926             PUSH    AR7
0039 E4             1927             CLR     A
003A FF             1928             MOV     R7,A
003B FE             1929             MOV     R6,A
003C E500     F     1930             MOV     A,var32?458+01H
003E FD             1931             MOV     R5,A
003F E4             1932             CLR     A
0040 FC             1933             MOV     R4,A
0041 7808           1934             MOV     R0,#08H
0043 120000   F     1935             LCALL   ?C?ULSHR
0046 D003           1936             POP     AR3
0048 D002           1937             POP     AR2
004A D001           1938             POP     AR1
004C D000           1939             POP     AR0
004E 120000   F     1940             LCALL   ?C?LOR
0051 C004           1941             PUSH    AR4
0053 C005           1942             PUSH    AR5
0055 C006           1943             PUSH    AR6
0057 C007           1944             PUSH    AR7
0059 E4             1945             CLR     A
005A FF             1946             MOV     R7,A
005B FE             1947             MOV     R6,A
005C FD             1948             MOV     R5,A
005D E500     F     1949             MOV     A,var32?458
005F FC             1950             MOV     R4,A
0060 7818           1951             MOV     R0,#018H
0062 120000   F     1952             LCALL   ?C?ULSHR
0065 D003           1953             POP     AR3
0067 D002           1954             POP     AR2
0069 D001           1955             POP     AR1
006B D000           1956             POP     AR0
006D 120000   F     1957             LCALL   ?C?LOR
                    1958     ;                       (var32&0x0000FF00)<<8 |
                    1959     ;                       (var32&0x00FF0000)>>8 |
                    1960     ;                       (var32&0xFF000000)>>24);
                    1961     ; }             
                    1962                             ; SOURCE LINE # 498
0070                1963     ?C0051:
0070 22             1964             RET     
                    1965     ; END OF _swUtil_SwapEndian
                    1966     
                    1967     ; //---------------------------------------------------------------------------
                    1968     ; // void memUtil_ClearEram(u8 SetData)
                    1969     ; // Description: to clear ERAM from 2100 to 0xFFFF
                    1970     ; //---------------------------------------------------------------------------
                    1971     ; void memUtil_ClearEram(u8 SetData)
                    1972     
----                1973             RSEG  ?PR?_memUtil_ClearEram?SPIFLASH
0000                1974     _memUtil_ClearEram:
                    1975             USING   0
                    1976                             ; SOURCE LINE # 503
                    1977     ;---- Variable 'SetData?559' assigned to Register 'R7' ----
                    1978     ; {
                    1979                             ; SOURCE LINE # 504
                    1980     ;       Uart2EramAddr=0x2100;
                    1981                             ; SOURCE LINE # 505
0000 900000   F     1982             MOV     DPTR,#Uart2EramAddr
0003 7421           1983             MOV     A,#021H
0005 F0             1984             MOVX    @DPTR,A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    34

0006 A3             1985             INC     DPTR
0007 E4             1986             CLR     A
0008 F0             1987             MOVX    @DPTR,A
                    1988     ; Erase_Ram:
                    1989                             ; SOURCE LINE # 506
0009                1990     ?_memUtil_ClearEram?Erase_Ram:
                    1991     ;       *(u8 xdata *)Uart2EramAddr = SetData;
                    1992                             ; SOURCE LINE # 507
0009 900000   F     1993             MOV     DPTR,#Uart2EramAddr
000C E0             1994             MOVX    A,@DPTR
000D FC             1995             MOV     R4,A
000E A3             1996             INC     DPTR
000F E0             1997             MOVX    A,@DPTR
0010 FD             1998             MOV     R5,A
0011 F582           1999             MOV     DPL,A
0013 8C83           2000             MOV     DPH,R4
0015 EF             2001             MOV     A,R7
0016 F0             2002             MOVX    @DPTR,A
                    2003     ;       if (Uart2EramAddr<0xFFFF){
                    2004                             ; SOURCE LINE # 508
0017 C3             2005             CLR     C
0018 ED             2006             MOV     A,R5
0019 94FF           2007             SUBB    A,#0FFH
001B EC             2008             MOV     A,R4
001C 94FF           2009             SUBB    A,#0FFH
001E 500C           2010             JNC     ?C0054
                    2011     ;               Uart2EramAddr = Uart2EramAddr+1;
                    2012                             ; SOURCE LINE # 509
0020 900000   F     2013             MOV     DPTR,#Uart2EramAddr
0023 E4             2014             CLR     A
0024 75F001         2015             MOV     B,#01H
0027 120000   F     2016             LCALL   ?C?IILDX
                    2017     ;               goto Erase_Ram;
                    2018                             ; SOURCE LINE # 510
002A 80DD           2019             SJMP    ?_memUtil_ClearEram?Erase_Ram
                    2020     ;       }
                    2021                             ; SOURCE LINE # 511
                    2022     ;       return;
                    2023     ; }
                    2024                             ; SOURCE LINE # 513
002C                2025     ?C0054:
002C 22             2026             RET     
                    2027     ; END OF _memUtil_ClearEram
                    2028     
                    2029     ; 
                    2030     ; //---------------------------------------------------------------------------
                    2031     ; //void Download_Uart2Sflash()
                    2032     ; //Handle the task to download code from UART to Sflash
                    2033     ; //---------------------------------------------------------------------------
                    2034     ; #if 1
                    2035     ; void Download_Uart2Sflash(u8 auto_backup)
                    2036     
----                2037             RSEG  ?PR?_Download_Uart2Sflash?SPIFLASH
0000                2038     _Download_Uart2Sflash:
                    2039             USING   0
                    2040                             ; SOURCE LINE # 520
0000 8F00     F     2041             MOV     auto_backup?660,R7
                    2042     ; {
                    2043                             ; SOURCE LINE # 521
                    2044     ;       u8 idata c;
                    2045     ;       u16 idata mem_crc16 = 0;
                    2046                             ; SOURCE LINE # 523
0002 E4             2047             CLR     A
0003 7800     F     2048             MOV     R0,#LOW (mem_crc16?662)
0005 F6             2049             MOV     @R0,A
0006 08             2050             INC     R0
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    35

0007 F6             2051             MOV     @R0,A
                    2052     ;       u16 idata addr_count = 0;
                    2053                             ; SOURCE LINE # 524
0008 08             2054             INC     R0
0009 F6             2055             MOV     @R0,A
000A 08             2056             INC     R0
000B F6             2057             MOV     @R0,A
                    2058     ;       u16 idata max_addr_count;
                    2059     ;       u8 idata temp_data;
                    2060     ;       u8 idata flash_verify_error = 0;
                    2061                             ; SOURCE LINE # 527
000C 7800     F     2062             MOV     R0,#LOW (flash_verify_error?666)
000E F6             2063             MOV     @R0,A
                    2064     ;       //u16 idata eram_addr;
                    2065     ;       //u8 idata dByte;
                    2066     ;       printf("\n --> Program SFLASH Y/N? :");
                    2067                             ; SOURCE LINE # 530
000F 7BFF           2068             MOV     R3,#0FFH
0011 7A00     F     2069             MOV     R2,#HIGH (?SC_280)
0013 7900     F     2070             MOV     R1,#LOW (?SC_280)
0015 120000   F     2071             LCALL   _printf
                    2072     ;       c = _get1char(); 
                    2073                             ; SOURCE LINE # 531
0018 120000   F     2074             LCALL   _get1char
001B 7800     F     2075             MOV     R0,#LOW (c?661)
001D EF             2076             MOV     A,R7
001E F6             2077             MOV     @R0,A
                    2078     ;       if (c!='Y')
                    2079                             ; SOURCE LINE # 532
001F 6459           2080             XRL     A,#059H
0021 6003           2081             JZ      ?C0055
                    2082     ;       {
                    2083                             ; SOURCE LINE # 533
                    2084     ;               c = '1';
                    2085                             ; SOURCE LINE # 534
0023 7631           2086             MOV     @R0,#031H
0025 22             2087             RET     
                    2088     ;               return;
                    2089     ;       }
                    2090                             ; SOURCE LINE # 536
0026                2091     ?C0055:
                    2092     ;       c = 0;
                    2093                             ; SOURCE LINE # 537
0026 E4             2094             CLR     A
0027 7800     F     2095             MOV     R0,#LOW (c?661)
0029 F6             2096             MOV     @R0,A
                    2097     ;       printf("\n --> Delete current code Y/N? :");
                    2098                             ; SOURCE LINE # 538
002A 7BFF           2099             MOV     R3,#0FFH
002C 7A00     F     2100             MOV     R2,#HIGH (?SC_308)
002E 7900     F     2101             MOV     R1,#LOW (?SC_308)
0030 120000   F     2102             LCALL   _printf
                    2103     ;       c = _get1char(); 
                    2104                             ; SOURCE LINE # 539
0033 120000   F     2105             LCALL   _get1char
0036 7800     F     2106             MOV     R0,#LOW (c?661)
0038 EF             2107             MOV     A,R7
0039 F6             2108             MOV     @R0,A
                    2109     ;       if (c!='Y')
                    2110                             ; SOURCE LINE # 540
003A 6459           2111             XRL     A,#059H
003C 6003           2112             JZ      ?C0057
                    2113     ;       {
                    2114                             ; SOURCE LINE # 541
                    2115     ;               c = '1';
                    2116                             ; SOURCE LINE # 542
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    36

003E 7631           2117             MOV     @R0,#031H
0040 22             2118             RET     
                    2119     ;               return;
                    2120     ;       }
                    2121                             ; SOURCE LINE # 544
0041                2122     ?C0057:
                    2123     ;       spiflash_wrsr_unlock(1);
                    2124                             ; SOURCE LINE # 545
0041 7F01           2125             MOV     R7,#01H
0043 120000   F     2126             LCALL   _spiflash_wrsr_unlock
                    2127     ;       spiflash_eraseLower256k();
                    2128                             ; SOURCE LINE # 546
0046 120000   F     2129             LCALL   spiflash_eraseLower256k
                    2130     ;       EnableWrCRam();
                    2131                             ; SOURCE LINE # 547
0049 120000   F     2132             LCALL   EnableWrCRam
                    2133     ;       
                    2134     ;       c = 0;
                    2135                             ; SOURCE LINE # 549
004C E4             2136             CLR     A
004D 7800     F     2137             MOV     R0,#LOW (c?661)
004F F6             2138             MOV     @R0,A
                    2139     ; Program_Next_bank:
                    2140                             ; SOURCE LINE # 550
0050                2141     ?_Download_Uart2Sflash?Program_Next_bank:
                    2142     ;       {
                    2143                             ; SOURCE LINE # 551
                    2144     ;               
                    2145     ;               printf("\n\n ##### Download code for - BANK-%02X #####\n", (u16)c);
                    2146                             ; SOURCE LINE # 553
0050 7BFF           2147             MOV     R3,#0FFH
0052 7A00     F     2148             MOV     R2,#HIGH (?SC_341)
0054 7900     F     2149             MOV     R1,#LOW (?SC_341)
0056 7800     F     2150             MOV     R0,#LOW (c?661)
0058 E6             2151             MOV     A,@R0
0059 750000   F     2152             MOV     ?_printf?BYTE+03H,#00H
005C F500     F     2153             MOV     ?_printf?BYTE+04H,A
005E 120000   F     2154             LCALL   _printf
                    2155     ;               BANKSEL = c;
                    2156                             ; SOURCE LINE # 554
0061 7800     F     2157             MOV     R0,#LOW (c?661)
0063 E6             2158             MOV     A,@R0
0064 F59F           2159             MOV     BANKSEL,A
                    2160     ;               memUtil_ClearEram(SetDataFF);
                    2161                             ; SOURCE LINE # 555
0066 7FFF           2162             MOV     R7,#0FFH
0068 120000   F     2163             LCALL   _memUtil_ClearEram
                    2164     ;               Uart2EramAddr = 0;
                    2165                             ; SOURCE LINE # 556
006B E4             2166             CLR     A
006C 900000   F     2167             MOV     DPTR,#Uart2EramAddr
006F F0             2168             MOVX    @DPTR,A
0070 A3             2169             INC     DPTR
0071 F0             2170             MOVX    @DPTR,A
                    2171     ;               
                    2172     ; #ifndef IDATA_OPT             
                    2173     ;               ParseHexRecord(&ErrCnt[0], &ProgCnt[0]);
                    2174     ; 
                    2175     ; #else
                    2176     ;               ParseHexRecord(&ErrCnt[0]);
                    2177                             ; SOURCE LINE # 562
0072 7F00     F     2178             MOV     R7,#LOW (ErrCnt)
0074 120000   F     2179             LCALL   _ParseHexRecord
                    2180     ; #endif
                    2181     ;               if (c==0){
                    2182                             ; SOURCE LINE # 564
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    37

0077 7800     F     2183             MOV     R0,#LOW (c?661)
0079 E6             2184             MOV     A,@R0
007A FB             2185             MOV     R3,A
007B 7011           2186             JNZ     ?C0059
                    2187     ;                       SflashAddr = (u32)(CRAM_START - SFLASH_CRAM_OFFSET);
                    2188                             ; SOURCE LINE # 565
007D 900000   F     2189             MOV     DPTR,#SflashAddr
0080 120000   F     2190             LCALL   ?C?LSTKXDATA
0083 00             2191             DB      00H
0084 00             2192             DB      00H
0085 01             2193             DB      01H
0086 00             2194             DB      00H
                    2195     ;                       Eram2SflashAddr = (u16)CRAM_START;
                    2196                             ; SOURCE LINE # 566
0087 900000   F     2197             MOV     DPTR,#Eram2SflashAddr
008A 7421           2198             MOV     A,#021H
                    2199     ;                       //eram_addr = (u16)CRAM_START;
                    2200     ;               } else {
                    2201                             ; SOURCE LINE # 568
008C 8030           2202             SJMP    ?C0133
008E                2203     ?C0059:
                    2204     ;                       SflashAddr = (u32)(((c-1)*6)+0x10-0x02);
                    2205                             ; SOURCE LINE # 569
008E EB             2206             MOV     A,R3
008F FF             2207             MOV     R7,A
0090 7E00           2208             MOV     R6,#00H
0092 7C00           2209             MOV     R4,#00H
0094 7D06           2210             MOV     R5,#06H
0096 120000   F     2211             LCALL   ?C?IMUL
0099 EF             2212             MOV     A,R7
009A 2408           2213             ADD     A,#08H
009C FF             2214             MOV     R7,A
009D E4             2215             CLR     A
009E 3E             2216             ADDC    A,R6
009F FE             2217             MOV     R6,A
00A0 E4             2218             CLR     A
00A1 FD             2219             MOV     R5,A
00A2 900000   F     2220             MOV     DPTR,#SflashAddr
00A5 120000   F     2221             LCALL   ?C?LSTXDATA
                    2222     ;                       SflashAddr = SflashAddr<<12;
                    2223                             ; SOURCE LINE # 570
00A8 900000   F     2224             MOV     DPTR,#SflashAddr
00AB 120000   F     2225             LCALL   ?C?LLDXDATA
00AE 780C           2226             MOV     R0,#0CH
00B0 120000   F     2227             LCALL   ?C?LSHL
00B3 900000   F     2228             MOV     DPTR,#SflashAddr
00B6 120000   F     2229             LCALL   ?C?LSTXDATA
                    2230     ;                       Eram2SflashAddr = BANKADDR_L;
                    2231                             ; SOURCE LINE # 571
00B9 900000   F     2232             MOV     DPTR,#Eram2SflashAddr
00BC 74A0           2233             MOV     A,#0A0H
00BE                2234     ?C0133:
00BE F0             2235             MOVX    @DPTR,A
00BF A3             2236             INC     DPTR
00C0 E4             2237             CLR     A
00C1 F0             2238             MOVX    @DPTR,A
                    2239     ;                       //eram_addr = BANKADDR_L;
                    2240     ;               }
                    2241                             ; SOURCE LINE # 573
00C2                2242     ?C0060:
                    2243     ;               if (ErrCnt[4]==0){
                    2244                             ; SOURCE LINE # 574
00C2 7800     F     2245             MOV     R0,#LOW (ErrCnt+09H)
00C4 E6             2246             MOV     A,@R0
00C5 18             2247             DEC     R0
00C6 46             2248             ORL     A,@R0
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    38

00C7 6003           2249             JZ      $ + 5H
00C9 020000   F     2250             LJMP    ?C0061
                    2251     ;                       //printf("\n Calc CRC"); // 0xdf00 = (COM_BANK0_LEN - (CRAM_START -
                              SFLASH_CRAM_OFFSET)) +1
                    2252     ;                       if(c==0)
                    2253                             ; SOURCE LINE # 576
00CC 7800     F     2254             MOV     R0,#LOW (c?661)
00CE E6             2255             MOV     A,@R0
00CF 7800     F     2256             MOV     R0,#LOW (max_addr_count?664)
00D1 7006           2257             JNZ     ?C0062
                    2258     ;                               max_addr_count = 0xDF00;
                    2259                             ; SOURCE LINE # 577
00D3 76DF           2260             MOV     @R0,#0DFH
00D5 08             2261             INC     R0
00D6 F6             2262             MOV     @R0,A
00D7 8005           2263             SJMP    ?C0063
00D9                2264     ?C0062:
                    2265     ;                       else
                    2266     ;                               max_addr_count = CBANK_LEN;
                    2267                             ; SOURCE LINE # 579
00D9 7660           2268             MOV     @R0,#060H
00DB 08             2269             INC     R0
00DC 7600           2270             MOV     @R0,#00H
00DE                2271     ?C0063:
                    2272     ; 
                    2273     ;                       mem_crc16 = (u16)0;
                    2274                             ; SOURCE LINE # 581
00DE E4             2275             CLR     A
00DF 7800     F     2276             MOV     R0,#LOW (mem_crc16?662)
00E1 F6             2277             MOV     @R0,A
00E2 08             2278             INC     R0
00E3 F6             2279             MOV     @R0,A
                    2280     ;                       for(addr_count = 0;addr_count <  max_addr_count ;addr_count++)
                    2281                             ; SOURCE LINE # 582
00E4 08             2282             INC     R0
00E5 F6             2283             MOV     @R0,A
00E6 08             2284             INC     R0
00E7 F6             2285             MOV     @R0,A
00E8                2286     ?C0064:
00E8 7800     F     2287             MOV     R0,#LOW (addr_count?663)
00EA E6             2288             MOV     A,@R0
00EB FC             2289             MOV     R4,A
00EC 08             2290             INC     R0
00ED E6             2291             MOV     A,@R0
00EE FD             2292             MOV     R5,A
00EF C3             2293             CLR     C
00F0 7800     F     2294             MOV     R0,#LOW (max_addr_count?664+01H)
00F2 96             2295             SUBB    A,@R0
00F3 EC             2296             MOV     A,R4
00F4 18             2297             DEC     R0
00F5 96             2298             SUBB    A,@R0
00F6 502B           2299             JNC     ?C0065
                    2300     ;                       {
                    2301                             ; SOURCE LINE # 583
                    2302     ; #if 0                 
                    2303     ;                               dByte = *(u8 xdata *)(Eram2SflashAddr + addr_count);
                    2304     ;                               if(c==1)
                    2305     ;                               {
                    2306     ;                                       if ((eram_addr&0x0007)==0)
                    2307     ;                                               printf ("\n0x%04X:", eram_addr);
                    2308     ; 
                    2309     ;                                       printf (" %02bX", dByte);
                    2310     ;                                       eram_addr++;
                    2311     ;                               }
                    2312     ;                               mem_crc16 = crc_ccitt_update(mem_crc16,dByte);
                    2313     ; #endif
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    39

                    2314     ;                               mem_crc16 = crc_ccitt_update(mem_crc16,*(u8 xdata *)(Eram2S
                             flashAddr + addr_count));
                    2315                             ; SOURCE LINE # 596
00F8 7800     F     2316             MOV     R0,#LOW (mem_crc16?662)
00FA E6             2317             MOV     A,@R0
00FB FE             2318             MOV     R6,A
00FC 08             2319             INC     R0
00FD E6             2320             MOV     A,@R0
00FE FF             2321             MOV     R7,A
00FF 900000   F     2322             MOV     DPTR,#Eram2SflashAddr+01H
0102 E0             2323             MOVX    A,@DPTR
0103 2D             2324             ADD     A,R5
0104 FD             2325             MOV     R5,A
0105 900000   F     2326             MOV     DPTR,#Eram2SflashAddr
0108 E0             2327             MOVX    A,@DPTR
0109 3C             2328             ADDC    A,R4
010A 8D82           2329             MOV     DPL,R5
010C F583           2330             MOV     DPH,A
010E E0             2331             MOVX    A,@DPTR
010F FD             2332             MOV     R5,A
0110 120000   F     2333             LCALL   _crc_ccitt_update
0113 18             2334             DEC     R0
0114 A606           2335             MOV     @R0,AR6
0116 08             2336             INC     R0
0117 A607           2337             MOV     @R0,AR7
                    2338     ;                       }
                    2339                             ; SOURCE LINE # 597
0119 7800     F     2340             MOV     R0,#LOW (addr_count?663+01H)
011B 06             2341             INC     @R0
011C E6             2342             MOV     A,@R0
011D 18             2343             DEC     R0
011E 70C8           2344             JNZ     ?C0064
0120 06             2345             INC     @R0
0121                2346     ?C0128:
0121 80C5           2347             SJMP    ?C0064
0123                2348     ?C0065:
                    2349     ;                       
                    2350     ;                       printf("\n --> Writing to sflash ");
                    2351                             ; SOURCE LINE # 599
0123 7BFF           2352             MOV     R3,#0FFH
0125 7A00     F     2353             MOV     R2,#HIGH (?SC_387)
0127 7900     F     2354             MOV     R1,#LOW (?SC_387)
0129 120000   F     2355             LCALL   _printf
                    2356     ; Cont_ProgSflash:
                    2357                             ; SOURCE LINE # 600
012C                2358     ?_Download_Uart2Sflash?Cont_ProgSflash:
                    2359     ;                       spiflash_WriteByte(SflashAddr, *(u8 xdata *)Eram2SflashAddr);
                    2360                             ; SOURCE LINE # 601
012C 900000   F     2361             MOV     DPTR,#SflashAddr
012F 120000   F     2362             LCALL   ?C?LLDXDATA
0132 900000   F     2363             MOV     DPTR,#Eram2SflashAddr
0135 E0             2364             MOVX    A,@DPTR
0136 FA             2365             MOV     R2,A
0137 A3             2366             INC     DPTR
0138 E0             2367             MOVX    A,@DPTR
0139 F582           2368             MOV     DPL,A
013B 8A83           2369             MOV     DPH,R2
013D E0             2370             MOVX    A,@DPTR
013E F500     F     2371             MOV     ?_spiflash_WriteByte?BYTE+04H,A
0140 120000   F     2372             LCALL   _spiflash_WriteByte
                    2373     ;                       temp_data = spiflash_ReadByte(SflashAddr);
                    2374                             ; SOURCE LINE # 602
0143 900000   F     2375             MOV     DPTR,#SflashAddr
0146 120000   F     2376             LCALL   ?C?LLDXDATA
0149 120000   F     2377             LCALL   _spiflash_ReadByte
014C 7800     F     2378             MOV     R0,#LOW (temp_data?665)
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    40

014E EF             2379             MOV     A,R7
014F F6             2380             MOV     @R0,A
                    2381     ;                       if (temp_data != *(u8 xdata *)Eram2SflashAddr){
                    2382                             ; SOURCE LINE # 603
0150 900000   F     2383             MOV     DPTR,#Eram2SflashAddr
0153 E0             2384             MOVX    A,@DPTR
0154 FC             2385             MOV     R4,A
0155 A3             2386             INC     DPTR
0156 E0             2387             MOVX    A,@DPTR
0157 F582           2388             MOV     DPL,A
0159 8C83           2389             MOV     DPH,R4
015B E0             2390             MOVX    A,@DPTR
015C 6F             2391             XRL     A,R7
015D 6016           2392             JZ      ?C0068
                    2393     ;                               printf("\n\n *** SFLASH programming error @ 0x%08lX - try a
                             gain\n\n",SflashAddr);
                    2394                             ; SOURCE LINE # 604
015F 7BFF           2395             MOV     R3,#0FFH
0161 7A00     F     2396             MOV     R2,#HIGH (?SC_412)
0163 7900     F     2397             MOV     R1,#LOW (?SC_412)
0165 900000   F     2398             MOV     DPTR,#SflashAddr
0168 120000   F     2399             LCALL   ?C?LLDXDATA
016B 8F00     F     2400             MOV     ?_printf?BYTE+06H,R7
016D 8E00     F     2401             MOV     ?_printf?BYTE+05H,R6
016F 8D00     F     2402             MOV     ?_printf?BYTE+04H,R5
0171 8C00     F     2403             MOV     ?_printf?BYTE+03H,R4
                    2404     ;                               flash_verify_error = 1;
                    2405                             ; SOURCE LINE # 605
                    2406     ;                               goto End_sflash_programming;
                    2407                             ; SOURCE LINE # 606
0173 8050           2408             SJMP    ?C0134
                    2409     ;                       }
                    2410                             ; SOURCE LINE # 607
0175                2411     ?C0068:
                    2412     ;                       if ((Eram2SflashAddr & 0xFF)==0){
                    2413                             ; SOURCE LINE # 608
0175 900000   F     2414             MOV     DPTR,#Eram2SflashAddr+01H
0178 E0             2415             MOVX    A,@DPTR
0179 7009           2416             JNZ     ?C0070
                    2417     ;                               printf(".");
                    2418                             ; SOURCE LINE # 609
017B 7BFF           2419             MOV     R3,#0FFH
017D 7A00     F     2420             MOV     R2,#HIGH (?SC_28)
017F 7900     F     2421             MOV     R1,#LOW (?SC_28)
0181 120000   F     2422             LCALL   _printf
                    2423     ;                       }
                    2424                             ; SOURCE LINE # 610
0184                2425     ?C0070:
                    2426     ;                       if (Eram2SflashAddr<Uart2EramAddr){
                    2427                             ; SOURCE LINE # 611
0184 900000   F     2428             MOV     DPTR,#Uart2EramAddr
0187 E0             2429             MOVX    A,@DPTR
0188 FE             2430             MOV     R6,A
0189 A3             2431             INC     DPTR
018A E0             2432             MOVX    A,@DPTR
018B FF             2433             MOV     R7,A
018C C3             2434             CLR     C
018D 900000   F     2435             MOV     DPTR,#Eram2SflashAddr+01H
0190 E0             2436             MOVX    A,@DPTR
0191 9F             2437             SUBB    A,R7
0192 900000   F     2438             MOV     DPTR,#Eram2SflashAddr
0195 E0             2439             MOVX    A,@DPTR
0196 9E             2440             SUBB    A,R6
0197 5031           2441             JNC     ?_Download_Uart2Sflash?Check_next_bank
                    2442     ;                               SflashAddr++;
                    2443                             ; SOURCE LINE # 612
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    41

0199 900000   F     2444             MOV     DPTR,#SflashAddr
019C 120000   F     2445             LCALL   ?C?LLDXDATA
019F EF             2446             MOV     A,R7
01A0 2401           2447             ADD     A,#01H
01A2 FF             2448             MOV     R7,A
01A3 E4             2449             CLR     A
01A4 3E             2450             ADDC    A,R6
01A5 FE             2451             MOV     R6,A
01A6 E4             2452             CLR     A
01A7 3D             2453             ADDC    A,R5
01A8 FD             2454             MOV     R5,A
01A9 E4             2455             CLR     A
01AA 3C             2456             ADDC    A,R4
01AB FC             2457             MOV     R4,A
01AC 900000   F     2458             MOV     DPTR,#SflashAddr
01AF 120000   F     2459             LCALL   ?C?LSTXDATA
                    2460     ;                               Eram2SflashAddr++;
                    2461                             ; SOURCE LINE # 613
01B2 900000   F     2462             MOV     DPTR,#Eram2SflashAddr
01B5 E4             2463             CLR     A
01B6 75F001         2464             MOV     B,#01H
01B9 120000   F     2465             LCALL   ?C?IILDX
                    2466     ;                               goto Cont_ProgSflash;
                    2467                             ; SOURCE LINE # 614
01BC 020000   F     2468             LJMP    ?_Download_Uart2Sflash?Cont_ProgSflash
                    2469     ;                       } else {
                    2470                             ; SOURCE LINE # 615
                    2471     ;                               goto Check_next_bank;
                    2472                             ; SOURCE LINE # 616
                    2473     ;                       }
                    2474                             ; SOURCE LINE # 617
                    2475     ;               } else {
                    2476                             ; SOURCE LINE # 618
01BF                2477     ?C0061:
                    2478     ;                       printf("\n *** ERROR downloading from UART to RAM");
                    2479                             ; SOURCE LINE # 619
01BF 7BFF           2480             MOV     R3,#0FFH
01C1 7A00     F     2481             MOV     R2,#HIGH (?SC_468)
01C3 7900     F     2482             MOV     R1,#LOW (?SC_468)
01C5                2483     ?C0134:
01C5 120000   F     2484             LCALL   _printf
                    2485     ;                       flash_verify_error = 1;
                    2486                             ; SOURCE LINE # 620
                    2487     ;                       goto End_sflash_programming;
                    2488                             ; SOURCE LINE # 621
01C8 8067           2489             SJMP    ?C0136
                    2490     ;               }
                    2491                             ; SOURCE LINE # 622
                    2492     ;       }
                    2493                             ; SOURCE LINE # 623
                    2494     ; Check_next_bank:
                    2495                             ; SOURCE LINE # 624
01CA                2496     ?_Download_Uart2Sflash?Check_next_bank:
                    2497     ;       //spiflash_WriteByte(c*2,((u8*)&mem_crc16)[0]);// for loop can be used to optimize 
                             code size to do
                    2498     ;       //if(spiflash_ReadByte(c*2) != ((u8*)&mem_crc16)[0])
                    2499     ;       spiflash_WriteByte(c*2,lo8(mem_crc16));// for loop can be used to optimize code siz
                             e to do
                    2500                             ; SOURCE LINE # 627
01CA 7800     F     2501             MOV     R0,#LOW (c?661)
01CC E6             2502             MOV     A,@R0
01CD 75F002         2503             MOV     B,#02H
01D0 A4             2504             MUL     AB
01D1 FF             2505             MOV     R7,A
01D2 AEF0           2506             MOV     R6,B
01D4 E4             2507             CLR     A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    42

01D5 FC             2508             MOV     R4,A
01D6 FD             2509             MOV     R5,A
01D7 7800     F     2510             MOV     R0,#LOW (mem_crc16?662+01H)
01D9 E6             2511             MOV     A,@R0
01DA F500     F     2512             MOV     ?_spiflash_WriteByte?BYTE+04H,A
01DC 120000   F     2513             LCALL   _spiflash_WriteByte
                    2514     ;       if(spiflash_ReadByte(c*2) != lo8(mem_crc16))
                    2515                             ; SOURCE LINE # 628
01DF 7800     F     2516             MOV     R0,#LOW (c?661)
01E1 E6             2517             MOV     A,@R0
01E2 75F002         2518             MOV     B,#02H
01E5 A4             2519             MUL     AB
01E6 FF             2520             MOV     R7,A
01E7 AEF0           2521             MOV     R6,B
01E9 E4             2522             CLR     A
01EA FC             2523             MOV     R4,A
01EB FD             2524             MOV     R5,A
01EC 120000   F     2525             LCALL   _spiflash_ReadByte
01EF 7800     F     2526             MOV     R0,#LOW (mem_crc16?662+01H)
01F1 E6             2527             MOV     A,@R0
01F2 6F             2528             XRL     A,R7
01F3 7001           2529             JNZ     ?C0129
01F5 E4             2530             CLR     A
01F6                2531     ?C0129:
01F6 6002           2532             JZ      ?C0075
                    2533     ;       {
                    2534                             ; SOURCE LINE # 629
                    2535     ;               flash_verify_error = 1;
                    2536                             ; SOURCE LINE # 630
01F8                2537     ?C0135:
                    2538     ;               goto End_sflash_programming;
                    2539                             ; SOURCE LINE # 631
01F8 8037           2540             SJMP    ?C0136
                    2541     ;       }
                    2542                             ; SOURCE LINE # 632
01FA                2543     ?C0075:
                    2544     ;       spiflash_WriteByte((c*2) + 1,hi8(mem_crc16));
                    2545                             ; SOURCE LINE # 633
01FA 7800     F     2546             MOV     R0,#LOW (c?661)
01FC E6             2547             MOV     A,@R0
01FD 75F002         2548             MOV     B,#02H
0200 A4             2549             MUL     AB
0201 2401           2550             ADD     A,#01H
0203 FF             2551             MOV     R7,A
0204 E4             2552             CLR     A
0205 35F0           2553             ADDC    A,B
0207 FE             2554             MOV     R6,A
0208 E4             2555             CLR     A
0209 FC             2556             MOV     R4,A
020A FD             2557             MOV     R5,A
020B 08             2558             INC     R0
020C E6             2559             MOV     A,@R0
020D F500     F     2560             MOV     ?_spiflash_WriteByte?BYTE+04H,A
020F 120000   F     2561             LCALL   _spiflash_WriteByte
                    2562     ;       if(spiflash_ReadByte((c*2)+1) != hi8(mem_crc16))
                    2563                             ; SOURCE LINE # 634
0212 7800     F     2564             MOV     R0,#LOW (c?661)
0214 E6             2565             MOV     A,@R0
0215 75F002         2566             MOV     B,#02H
0218 A4             2567             MUL     AB
0219 2401           2568             ADD     A,#01H
021B FF             2569             MOV     R7,A
021C E4             2570             CLR     A
021D 35F0           2571             ADDC    A,B
021F FE             2572             MOV     R6,A
0220 E4             2573             CLR     A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    43

0221 FC             2574             MOV     R4,A
0222 FD             2575             MOV     R5,A
0223 120000   F     2576             LCALL   _spiflash_ReadByte
0226 EF             2577             MOV     A,R7
0227 FD             2578             MOV     R5,A
0228 7800     F     2579             MOV     R0,#LOW (mem_crc16?662)
022A E6             2580             MOV     A,@R0
022B 6D             2581             XRL     A,R5
022C 7001           2582             JNZ     ?C0130
022E E4             2583             CLR     A
022F                2584     ?C0130:
022F 6006           2585             JZ      ?C0076
                    2586     ;       //spiflash_WriteByte((c*2) + 1,((u8*)&mem_crc16)[1]);
                    2587     ;       //if(spiflash_ReadByte((c*2)+1) != ((u8*)&mem_crc16)[1])
                    2588     ;       {
                    2589                             ; SOURCE LINE # 637
                    2590     ;               flash_verify_error = 1;
                    2591                             ; SOURCE LINE # 638
0231                2592     ?C0136:
0231 7800     F     2593             MOV     R0,#LOW (flash_verify_error?666)
0233 7601           2594             MOV     @R0,#01H
                    2595     ;               goto End_sflash_programming;
                    2596                             ; SOURCE LINE # 639
0235 802A           2597             SJMP    ?_Download_Uart2Sflash?End_sflash_programming
                    2598     ;       }
                    2599                             ; SOURCE LINE # 640
0237                2600     ?C0076:
                    2601     ;       //printf("\nCRC Bank %bu = %x,fl = %bu,fh = %bu",c,mem_crc16,c*2,(c*2)+1);
                    2602     ;       printf("\nCRC Bank %bu = %x",c,mem_crc16);
                    2603                             ; SOURCE LINE # 642
0237 7BFF           2604             MOV     R3,#0FFH
0239 7A00     F     2605             MOV     R2,#HIGH (?SC_509)
023B 7900     F     2606             MOV     R1,#LOW (?SC_509)
023D 7800     F     2607             MOV     R0,#LOW (c?661)
023F E6             2608             MOV     A,@R0
0240 F500     F     2609             MOV     ?_printf?BYTE+03H,A
0242 08             2610             INC     R0
0243 E6             2611             MOV     A,@R0
0244 F500     F     2612             MOV     ?_printf?BYTE+04H,A
0246 08             2613             INC     R0
0247 E6             2614             MOV     A,@R0
0248 F500     F     2615             MOV     ?_printf?BYTE+05H,A
024A 120000   F     2616             LCALL   _printf
                    2617     ;       c++;
                    2618                             ; SOURCE LINE # 643
024D 7800     F     2619             MOV     R0,#LOW (c?661)
024F 06             2620             INC     @R0
                    2621     ;       if (c!=8){
                    2622                             ; SOURCE LINE # 644
0250 E6             2623             MOV     A,@R0
0251 6408           2624             XRL     A,#08H
0253 6003           2625             JZ      ?C0077
                    2626     ;               goto Program_Next_bank;
                    2627                             ; SOURCE LINE # 645
0255 020000   F     2628             LJMP    ?_Download_Uart2Sflash?Program_Next_bank
                    2629     ;       } else {
                    2630                             ; SOURCE LINE # 646
0258                2631     ?C0077:
                    2632     ;               //spiflash_WriteByte(16,c-1);// no of flashed banks
                    2633     ;               //printf("\n Flashed banks %bu",c-1);
                    2634     ;               printf("\n *** Programming sflash done!\n");
                    2635                             ; SOURCE LINE # 649
0258 7BFF           2636             MOV     R3,#0FFH
025A 7A00     F     2637             MOV     R2,#HIGH (?SC_528)
025C 7900     F     2638             MOV     R1,#LOW (?SC_528)
025E 120000   F     2639             LCALL   _printf
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    44

                    2640     ;       }
                    2641                             ; SOURCE LINE # 650
                    2642     ; End_sflash_programming:
                    2643                             ; SOURCE LINE # 651
0261                2644     ?_Download_Uart2Sflash?End_sflash_programming:
                    2645     ;       
                    2646     ;       DisableWrCRam();
                    2647                             ; SOURCE LINE # 653
0261 120000   F     2648             LCALL   DisableWrCRam
                    2649     ;       spiflash_wrsr_unlock(0);
                    2650                             ; SOURCE LINE # 654
0264 E4             2651             CLR     A
0265 FF             2652             MOV     R7,A
0266 120000   F     2653             LCALL   _spiflash_wrsr_unlock
                    2654     ; 
                    2655     ;       if(auto_backup == 1)
                    2656                             ; SOURCE LINE # 656
0269 E500     F     2657             MOV     A,auto_backup?660
026B B4010A         2658             CJNE    A,#01H,?C0056
                    2659     ;       {
                    2660                             ; SOURCE LINE # 657
                    2661     ;               if(flash_verify_error == 0)//take backup only if flash is good
                    2662                             ; SOURCE LINE # 658
026E 7800     F     2663             MOV     R0,#LOW (flash_verify_error?666)
0270 E6             2664             MOV     A,@R0
0271 7005           2665             JNZ     ?C0056
                    2666     ;                       (void)spiflash_BackupCodeImage(1);
                    2667                             ; SOURCE LINE # 659
0273 7F01           2668             MOV     R7,#01H
0275 120000   F     2669             LCALL   _spiflash_BackupCodeImage
                    2670     ;       }
                    2671                             ; SOURCE LINE # 660
                    2672     ;       
                    2673     ;       return;
                    2674     ; }
                    2675                             ; SOURCE LINE # 663
0278                2676     ?C0056:
0278 22             2677             RET     
                    2678     ; END OF _Download_Uart2Sflash
                    2679     
                    2680     ; #endif
                    2681     ; //***************************************************************
                    2682     ; //void spiflash_BackupCodeImage() 
                    2683     ; //This function is to copy 0-256k of code in the sflash to the backup area 256k-512k
                    2684     ; //***************************************************************
                    2685     ; u8 spiflash_BackupCodeImage(u8 auto_cnf)
                    2686     
----                2687             RSEG  ?PR?_spiflash_BackupCodeImage?SPIFLASH
0000                2688     _spiflash_BackupCodeImage:
                    2689             USING   0
                    2690                             ; SOURCE LINE # 669
                    2691     ;---- Variable 'auto_cnf?767' assigned to Register 'R3' ----
0000 AB07           2692             MOV     R3,AR7
                    2693     ; {
                    2694                             ; SOURCE LINE # 670
                    2695     ;       u8 idata Dat1;
                    2696     ;       //SflashAddr    = 0x100;
                    2697     ;       //Addr32_1      = GVTY_BACKUP_START_ADDR + 0x100;
                    2698     ;       SflashAddr      = 0;
                    2699                             ; SOURCE LINE # 674
0002 900000   F     2700             MOV     DPTR,#SflashAddr
0005 120000   F     2701             LCALL   ?C?LSTKXDATA
0008 00             2702             DB      00H
0009 00             2703             DB      00H
000A 00             2704             DB      00H
000B 00             2705             DB      00H
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    45

                    2706     ;       Addr32_1        = GVTY_BACKUP_START_ADDR;
                    2707                             ; SOURCE LINE # 675
000C 900000   F     2708             MOV     DPTR,#Addr32_1
000F 120000   F     2709             LCALL   ?C?LSTKXDATA
0012 00             2710             DB      00H
0013 05             2711             DB      05H
0014 00             2712             DB      00H
0015 00             2713             DB      00H
                    2714     ; 
                    2715     ;       if(auto_cnf == 0)
                    2716                             ; SOURCE LINE # 677
0016 EB             2717             MOV     A,R3
0017 7038           2718             JNZ     ?C0081
                    2719     ;       {
                    2720                             ; SOURCE LINE # 678
                    2721     ;               printf("\n --> Backup code image Y/N?:");
                    2722                             ; SOURCE LINE # 679
0019 7BFF           2723             MOV     R3,#0FFH
001B 7A00     F     2724             MOV     R2,#HIGH (?SC_560)
001D 7900     F     2725             MOV     R1,#LOW (?SC_560)
001F 120000   F     2726             LCALL   _printf
                    2727     ;               Dat1 = _get1char();
                    2728                             ; SOURCE LINE # 680
0022 120000   F     2729             LCALL   _get1char
0025 7800     F     2730             MOV     R0,#LOW (Dat1?768)
0027 EF             2731             MOV     A,R7
0028 F6             2732             MOV     @R0,A
                    2733     ;               TI = 0;
                    2734                             ; SOURCE LINE # 681
0029 C299           2735             CLR     TI
                    2736     ;               SBUF = Dat1;
                    2737                             ; SOURCE LINE # 682
002B F599           2738             MOV     SBUF,A
                    2739     ;               if (Dat1!='Y')
                    2740                             ; SOURCE LINE # 683
002D EF             2741             MOV     A,R7
002E 6459           2742             XRL     A,#059H
0030 6003           2743             JZ      ?C0082
                    2744     ;                       return 0;
                    2745                             ; SOURCE LINE # 684
0032 7F00           2746             MOV     R7,#00H
0034 22             2747             RET     
0035                2748     ?C0082:
                    2749     ;               printf("\n --> Delete old backup image Y/N?:");
                    2750                             ; SOURCE LINE # 685
0035 7BFF           2751             MOV     R3,#0FFH
0037 7A00     F     2752             MOV     R2,#HIGH (?SC_590)
0039 7900     F     2753             MOV     R1,#LOW (?SC_590)
003B 120000   F     2754             LCALL   _printf
                    2755     ;               Dat1 = _get1char();
                    2756                             ; SOURCE LINE # 686
003E 120000   F     2757             LCALL   _get1char
0041 7800     F     2758             MOV     R0,#LOW (Dat1?768)
0043 EF             2759             MOV     A,R7
0044 F6             2760             MOV     @R0,A
                    2761     ;               TI = 0;
                    2762                             ; SOURCE LINE # 687
0045 C299           2763             CLR     TI
                    2764     ;               SBUF = Dat1;
                    2765                             ; SOURCE LINE # 688
0047 F599           2766             MOV     SBUF,A
                    2767     ;               if (Dat1!='Y')
                    2768                             ; SOURCE LINE # 689
0049 EF             2769             MOV     A,R7
004A 6459           2770             XRL     A,#059H
004C 6003           2771             JZ      ?C0081
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    46

                    2772     ;                       return 0;
                    2773                             ; SOURCE LINE # 690
004E 7F00           2774             MOV     R7,#00H
0050 22             2775             RET     
                    2776     ;       }
                    2777                             ; SOURCE LINE # 691
0051                2778     ?C0081:
                    2779     ;       spiflash_wrsr_unlock(1);
                    2780                             ; SOURCE LINE # 692
0051 7F01           2781             MOV     R7,#01H
0053 120000   F     2782             LCALL   _spiflash_wrsr_unlock
                    2783     ;       spiflash_eraseBackup256k();
                    2784                             ; SOURCE LINE # 693
0056 120000   F     2785             LCALL   spiflash_eraseBackup256k
                    2786     ;       printf("\n\n --> Backing up code image ");
                    2787                             ; SOURCE LINE # 694
0059 7BFF           2788             MOV     R3,#0FFH
005B 7A00     F     2789             MOV     R2,#HIGH (?SC_626)
005D 7900     F     2790             MOV     R1,#LOW (?SC_626)
                    2791     ; 
                    2792     ;       
                    2793     ; Cont_BkpSflash:
                    2794                             ; SOURCE LINE # 697
005F 020000   F     2795             LJMP    ?C0137
0062                2796     ?_spiflash_BackupCodeImage?Cont_BkpSflash:
                    2797     ;       Dat1 = spiflash_ReadByte(SflashAddr);
                    2798                             ; SOURCE LINE # 698
0062 900000   F     2799             MOV     DPTR,#SflashAddr
0065 120000   F     2800             LCALL   ?C?LLDXDATA
0068 120000   F     2801             LCALL   _spiflash_ReadByte
006B 7800     F     2802             MOV     R0,#LOW (Dat1?768)
006D EF             2803             MOV     A,R7
006E F6             2804             MOV     @R0,A
006F FB             2805             MOV     R3,A
                    2806     ;       spiflash_WriteByte(Addr32_1,Dat1);
                    2807                             ; SOURCE LINE # 699
0070 900000   F     2808             MOV     DPTR,#Addr32_1
0073 120000   F     2809             LCALL   ?C?LLDXDATA
0076 8B00     F     2810             MOV     ?_spiflash_WriteByte?BYTE+04H,R3
0078 120000   F     2811             LCALL   _spiflash_WriteByte
                    2812     ;       if (spiflash_ReadByte(Addr32_1)!=Dat1){
                    2813                             ; SOURCE LINE # 700
007B 900000   F     2814             MOV     DPTR,#Addr32_1
007E 120000   F     2815             LCALL   ?C?LLDXDATA
0081 120000   F     2816             LCALL   _spiflash_ReadByte
0084 7800     F     2817             MOV     R0,#LOW (Dat1?768)
0086 E6             2818             MOV     A,@R0
0087 6F             2819             XRL     A,R7
0088 601F           2820             JZ      ?C0086
                    2821     ;               //printf("\n *** Backup error @ 0x%04X%04X\n\n",(u16)(0xFFFF&(Addr32_1>>16)
                             ),(u16)(0xFFFF&Addr32_1));
                    2822     ;               printf("\n *** Code restoring error @ 0x%08lX\n\n",SflashAddr);
                    2823                             ; SOURCE LINE # 702
008A 7BFF           2824             MOV     R3,#0FFH
008C 7A00     F     2825             MOV     R2,#HIGH (?SC_656)
008E 7900     F     2826             MOV     R1,#LOW (?SC_656)
0090 900000   F     2827             MOV     DPTR,#SflashAddr
0093 120000   F     2828             LCALL   ?C?LLDXDATA
0096 8F00     F     2829             MOV     ?_printf?BYTE+06H,R7
0098 8E00     F     2830             MOV     ?_printf?BYTE+05H,R6
009A 8D00     F     2831             MOV     ?_printf?BYTE+04H,R5
009C 8C00     F     2832             MOV     ?_printf?BYTE+03H,R4
009E 120000   F     2833             LCALL   _printf
                    2834     ;               spiflash_wrsr_unlock(0);
                    2835                             ; SOURCE LINE # 703
00A1 E4             2836             CLR     A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    47

00A2 FF             2837             MOV     R7,A
00A3 120000   F     2838             LCALL   _spiflash_wrsr_unlock
                    2839     ;               return 1;
                    2840                             ; SOURCE LINE # 704
00A6 7F01           2841             MOV     R7,#01H
00A8 22             2842             RET     
                    2843     ;       }
                    2844                             ; SOURCE LINE # 705
00A9                2845     ?C0086:
                    2846     ;       if (Addr32_1<GVTY_BACKUP_END_ADDR){
                    2847                             ; SOURCE LINE # 706
00A9 7FFF           2848             MOV     R7,#0FFH
00AB 7E7F           2849             MOV     R6,#07FH
00AD 7D08           2850             MOV     R5,#08H
00AF 7C00           2851             MOV     R4,#00H
00B1 900000   F     2852             MOV     DPTR,#Addr32_1
00B4 120000   F     2853             LCALL   ?C?LLDXDATA0
00B7 C3             2854             CLR     C
00B8 120000   F     2855             LCALL   ?C?ULCMP
00BB 5058           2856             JNC     ?C0087
                    2857     ;               SflashAddr++;
                    2858                             ; SOURCE LINE # 707
00BD 900000   F     2859             MOV     DPTR,#SflashAddr
00C0 120000   F     2860             LCALL   ?C?LLDXDATA
00C3 EF             2861             MOV     A,R7
00C4 2401           2862             ADD     A,#01H
00C6 FF             2863             MOV     R7,A
00C7 E4             2864             CLR     A
00C8 3E             2865             ADDC    A,R6
00C9 FE             2866             MOV     R6,A
00CA E4             2867             CLR     A
00CB 3D             2868             ADDC    A,R5
00CC FD             2869             MOV     R5,A
00CD E4             2870             CLR     A
00CE 3C             2871             ADDC    A,R4
00CF FC             2872             MOV     R4,A
00D0 900000   F     2873             MOV     DPTR,#SflashAddr
00D3 120000   F     2874             LCALL   ?C?LSTXDATA
                    2875     ;               Addr32_1++;
                    2876                             ; SOURCE LINE # 708
00D6 900000   F     2877             MOV     DPTR,#Addr32_1
00D9 120000   F     2878             LCALL   ?C?LLDXDATA
00DC EF             2879             MOV     A,R7
00DD 2401           2880             ADD     A,#01H
00DF FF             2881             MOV     R7,A
00E0 E4             2882             CLR     A
00E1 3E             2883             ADDC    A,R6
00E2 FE             2884             MOV     R6,A
00E3 E4             2885             CLR     A
00E4 3D             2886             ADDC    A,R5
00E5 FD             2887             MOV     R5,A
00E6 E4             2888             CLR     A
00E7 3C             2889             ADDC    A,R4
00E8 FC             2890             MOV     R4,A
00E9 900000   F     2891             MOV     DPTR,#Addr32_1
00EC 120000   F     2892             LCALL   ?C?LSTXDATA
                    2893     ;               if ((Addr32_1&0x1FF)==0)
                    2894                             ; SOURCE LINE # 709
00EF 900000   F     2895             MOV     DPTR,#Addr32_1
00F2 120000   F     2896             LCALL   ?C?LLDXDATA
00F5 EE             2897             MOV     A,R6
00F6 5401           2898             ANL     A,#01H
00F8 FE             2899             MOV     R6,A
00F9 E4             2900             CLR     A
00FA FD             2901             MOV     R5,A
00FB FC             2902             MOV     R4,A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    48

00FC FB             2903             MOV     R3,A
00FD FA             2904             MOV     R2,A
00FE F9             2905             MOV     R1,A
00FF F8             2906             MOV     R0,A
0100 C3             2907             CLR     C
0101 120000   F     2908             LCALL   ?C?ULCMP
0104 6003           2909             JZ      $ + 5H
0106 020000   F     2910             LJMP    ?_spiflash_BackupCodeImage?Cont_BkpSflash
                    2911     ;                       printf(".");
                    2912                             ; SOURCE LINE # 710
0109 7BFF           2913             MOV     R3,#0FFH
010B 7A00     F     2914             MOV     R2,#HIGH (?SC_28)
010D 7900     F     2915             MOV     R1,#LOW (?SC_28)
010F                2916     ?C0137:
010F 120000   F     2917             LCALL   _printf
                    2918     ;               goto Cont_BkpSflash;
                    2919                             ; SOURCE LINE # 711
0112 020000   F     2920             LJMP    ?_spiflash_BackupCodeImage?Cont_BkpSflash
                    2921     ;       }
                    2922                             ; SOURCE LINE # 712
0115                2923     ?C0087:
                    2924     ; 
                    2925     ;       printf("\n --> Backup code done!");
                    2926                             ; SOURCE LINE # 714
0115 7BFF           2927             MOV     R3,#0FFH
0117 7A00     F     2928             MOV     R2,#HIGH (?SC_695)
0119 7900     F     2929             MOV     R1,#LOW (?SC_695)
011B 120000   F     2930             LCALL   _printf
                    2931     ;       spiflash_wrsr_unlock(0);
                    2932                             ; SOURCE LINE # 715
011E E4             2933             CLR     A
011F FF             2934             MOV     R7,A
0120 120000   F     2935             LCALL   _spiflash_wrsr_unlock
                    2936     ;       return 0;
                    2937                             ; SOURCE LINE # 716
0123 7F00           2938             MOV     R7,#00H
                    2939     ; }
                    2940                             ; SOURCE LINE # 717
0125                2941     ?C0083:
0125 22             2942             RET     
                    2943     ; END OF _spiflash_BackupCodeImage
                    2944     
                    2945     ; //***************************************************************
                    2946     ; //void spiflash_RestroreCodeImage() 
                    2947     ; //This function is to copy 0-256k of code in the sflash to the backup area 256k-512k
                    2948     ; //***************************************************************
                    2949     ; u8 spiflash_RestoreCodeImage(u8 auto_cnf)
                    2950     
----                2951             RSEG  ?PR?_spiflash_RestoreCodeImage?SPIFLASH
0000                2952     _spiflash_RestoreCodeImage:
                    2953             USING   0
                    2954                             ; SOURCE LINE # 722
0000 8F00     F     2955             MOV     auto_cnf?869,R7
                    2956     ; {
                    2957                             ; SOURCE LINE # 723
                    2958     ;       u8 idata Dat1;
                    2959     ;       u16 idata calc_crc = 0;
                    2960                             ; SOURCE LINE # 725
0002 E4             2961             CLR     A
0003 7800     F     2962             MOV     R0,#LOW (calc_crc?871)
0005 F6             2963             MOV     @R0,A
0006 08             2964             INC     R0
0007 F6             2965             MOV     @R0,A
                    2966     ;       u32 idata addr_count = (u32)0;
                    2967                             ; SOURCE LINE # 726
0008 08             2968             INC     R0
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    49

0009 120000   F     2969             LCALL   ?C?LSTKIDATA
000C 00             2970             DB      00H
000D 00             2971             DB      00H
000E 00             2972             DB      00H
000F 00             2973             DB      00H
                    2974     ;       u32 idata base_addr_offset;
                    2975     ;       u8 idata bank_id = 0;
                    2976                             ; SOURCE LINE # 728
0010 E4             2977             CLR     A
0011 7800     F     2978             MOV     R0,#LOW (bank_id?874)
0013 F6             2979             MOV     @R0,A
                    2980     ;       u8 idata flash_verify_error = 0;
                    2981                             ; SOURCE LINE # 729
0014 08             2982             INC     R0
0015 F6             2983             MOV     @R0,A
                    2984     ;       u32 idata max_bank_size;// dont optimize to u16. multiplication result is get trunc
                             ated
                    2985     ;       
                    2986     ;       //SflashAddr    = 0x100; // 0x2100 - 0x2000
                    2987     ;       //Addr32_1      = GVTY_BACKUP_START_ADDR + 0x100;
                    2988     ;       
                    2989     ;       //Addr32_1      = GVTY_BACKUP_START_ADDR + 0x100;
                    2990     ;       printf("\n Checking integrity of Backup ...");
                    2991                             ; SOURCE LINE # 736
0016 7BFF           2992             MOV     R3,#0FFH
0018 7A00     F     2993             MOV     R2,#HIGH (?SC_719)
001A 7900     F     2994             MOV     R1,#LOW (?SC_719)
001C 120000   F     2995             LCALL   _printf
                    2996     ;       for(bank_id=0;bank_id<8;bank_id++)
                    2997                             ; SOURCE LINE # 737
001F E4             2998             CLR     A
0020 7800     F     2999             MOV     R0,#LOW (bank_id?874)
0022 F6             3000             MOV     @R0,A
0023                3001     ?C0089:
0023 7800     F     3002             MOV     R0,#LOW (bank_id?874)
0025 E6             3003             MOV     A,@R0
0026 FF             3004             MOV     R7,A
0027 C3             3005             CLR     C
0028 9408           3006             SUBB    A,#08H
002A 4003           3007             JC      $ + 5H
002C 020000   F     3008             LJMP    ?C0090
                    3009     ;       {
                    3010                             ; SOURCE LINE # 738
                    3011     ;               if(bank_id==0)
                    3012                             ; SOURCE LINE # 739
002F EF             3013             MOV     A,R7
0030 7800     F     3014             MOV     R0,#LOW (max_bank_size?876)
0032 7012           3015             JNZ     ?C0092
                    3016     ;               {
                    3017                             ; SOURCE LINE # 740
                    3018     ;                       max_bank_size = 0xDF00;
                    3019                             ; SOURCE LINE # 741
0034 120000   F     3020             LCALL   ?C?LSTKIDATA
0037 00             3021             DB      00H
0038 00             3022             DB      00H
0039 DF             3023             DB      0DFH
003A 00             3024             DB      00H
                    3025     ;                       base_addr_offset = GVTY_BACKUP_START_ADDR + 0x100;
                    3026                             ; SOURCE LINE # 742
003B 7800     F     3027             MOV     R0,#LOW (base_addr_offset?873)
003D 120000   F     3028             LCALL   ?C?LSTKIDATA
0040 00             3029             DB      00H
0041 05             3030             DB      05H
0042 01             3031             DB      01H
0043 00             3032             DB      00H
                    3033     ;               }
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    50

                    3034                             ; SOURCE LINE # 743
0044 802F           3035             SJMP    ?C0093
0046                3036     ?C0092:
                    3037     ;               else
                    3038     ;               {
                    3039                             ; SOURCE LINE # 745
                    3040     ;                       max_bank_size = CBANK_LEN;              
                    3041                             ; SOURCE LINE # 746
0046 120000   F     3042             LCALL   ?C?LSTKIDATA
0049 00             3043             DB      00H
004A 00             3044             DB      00H
004B 60             3045             DB      060H
004C 00             3046             DB      00H
                    3047     ;                       base_addr_offset = GVTY_BACKUP_START_ADDR + 0xE000 + (max_bank_size
                              * (bank_id-1));
                    3048                             ; SOURCE LINE # 747
004D 7800     F     3049             MOV     R0,#LOW (bank_id?874)
004F E6             3050             MOV     A,@R0
0050 24FF           3051             ADD     A,#0FFH
0052 FF             3052             MOV     R7,A
0053 E4             3053             CLR     A
0054 34FF           3054             ADDC    A,#0FFH
0056 FE             3055             MOV     R6,A
0057 E4             3056             CLR     A
0058 FC             3057             MOV     R4,A
0059 FD             3058             MOV     R5,A
005A 7800     F     3059             MOV     R0,#LOW (max_bank_size?876)
005C 120000   F     3060             LCALL   ?C?LLDIDATA0
005F 120000   F     3061             LCALL   ?C?LMUL
0062 E4             3062             CLR     A
0063 2F             3063             ADD     A,R7
0064 FF             3064             MOV     R7,A
0065 EE             3065             MOV     A,R6
0066 34E0           3066             ADDC    A,#0E0H
0068 FE             3067             MOV     R6,A
0069 ED             3068             MOV     A,R5
006A 3405           3069             ADDC    A,#05H
006C FD             3070             MOV     R5,A
006D E4             3071             CLR     A
006E 3C             3072             ADDC    A,R4
006F FC             3073             MOV     R4,A
0070 7800     F     3074             MOV     R0,#LOW (base_addr_offset?873)
0072 120000   F     3075             LCALL   ?C?LSTIDATA
                    3076     ;               }
                    3077                             ; SOURCE LINE # 748
0075                3078     ?C0093:
                    3079     ;               //base_addr_offset = GVTY_BACKUP_START_ADDR + 0x100 + bank_id * ;
                    3080     ;               calc_crc = 0;
                    3081                             ; SOURCE LINE # 750
0075 E4             3082             CLR     A
0076 7800     F     3083             MOV     R0,#LOW (calc_crc?871)
0078 F6             3084             MOV     @R0,A
0079 08             3085             INC     R0
007A F6             3086             MOV     @R0,A
                    3087     ;               for(Addr32_1=0;Addr32_1<max_bank_size;Addr32_1++)
                    3088                             ; SOURCE LINE # 751
007B 900000   F     3089             MOV     DPTR,#Addr32_1
007E 120000   F     3090             LCALL   ?C?LSTKXDATA
0081 00             3091             DB      00H
0082 00             3092             DB      00H
0083 00             3093             DB      00H
0084 00             3094             DB      00H
0085                3095     ?C0094:
0085 7800     F     3096             MOV     R0,#LOW (max_bank_size?876)
0087 120000   F     3097             LCALL   ?C?LLDIDATA
008A 900000   F     3098             MOV     DPTR,#Addr32_1
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    51

008D 120000   F     3099             LCALL   ?C?LLDXDATA0
0090 C3             3100             CLR     C
0091 120000   F     3101             LCALL   ?C?ULCMP
0094 5040           3102             JNC     ?C0095
                    3103     ;               {
                    3104                             ; SOURCE LINE # 752
                    3105     ;                       Dat1 = spiflash_ReadByte(base_addr_offset + Addr32_1);
                    3106                             ; SOURCE LINE # 753
0096 900000   F     3107             MOV     DPTR,#Addr32_1
0099 120000   F     3108             LCALL   ?C?LLDXDATA
009C 7800     F     3109             MOV     R0,#LOW (base_addr_offset?873)
009E 120000   F     3110             LCALL   ?C?LLDIDATA0
00A1 120000   F     3111             LCALL   ?C?LADD
00A4 120000   F     3112             LCALL   _spiflash_ReadByte
00A7 7800     F     3113             MOV     R0,#LOW (Dat1?870)
00A9 EF             3114             MOV     A,R7
00AA F6             3115             MOV     @R0,A
00AB FD             3116             MOV     R5,A
                    3117     ;                       calc_crc = crc_ccitt_update(calc_crc,Dat1);
                    3118                             ; SOURCE LINE # 754
00AC 08             3119             INC     R0
00AD E6             3120             MOV     A,@R0
00AE FE             3121             MOV     R6,A
00AF 08             3122             INC     R0
00B0 E6             3123             MOV     A,@R0
00B1 FF             3124             MOV     R7,A
00B2 120000   F     3125             LCALL   _crc_ccitt_update
00B5 18             3126             DEC     R0
00B6 A606           3127             MOV     @R0,AR6
00B8 08             3128             INC     R0
00B9 A607           3129             MOV     @R0,AR7
                    3130     ;               }
                    3131                             ; SOURCE LINE # 755
00BB 900000   F     3132             MOV     DPTR,#Addr32_1
00BE 120000   F     3133             LCALL   ?C?LLDXDATA
00C1 EF             3134             MOV     A,R7
00C2 2401           3135             ADD     A,#01H
00C4 FF             3136             MOV     R7,A
00C5 E4             3137             CLR     A
00C6 3E             3138             ADDC    A,R6
00C7 FE             3139             MOV     R6,A
00C8 E4             3140             CLR     A
00C9 3D             3141             ADDC    A,R5
00CA FD             3142             MOV     R5,A
00CB E4             3143             CLR     A
00CC 3C             3144             ADDC    A,R4
00CD FC             3145             MOV     R4,A
00CE 900000   F     3146             MOV     DPTR,#Addr32_1
00D1 120000   F     3147             LCALL   ?C?LSTXDATA
00D4 80AF           3148             SJMP    ?C0094
00D6                3149     ?C0095:
                    3150     ;               //printf("\nBank ID %bu,CRC %04X,base addr %08lX",bank_id, calc_crc,base_ad
                             dr_offset);
                    3151     ;               printf("\nBank ID %bu,CRC %04X",bank_id, calc_crc);
                    3152                             ; SOURCE LINE # 757
00D6 7BFF           3153             MOV     R3,#0FFH
00D8 7A00     F     3154             MOV     R2,#HIGH (?SC_754)
00DA 7900     F     3155             MOV     R1,#LOW (?SC_754)
00DC 7800     F     3156             MOV     R0,#LOW (bank_id?874)
00DE E6             3157             MOV     A,@R0
00DF F500     F     3158             MOV     ?_printf?BYTE+03H,A
00E1 7800     F     3159             MOV     R0,#LOW (calc_crc?871)
00E3 E6             3160             MOV     A,@R0
00E4 F500     F     3161             MOV     ?_printf?BYTE+04H,A
00E6 08             3162             INC     R0
00E7 E6             3163             MOV     A,@R0
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    52

00E8 F500     F     3164             MOV     ?_printf?BYTE+05H,A
00EA 120000   F     3165             LCALL   _printf
                    3166     ;               //spiflash_WriteByte(bank_id*2,lo8(calc_crc));// for loop can be used to op
                             timize code size to do
                    3167     ;               if(spiflash_ReadByte((GVTY_BACKUP_START_ADDR + (bank_id*2))) != lo8(calc_cr
                             c))
                    3168                             ; SOURCE LINE # 759
00ED 7800     F     3169             MOV     R0,#LOW (bank_id?874)
00EF E6             3170             MOV     A,@R0
00F0 75F002         3171             MOV     B,#02H
00F3 A4             3172             MUL     AB
00F4 FF             3173             MOV     R7,A
00F5 E4             3174             CLR     A
00F6 2F             3175             ADD     A,R7
00F7 FF             3176             MOV     R7,A
00F8 E4             3177             CLR     A
00F9 35F0           3178             ADDC    A,B
00FB FE             3179             MOV     R6,A
00FC E4             3180             CLR     A
00FD 3405           3181             ADDC    A,#05H
00FF FD             3182             MOV     R5,A
0100 E4             3183             CLR     A
0101 33             3184             RLC     A
0102 FC             3185             MOV     R4,A
0103 120000   F     3186             LCALL   _spiflash_ReadByte
0106 7800     F     3187             MOV     R0,#LOW (calc_crc?871+01H)
0108 E6             3188             MOV     A,@R0
0109 6F             3189             XRL     A,R7
010A 7001           3190             JNZ     ?C0131
010C E4             3191             CLR     A
010D                3192     ?C0131:
010D 6002           3193             JZ      ?C0097
                    3194     ;               {
                    3195                             ; SOURCE LINE # 760
                    3196     ;                       flash_verify_error = 1;
                    3197                             ; SOURCE LINE # 761
                    3198     ;                       goto End_sflash_restore;
                    3199                             ; SOURCE LINE # 762
010F 8025           3200             SJMP    ?C0138
                    3201     ;               }
                    3202                             ; SOURCE LINE # 763
0111                3203     ?C0097:
                    3204     ;               //spiflash_WriteByte((bank_id*2) + 1,hi8(calc_crc));
                    3205     ;               if(spiflash_ReadByte((GVTY_BACKUP_START_ADDR + (bank_id*2)+1)) != hi8(calc_
                             crc))
                    3206                             ; SOURCE LINE # 765
0111 7800     F     3207             MOV     R0,#LOW (bank_id?874)
0113 E6             3208             MOV     A,@R0
0114 75F002         3209             MOV     B,#02H
0117 A4             3210             MUL     AB
0118 FF             3211             MOV     R7,A
0119 EF             3212             MOV     A,R7
011A 2401           3213             ADD     A,#01H
011C FF             3214             MOV     R7,A
011D E4             3215             CLR     A
011E 35F0           3216             ADDC    A,B
0120 FE             3217             MOV     R6,A
0121 E4             3218             CLR     A
0122 3405           3219             ADDC    A,#05H
0124 FD             3220             MOV     R5,A
0125 E4             3221             CLR     A
0126 33             3222             RLC     A
0127 FC             3223             MOV     R4,A
0128 120000   F     3224             LCALL   _spiflash_ReadByte
012B EF             3225             MOV     A,R7
012C FD             3226             MOV     R5,A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    53

012D 7800     F     3227             MOV     R0,#LOW (calc_crc?871)
012F E6             3228             MOV     A,@R0
0130 6D             3229             XRL     A,R5
0131 7001           3230             JNZ     ?C0132
0133 E4             3231             CLR     A
0134                3232     ?C0132:
0134 6007           3233             JZ      ?C0091
                    3234     ;               //spiflash_WriteByte((c*2) + 1,((u8*)&mem_crc16)[1]);
                    3235     ;               //if(spiflash_ReadByte((c*2)+1) != ((u8*)&mem_crc16)[1])
                    3236     ;               {
                    3237                             ; SOURCE LINE # 768
                    3238     ;                       flash_verify_error = 1;
                    3239                             ; SOURCE LINE # 769
0136                3240     ?C0138:
0136 7800     F     3241             MOV     R0,#LOW (flash_verify_error?875)
0138 7601           3242             MOV     @R0,#01H
                    3243     ;                       goto End_sflash_restore;
                    3244                             ; SOURCE LINE # 770
013A 020000   F     3245             LJMP    ?_spiflash_RestoreCodeImage?End_sflash_restore
                    3246     ;               }
                    3247                             ; SOURCE LINE # 771
                    3248     ;       //printf("\nCRC Bank %bu = %x,fl = %bu,fh = %bu",bank_id,calc_crc,bank_id*2,(bank_i
                             d*2)+1);
                    3249     ;       }
                    3250                             ; SOURCE LINE # 773
013D                3251     ?C0091:
013D 7800     F     3252             MOV     R0,#LOW (bank_id?874)
013F 06             3253             INC     @R0
0140 020000   F     3254             LJMP    ?C0089
0143                3255     ?C0090:
                    3256     ; 
                    3257     ;       SflashAddr      = 0; // 0x2100 - 0x2000
                    3258                             ; SOURCE LINE # 775
0143 900000   F     3259             MOV     DPTR,#SflashAddr
0146 120000   F     3260             LCALL   ?C?LSTKXDATA
0149 00             3261             DB      00H
014A 00             3262             DB      00H
014B 00             3263             DB      00H
014C 00             3264             DB      00H
                    3265     ;       Addr32_1        = GVTY_BACKUP_START_ADDR;
                    3266                             ; SOURCE LINE # 776
014D 900000   F     3267             MOV     DPTR,#Addr32_1
0150 120000   F     3268             LCALL   ?C?LSTKXDATA
0153 00             3269             DB      00H
0154 05             3270             DB      05H
0155 00             3271             DB      00H
0156 00             3272             DB      00H
                    3273     ;       
                    3274     ;       
                    3275     ;       if(auto_cnf == 0)
                    3276                             ; SOURCE LINE # 779
0157 E500     F     3277             MOV     A,auto_cnf?869
0159 7038           3278             JNZ     ?C0100
                    3279     ;       {
                    3280                             ; SOURCE LINE # 780
                    3281     ;               printf("\n --> Recover code image Y/N?:");
                    3282                             ; SOURCE LINE # 781
015B 7BFF           3283             MOV     R3,#0FFH
015D 7A00     F     3284             MOV     R2,#HIGH (?SC_776)
015F 7900     F     3285             MOV     R1,#LOW (?SC_776)
0161 120000   F     3286             LCALL   _printf
                    3287     ;               Dat1 = _get1char();
                    3288                             ; SOURCE LINE # 782
0164 120000   F     3289             LCALL   _get1char
0167 7800     F     3290             MOV     R0,#LOW (Dat1?870)
0169 EF             3291             MOV     A,R7
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    54

016A F6             3292             MOV     @R0,A
                    3293     ;               TI = 0;
                    3294                             ; SOURCE LINE # 783
016B C299           3295             CLR     TI
                    3296     ;               SBUF = Dat1;
                    3297                             ; SOURCE LINE # 784
016D F599           3298             MOV     SBUF,A
                    3299     ;               if (Dat1!='Y')
                    3300                             ; SOURCE LINE # 785
016F EF             3301             MOV     A,R7
0170 6459           3302             XRL     A,#059H
0172 6003           3303             JZ      ?C0101
                    3304     ;                       return 0;
                    3305                             ; SOURCE LINE # 786
0174 7F00           3306             MOV     R7,#00H
0176 22             3307             RET     
0177                3308     ?C0101:
                    3309     ;               printf("\n --> Delete code image Y/N?:");
                    3310                             ; SOURCE LINE # 787
0177 7BFF           3311             MOV     R3,#0FFH
0179 7A00     F     3312             MOV     R2,#HIGH (?SC_807)
017B 7900     F     3313             MOV     R1,#LOW (?SC_807)
017D 120000   F     3314             LCALL   _printf
                    3315     ;               Dat1 = _get1char();
                    3316                             ; SOURCE LINE # 788
0180 120000   F     3317             LCALL   _get1char
0183 7800     F     3318             MOV     R0,#LOW (Dat1?870)
0185 EF             3319             MOV     A,R7
0186 F6             3320             MOV     @R0,A
                    3321     ;               TI = 0;
                    3322                             ; SOURCE LINE # 789
0187 C299           3323             CLR     TI
                    3324     ;               SBUF = Dat1;
                    3325                             ; SOURCE LINE # 790
0189 F599           3326             MOV     SBUF,A
                    3327     ;               if (Dat1!='Y')
                    3328                             ; SOURCE LINE # 791
018B EF             3329             MOV     A,R7
018C 6459           3330             XRL     A,#059H
018E 6003           3331             JZ      ?C0100
                    3332     ;                       return 0;
                    3333                             ; SOURCE LINE # 792
0190 7F00           3334             MOV     R7,#00H
0192 22             3335             RET     
                    3336     ;       }
                    3337                             ; SOURCE LINE # 793
0193                3338     ?C0100:
                    3339     ;       
                    3340     ;       spiflash_eraseLower256k();
                    3341                             ; SOURCE LINE # 795
0193 120000   F     3342             LCALL   spiflash_eraseLower256k
                    3343     ;       printf("\n --> Restoring code image ");
                    3344                             ; SOURCE LINE # 796
0196 7BFF           3345             MOV     R3,#0FFH
0198 7A00     F     3346             MOV     R2,#HIGH (?SC_837)
019A 7900     F     3347             MOV     R1,#LOW (?SC_837)
                    3348     ; Cont_RestoreCodeImage:
                    3349                             ; SOURCE LINE # 797
019C 020000   F     3350             LJMP    ?C0139
019F                3351     ?_spiflash_RestoreCodeImage?Cont_RestoreCodeImage:
                    3352     ;       Dat1 = spiflash_ReadByte(Addr32_1);
                    3353                             ; SOURCE LINE # 798
019F 900000   F     3354             MOV     DPTR,#Addr32_1
01A2 120000   F     3355             LCALL   ?C?LLDXDATA
01A5 120000   F     3356             LCALL   _spiflash_ReadByte
01A8 7800     F     3357             MOV     R0,#LOW (Dat1?870)
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    55

01AA EF             3358             MOV     A,R7
01AB F6             3359             MOV     @R0,A
01AC FB             3360             MOV     R3,A
                    3361     ;       spiflash_WriteByte(SflashAddr,Dat1);
                    3362                             ; SOURCE LINE # 799
01AD 900000   F     3363             MOV     DPTR,#SflashAddr
01B0 120000   F     3364             LCALL   ?C?LLDXDATA
01B3 8B00     F     3365             MOV     ?_spiflash_WriteByte?BYTE+04H,R3
01B5 120000   F     3366             LCALL   _spiflash_WriteByte
                    3367     ;       if (spiflash_ReadByte(SflashAddr)!=Dat1){
                    3368                             ; SOURCE LINE # 800
01B8 900000   F     3369             MOV     DPTR,#SflashAddr
01BB 120000   F     3370             LCALL   ?C?LLDXDATA
01BE 120000   F     3371             LCALL   _spiflash_ReadByte
01C1 7800     F     3372             MOV     R0,#LOW (Dat1?870)
01C3 E6             3373             MOV     A,@R0
01C4 6F             3374             XRL     A,R7
01C5 601F           3375             JZ      ?C0105
                    3376     ;               printf("\n *** Code restoring error @ 0x%08lX\n\n",SflashAddr);
                    3377                             ; SOURCE LINE # 801
01C7 7BFF           3378             MOV     R3,#0FFH
01C9 7A00     F     3379             MOV     R2,#HIGH (?SC_656)
01CB 7900     F     3380             MOV     R1,#LOW (?SC_656)
01CD 900000   F     3381             MOV     DPTR,#SflashAddr
01D0 120000   F     3382             LCALL   ?C?LLDXDATA
01D3 8F00     F     3383             MOV     ?_printf?BYTE+06H,R7
01D5 8E00     F     3384             MOV     ?_printf?BYTE+05H,R6
01D7 8D00     F     3385             MOV     ?_printf?BYTE+04H,R5
01D9 8C00     F     3386             MOV     ?_printf?BYTE+03H,R4
01DB 120000   F     3387             LCALL   _printf
                    3388     ;               spiflash_wrsr_unlock(0);
                    3389                             ; SOURCE LINE # 802
01DE E4             3390             CLR     A
01DF FF             3391             MOV     R7,A
01E0 120000   F     3392             LCALL   _spiflash_wrsr_unlock
                    3393     ;               return 1;
                    3394                             ; SOURCE LINE # 803
01E3 7F01           3395             MOV     R7,#01H
01E5 22             3396             RET     
                    3397     ;       }
                    3398                             ; SOURCE LINE # 804
01E6                3399     ?C0105:
                    3400     ;       if (Addr32_1<GVTY_BACKUP_END_ADDR){
                    3401                             ; SOURCE LINE # 805
01E6 7FFF           3402             MOV     R7,#0FFH
01E8 7E7F           3403             MOV     R6,#07FH
01EA 7D08           3404             MOV     R5,#08H
01EC 7C00           3405             MOV     R4,#00H
01EE 900000   F     3406             MOV     DPTR,#Addr32_1
01F1 120000   F     3407             LCALL   ?C?LLDXDATA0
01F4 C3             3408             CLR     C
01F5 120000   F     3409             LCALL   ?C?ULCMP
01F8 5058           3410             JNC     ?C0106
                    3411     ;               SflashAddr++;
                    3412                             ; SOURCE LINE # 806
01FA 900000   F     3413             MOV     DPTR,#SflashAddr
01FD 120000   F     3414             LCALL   ?C?LLDXDATA
0200 EF             3415             MOV     A,R7
0201 2401           3416             ADD     A,#01H
0203 FF             3417             MOV     R7,A
0204 E4             3418             CLR     A
0205 3E             3419             ADDC    A,R6
0206 FE             3420             MOV     R6,A
0207 E4             3421             CLR     A
0208 3D             3422             ADDC    A,R5
0209 FD             3423             MOV     R5,A
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    56

020A E4             3424             CLR     A
020B 3C             3425             ADDC    A,R4
020C FC             3426             MOV     R4,A
020D 900000   F     3427             MOV     DPTR,#SflashAddr
0210 120000   F     3428             LCALL   ?C?LSTXDATA
                    3429     ;               Addr32_1++;
                    3430                             ; SOURCE LINE # 807
0213 900000   F     3431             MOV     DPTR,#Addr32_1
0216 120000   F     3432             LCALL   ?C?LLDXDATA
0219 EF             3433             MOV     A,R7
021A 2401           3434             ADD     A,#01H
021C FF             3435             MOV     R7,A
021D E4             3436             CLR     A
021E 3E             3437             ADDC    A,R6
021F FE             3438             MOV     R6,A
0220 E4             3439             CLR     A
0221 3D             3440             ADDC    A,R5
0222 FD             3441             MOV     R5,A
0223 E4             3442             CLR     A
0224 3C             3443             ADDC    A,R4
0225 FC             3444             MOV     R4,A
0226 900000   F     3445             MOV     DPTR,#Addr32_1
0229 120000   F     3446             LCALL   ?C?LSTXDATA
                    3447     ;               if ((Addr32_1&0x1FF)==0)
                    3448                             ; SOURCE LINE # 808
022C 900000   F     3449             MOV     DPTR,#Addr32_1
022F 120000   F     3450             LCALL   ?C?LLDXDATA
0232 EE             3451             MOV     A,R6
0233 5401           3452             ANL     A,#01H
0235 FE             3453             MOV     R6,A
0236 E4             3454             CLR     A
0237 FD             3455             MOV     R5,A
0238 FC             3456             MOV     R4,A
0239 FB             3457             MOV     R3,A
023A FA             3458             MOV     R2,A
023B F9             3459             MOV     R1,A
023C F8             3460             MOV     R0,A
023D C3             3461             CLR     C
023E 120000   F     3462             LCALL   ?C?ULCMP
0241 6003           3463             JZ      $ + 5H
0243 020000   F     3464             LJMP    ?_spiflash_RestoreCodeImage?Cont_RestoreCodeImage
                    3465     ;                       printf(".");
                    3466                             ; SOURCE LINE # 809
0246 7BFF           3467             MOV     R3,#0FFH
0248 7A00     F     3468             MOV     R2,#HIGH (?SC_28)
024A 7900     F     3469             MOV     R1,#LOW (?SC_28)
024C                3470     ?C0139:
024C 120000   F     3471             LCALL   _printf
                    3472     ;               goto Cont_RestoreCodeImage;
                    3473                             ; SOURCE LINE # 810
024F 020000   F     3474             LJMP    ?_spiflash_RestoreCodeImage?Cont_RestoreCodeImage
                    3475     ;       }
                    3476                             ; SOURCE LINE # 811
0252                3477     ?C0106:
                    3478     ;       printf("\n --> Restoring code image done!");
                    3479                             ; SOURCE LINE # 812
0252 7BFF           3480             MOV     R3,#0FFH
0254 7A00     F     3481             MOV     R2,#HIGH (?SC_865)
0256 7900     F     3482             MOV     R1,#LOW (?SC_865)
0258 120000   F     3483             LCALL   _printf
                    3484     ; 
                    3485     ; End_sflash_restore:
                    3486                             ; SOURCE LINE # 814
025B                3487     ?_spiflash_RestoreCodeImage?End_sflash_restore:
                    3488     ;       spiflash_wrsr_unlock(0);
                    3489                             ; SOURCE LINE # 815
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    57

025B E4             3490             CLR     A
025C FF             3491             MOV     R7,A
025D 120000   F     3492             LCALL   _spiflash_wrsr_unlock
                    3493     ;       if(flash_verify_error == 1)
                    3494                             ; SOURCE LINE # 816
0260 7800     F     3495             MOV     R0,#LOW (flash_verify_error?875)
0262 E6             3496             MOV     A,@R0
0263 B4010F         3497             CJNE    A,#01H,?C0108
                    3498     ;       {
                    3499                             ; SOURCE LINE # 817
                    3500     ;               printf("\nBackup integrity failed.\n CPU Reset");
                    3501                             ; SOURCE LINE # 818
0266 7BFF           3502             MOV     R3,#0FFH
0268 7A00     F     3503             MOV     R2,#HIGH (?SC_898)
026A 7900     F     3504             MOV     R1,#LOW (?SC_898)
026C 120000   F     3505             LCALL   _printf
                    3506     ;               *((u8 xdata * )(0x34)) = 1; // wb 34 1 system reset
                    3507                             ; SOURCE LINE # 819
026F 900034         3508             MOV     DPTR,#034H
0272 7401           3509             MOV     A,#01H
0274 F0             3510             MOVX    @DPTR,A
                    3511     ;       }
                    3512                             ; SOURCE LINE # 820
0275                3513     ?C0108:
                    3514     ;       return 0;
                    3515                             ; SOURCE LINE # 821
0275 7F00           3516             MOV     R7,#00H
                    3517     ; }
                    3518                             ; SOURCE LINE # 822
0277                3519     ?C0102:
0277 22             3520             RET     
                    3521     ; END OF _spiflash_RestoreCodeImage
                    3522     
                    3523             END
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    58

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E   ATTRIBUTES

?C0001. . . . . . . . . . . . . . . . .    C ADDR   002CH   R   SEG=?PR?_CRC_CCITT_UPDATE?SPIFLASH
?C0002. . . . . . . . . . . . . . . . .    C ADDR   0028H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0003. . . . . . . . . . . . . . . . .    C ADDR   0092H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0004. . . . . . . . . . . . . . . . .    C ADDR   0082H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0005. . . . . . . . . . . . . . . . .    C ADDR   005AH   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0007. . . . . . . . . . . . . . . . .    C ADDR   00A7H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0008. . . . . . . . . . . . . . . . .    C ADDR   00D9H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0010. . . . . . . . . . . . . . . . .    C ADDR   0106H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0011. . . . . . . . . . . . . . . . .    C ADDR   0126H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0012. . . . . . . . . . . . . . . . .    C ADDR   0130H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0014. . . . . . . . . . . . . . . . .    C ADDR   013AH   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0015. . . . . . . . . . . . . . . . .    C ADDR   0257H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0016. . . . . . . . . . . . . . . . .    C ADDR   0251H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0017. . . . . . . . . . . . . . . . .    C ADDR   0159H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0018. . . . . . . . . . . . . . . . .    C ADDR   01B8H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0019. . . . . . . . . . . . . . . . .    C ADDR   01A8H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0021. . . . . . . . . . . . . . . . .    C ADDR   0209H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0022. . . . . . . . . . . . . . . . .    C ADDR   024AH   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0023. . . . . . . . . . . . . . . . .    C ADDR   0251H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0024. . . . . . . . . . . . . . . . .    C ADDR   0261H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0025. . . . . . . . . . . . . . . . .    C ADDR   027EH   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0026. . . . . . . . . . . . . . . . .    C ADDR   000FH   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0027. . . . . . . . . . . . . . . . .    C ADDR   001BH   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0028. . . . . . . . . . . . . . . . .    C ADDR   0069H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0030. . . . . . . . . . . . . . . . .    C ADDR   0033H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0031. . . . . . . . . . . . . . . . .    C ADDR   006DH   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0032. . . . . . . . . . . . . . . . .    C ADDR   00E8H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0033. . . . . . . . . . . . . . . . .    C ADDR   00E3H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0034. . . . . . . . . . . . . . . . .    C ADDR   0095H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0037. . . . . . . . . . . . . . . . .    C ADDR   00ADH   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0038. . . . . . . . . . . . . . . . .    C ADDR   00EBH   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0039. . . . . . . . . . . . . . . . .    C ADDR   0019H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0040. . . . . . . . . . . . . . . . .    C ADDR   007EH   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0042. . . . . . . . . . . . . . . . .    C ADDR   003DH   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0043. . . . . . . . . . . . . . . . .    C ADDR   0082H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0045. . . . . . . . . . . . . . . . .    C ADDR   010FH   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0046. . . . . . . . . . . . . . . . .    C ADDR   00A8H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0049. . . . . . . . . . . . . . . . .    C ADDR   00C0H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0050. . . . . . . . . . . . . . . . .    C ADDR   0115H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0051. . . . . . . . . . . . . . . . .    C ADDR   0070H   R   SEG=?PR?_SWUTIL_SWAPENDIAN?SPIFLASH
?C0054. . . . . . . . . . . . . . . . .    C ADDR   002CH   R   SEG=?PR?_MEMUTIL_CLEARERAM?SPIFLASH
?C0055. . . . . . . . . . . . . . . . .    C ADDR   0026H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0056. . . . . . . . . . . . . . . . .    C ADDR   0278H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0057. . . . . . . . . . . . . . . . .    C ADDR   0041H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0059. . . . . . . . . . . . . . . . .    C ADDR   008EH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0060. . . . . . . . . . . . . . . . .    C ADDR   00C2H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0061. . . . . . . . . . . . . . . . .    C ADDR   01BFH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0062. . . . . . . . . . . . . . . . .    C ADDR   00D9H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0063. . . . . . . . . . . . . . . . .    C ADDR   00DEH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0064. . . . . . . . . . . . . . . . .    C ADDR   00E8H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0065. . . . . . . . . . . . . . . . .    C ADDR   0123H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0068. . . . . . . . . . . . . . . . .    C ADDR   0175H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0070. . . . . . . . . . . . . . . . .    C ADDR   0184H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0075. . . . . . . . . . . . . . . . .    C ADDR   01FAH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0076. . . . . . . . . . . . . . . . .    C ADDR   0237H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0077. . . . . . . . . . . . . . . . .    C ADDR   0258H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0081. . . . . . . . . . . . . . . . .    C ADDR   0051H   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
?C0082. . . . . . . . . . . . . . . . .    C ADDR   0035H   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
?C0083. . . . . . . . . . . . . . . . .    C ADDR   0125H   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
?C0086. . . . . . . . . . . . . . . . .    C ADDR   00A9H   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    59

?C0087. . . . . . . . . . . . . . . . .    C ADDR   0115H   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
?C0089. . . . . . . . . . . . . . . . .    C ADDR   0023H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0090. . . . . . . . . . . . . . . . .    C ADDR   0143H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0091. . . . . . . . . . . . . . . . .    C ADDR   013DH   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0092. . . . . . . . . . . . . . . . .    C ADDR   0046H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0093. . . . . . . . . . . . . . . . .    C ADDR   0075H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0094. . . . . . . . . . . . . . . . .    C ADDR   0085H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0095. . . . . . . . . . . . . . . . .    C ADDR   00D6H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0097. . . . . . . . . . . . . . . . .    C ADDR   0111H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0100. . . . . . . . . . . . . . . . .    C ADDR   0193H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0101. . . . . . . . . . . . . . . . .    C ADDR   0177H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0102. . . . . . . . . . . . . . . . .    C ADDR   0277H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0105. . . . . . . . . . . . . . . . .    C ADDR   01E6H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0106. . . . . . . . . . . . . . . . .    C ADDR   0252H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0108. . . . . . . . . . . . . . . . .    C ADDR   0275H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0109. . . . . . . . . . . . . . . . .    C ADDR   0062H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0110. . . . . . . . . . . . . . . . .    C ADDR   006AH   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0111. . . . . . . . . . . . . . . . .    C ADDR   008AH   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0112. . . . . . . . . . . . . . . . .    C ADDR   00C5H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0113. . . . . . . . . . . . . . . . .    C ADDR   00CDH   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0116. . . . . . . . . . . . . . . . .    C ADDR   0188H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0117. . . . . . . . . . . . . . . . .    C ADDR   0190H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0118. . . . . . . . . . . . . . . . .    C ADDR   01B0H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0119. . . . . . . . . . . . . . . . .    C ADDR   01D8H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?C0121. . . . . . . . . . . . . . . . .    C ADDR   004BH   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0122. . . . . . . . . . . . . . . . .    C ADDR   0061H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0123. . . . . . . . . . . . . . . . .    C ADDR   00C5H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0124. . . . . . . . . . . . . . . . .    C ADDR   00DBH   R   SEG=?PR?_DUMP_CODE?SPIFLASH
?C0125. . . . . . . . . . . . . . . . .    C ADDR   007CH   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0126. . . . . . . . . . . . . . . . .    C ADDR   00C8H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0127. . . . . . . . . . . . . . . . .    C ADDR   0107H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
?C0128. . . . . . . . . . . . . . . . .    C ADDR   0121H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0129. . . . . . . . . . . . . . . . .    C ADDR   01F6H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0130. . . . . . . . . . . . . . . . .    C ADDR   022FH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0131. . . . . . . . . . . . . . . . .    C ADDR   010DH   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0132. . . . . . . . . . . . . . . . .    C ADDR   0134H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0133. . . . . . . . . . . . . . . . .    C ADDR   00BEH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0134. . . . . . . . . . . . . . . . .    C ADDR   01C5H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0135. . . . . . . . . . . . . . . . .    C ADDR   01F8H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0136. . . . . . . . . . . . . . . . .    C ADDR   0231H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?C0137. . . . . . . . . . . . . . . . .    C ADDR   010FH   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
?C0138. . . . . . . . . . . . . . . . .    C ADDR   0136H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C0139. . . . . . . . . . . . . . . . .    C ADDR   024CH   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?C?IILDX. . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?IMUL . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LADD . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LLDIDATA . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LLDIDATA0. . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LLDXDATA . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LLDXDATA0. . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LMUL . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LOR. . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LSHL . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LSTIDATA . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LSTKIDATA. . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LSTKXDATA. . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?LSTXDATA . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?ULCMP. . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?ULSHR. . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?CO?SPIFLASH. . . . . . . . . . . . . .    C SEG    03A7H       REL=UNIT
?DT?_DOWNLOAD_UART2SFLASH?SPIFLASH. . .    D SEG    0001H       REL=UNIT
?DT?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH    D SEG    0001H       REL=UNIT
?DT?_SWUTIL_SWAPENDIAN?SPIFLASH . . . .    D SEG    0004H       REL=UNIT
?ID?DUMP_BACKUPCODE?SPIFLASH. . . . . .    I SEG    0006H       REL=UNIT
?ID?LOAD_SFLASH2CRAM?SPIFLASH . . . . .    I SEG    000BH       REL=UNIT
?ID?_DOWNLOAD_UART2SFLASH?SPIFLASH. . .    I SEG    0009H       REL=UNIT
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    60

?ID?_DUMP_CODE?SPIFLASH . . . . . . . .    I SEG    0006H       REL=UNIT
?ID?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH.    I SEG    0001H       REL=UNIT
?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH    I SEG    0011H       REL=UNIT
?LOAD_SFLASH2CRAM?FLASH_CRC_ERROR_HANDLE   C ADDR   0270H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
?PR?DUMP_BACKUPCODE?SPIFLASH. . . . . .    C SEG    0116H       REL=UNIT
?PR?LOAD_SFLASH2CRAM?SPIFLASH . . . . .    C SEG    027FH       REL=UNIT
?PR?_CRC_CCITT_UPDATE?SPIFLASH. . . . .    C SEG    002DH       REL=UNIT
?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH. . .    C SEG    0279H       REL=UNIT
?PR?_DUMP_CODE?SPIFLASH . . . . . . . .    C SEG    00ECH       REL=UNIT
?PR?_MEMUTIL_CLEARERAM?SPIFLASH . . . .    C SEG    002DH       REL=UNIT
?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH.    C SEG    0126H       REL=UNIT
?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH    C SEG    0278H       REL=UNIT
?PR?_SWUTIL_SWAPENDIAN?SPIFLASH . . . .    C SEG    0071H       REL=UNIT
?SC_0 . . . . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?CO?SPIFLASH
?SC_113 . . . . . . . . . . . . . . . .    C ADDR   0071H   R   SEG=?CO?SPIFLASH
?SC_138 . . . . . . . . . . . . . . . .    C ADDR   008AH   R   SEG=?CO?SPIFLASH
?SC_181 . . . . . . . . . . . . . . . .    C ADDR   00B5H   R   SEG=?CO?SPIFLASH
?SC_206 . . . . . . . . . . . . . . . .    C ADDR   00CEH   R   SEG=?CO?SPIFLASH
?SC_224 . . . . . . . . . . . . . . . .    C ADDR   00E0H   R   SEG=?CO?SPIFLASH
?SC_233 . . . . . . . . . . . . . . . .    C ADDR   00E9H   R   SEG=?CO?SPIFLASH
?SC_239 . . . . . . . . . . . . . . . .    C ADDR   00EFH   R   SEG=?CO?SPIFLASH
?SC_257 . . . . . . . . . . . . . . . .    C ADDR   0101H   R   SEG=?CO?SPIFLASH
?SC_28. . . . . . . . . . . . . . . . .    C ADDR   001CH   R   SEG=?CO?SPIFLASH
?SC_280 . . . . . . . . . . . . . . . .    C ADDR   0118H   R   SEG=?CO?SPIFLASH
?SC_30. . . . . . . . . . . . . . . . .    C ADDR   001EH   R   SEG=?CO?SPIFLASH
?SC_308 . . . . . . . . . . . . . . . .    C ADDR   0134H   R   SEG=?CO?SPIFLASH
?SC_341 . . . . . . . . . . . . . . . .    C ADDR   0155H   R   SEG=?CO?SPIFLASH
?SC_387 . . . . . . . . . . . . . . . .    C ADDR   0183H   R   SEG=?CO?SPIFLASH
?SC_40. . . . . . . . . . . . . . . . .    C ADDR   0028H   R   SEG=?CO?SPIFLASH
?SC_412 . . . . . . . . . . . . . . . .    C ADDR   019CH   R   SEG=?CO?SPIFLASH
?SC_468 . . . . . . . . . . . . . . . .    C ADDR   01D4H   R   SEG=?CO?SPIFLASH
?SC_48. . . . . . . . . . . . . . . . .    C ADDR   0030H   R   SEG=?CO?SPIFLASH
?SC_509 . . . . . . . . . . . . . . . .    C ADDR   01FDH   R   SEG=?CO?SPIFLASH
?SC_528 . . . . . . . . . . . . . . . .    C ADDR   0210H   R   SEG=?CO?SPIFLASH
?SC_560 . . . . . . . . . . . . . . . .    C ADDR   0230H   R   SEG=?CO?SPIFLASH
?SC_590 . . . . . . . . . . . . . . . .    C ADDR   024EH   R   SEG=?CO?SPIFLASH
?SC_626 . . . . . . . . . . . . . . . .    C ADDR   0272H   R   SEG=?CO?SPIFLASH
?SC_656 . . . . . . . . . . . . . . . .    C ADDR   0290H   R   SEG=?CO?SPIFLASH
?SC_695 . . . . . . . . . . . . . . . .    C ADDR   02B7H   R   SEG=?CO?SPIFLASH
?SC_719 . . . . . . . . . . . . . . . .    C ADDR   02CFH   R   SEG=?CO?SPIFLASH
?SC_72. . . . . . . . . . . . . . . . .    C ADDR   0048H   R   SEG=?CO?SPIFLASH
?SC_754 . . . . . . . . . . . . . . . .    C ADDR   02F2H   R   SEG=?CO?SPIFLASH
?SC_776 . . . . . . . . . . . . . . . .    C ADDR   0308H   R   SEG=?CO?SPIFLASH
?SC_807 . . . . . . . . . . . . . . . .    C ADDR   0327H   R   SEG=?CO?SPIFLASH
?SC_837 . . . . . . . . . . . . . . . .    C ADDR   0345H   R   SEG=?CO?SPIFLASH
?SC_865 . . . . . . . . . . . . . . . .    C ADDR   0361H   R   SEG=?CO?SPIFLASH
?SC_898 . . . . . . . . . . . . . . . .    C ADDR   0382H   R   SEG=?CO?SPIFLASH
?_DOWNLOAD_UART2SFLASH?BYTE . . . . . .    D ADDR   0000H   R   SEG=?DT?_DOWNLOAD_UART2SFLASH?SPIFLASH
?_DOWNLOAD_UART2SFLASH?CHECK_NEXT_BANK.    C ADDR   01CAH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?_DOWNLOAD_UART2SFLASH?CONT_PROGSFLASH.    C ADDR   012CH   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?_DOWNLOAD_UART2SFLASH?END_SFLASH_PROGRAMMIC ADDR   0261H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?_DOWNLOAD_UART2SFLASH?PROGRAM_NEXT_BANK   C ADDR   0050H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
?_MEMUTIL_CLEARERAM?ERASE_RAM . . . . .    C ADDR   0009H   R   SEG=?PR?_MEMUTIL_CLEARERAM?SPIFLASH
?_PRINTF?BYTE . . . . . . . . . . . . .    D ADDR   -----       EXT
?_SPIFLASH_BACKUPCODEIMAGE?CONT_BKPSFLASH  C ADDR   0062H   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
?_SPIFLASH_RESTORECODEIMAGE?BYTE. . . .    D ADDR   0000H   R   SEG=?DT?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?_SPIFLASH_RESTORECODEIMAGE?CONT_RESTORECODC ADDR   019FH   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?_SPIFLASH_RESTORECODEIMAGE?END_SFLASH_RESTC ADDR   025BH   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
?_SPIFLASH_WRITEBYTE?BYTE . . . . . . .    D ADDR   -----       EXT
?_SWUTIL_SWAPENDIAN?BYTE. . . . . . . .    D ADDR   0000H   R   SEG=?DT?_SWUTIL_SWAPENDIAN?SPIFLASH
AC. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . . . . .    D ADDR   00E0H   A   
ADDR32_1. . . . . . . . . . . . . . . .    X ADDR   -----       EXT
ADDR?144. . . . . . . . . . . . . . . .    I ADDR   0002H   R   SEG=?ID?LOAD_SFLASH2CRAM?SPIFLASH
ADDR?250. . . . . . . . . . . . . . . .    I ADDR   0000H   R   SEG=?ID?_DUMP_CODE?SPIFLASH
ADDR?354. . . . . . . . . . . . . . . .    I ADDR   0000H   R   SEG=?ID?DUMP_BACKUPCODE?SPIFLASH
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    61

ADDR_COUNT?663. . . . . . . . . . . . .    I ADDR   0003H   R   SEG=?ID?_DOWNLOAD_UART2SFLASH?SPIFLASH
ADDR_COUNT?872. . . . . . . . . . . . .    I ADDR   0003H   R   SEG=?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
AR0 . . . . . . . . . . . . . . . . . .    D ADDR   0000H   A   
AR1 . . . . . . . . . . . . . . . . . .    D ADDR   0001H   A   
AR2 . . . . . . . . . . . . . . . . . .    D ADDR   0002H   A   
AR3 . . . . . . . . . . . . . . . . . .    D ADDR   0003H   A   
AR4 . . . . . . . . . . . . . . . . . .    D ADDR   0004H   A   
AR5 . . . . . . . . . . . . . . . . . .    D ADDR   0005H   A   
AR6 . . . . . . . . . . . . . . . . . .    D ADDR   0006H   A   
AR7 . . . . . . . . . . . . . . . . . .    D ADDR   0007H   A   
AUTO_BACKUP?660 . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_DOWNLOAD_UART2SFLASH?SPIFLASH
AUTO_CNF?869. . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
B . . . . . . . . . . . . . . . . . . .    D ADDR   00F0H   A   
BANKS?143 . . . . . . . . . . . . . . .    I ADDR   0001H   R   SEG=?ID?LOAD_SFLASH2CRAM?SPIFLASH
BANKS?253 . . . . . . . . . . . . . . .    I ADDR   0005H   R   SEG=?ID?_DUMP_CODE?SPIFLASH
BANKS?357 . . . . . . . . . . . . . . .    I ADDR   0005H   R   SEG=?ID?DUMP_BACKUPCODE?SPIFLASH
BANKSEL . . . . . . . . . . . . . . . .    D ADDR   009FH   A   
BANK_ID?874 . . . . . . . . . . . . . .    I ADDR   000BH   R   SEG=?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
BASE_ADDR_OFFSET?873. . . . . . . . . .    I ADDR   0007H   R   SEG=?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
C?661 . . . . . . . . . . . . . . . . .    I ADDR   0000H   R   SEG=?ID?_DOWNLOAD_UART2SFLASH?SPIFLASH
CALC_CRC?147. . . . . . . . . . . . . .    I ADDR   0008H   R   SEG=?ID?LOAD_SFLASH2CRAM?SPIFLASH
CALC_CRC?871. . . . . . . . . . . . . .    I ADDR   0001H   R   SEG=?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
CRLA_H. . . . . . . . . . . . . . . . .    D ADDR   00F4H   A   
CRLA_L. . . . . . . . . . . . . . . . .    D ADDR   00F3H   A   
CRSA_H. . . . . . . . . . . . . . . . .    D ADDR   00F2H   A   
CRSA_L. . . . . . . . . . . . . . . . .    D ADDR   00F1H   A   
CY. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.7 A   
DAT1?768. . . . . . . . . . . . . . . .    I ADDR   0000H   R   SEG=?ID?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
DAT1?870. . . . . . . . . . . . . . . .    I ADDR   0000H   R   SEG=?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
DATCNT?145. . . . . . . . . . . . . . .    I ADDR   0004H   R   SEG=?ID?LOAD_SFLASH2CRAM?SPIFLASH
DBYTE?142 . . . . . . . . . . . . . . .    I ADDR   0000H   R   SEG=?ID?LOAD_SFLASH2CRAM?SPIFLASH
DBYTE?252 . . . . . . . . . . . . . . .    I ADDR   0004H   R   SEG=?ID?_DUMP_CODE?SPIFLASH
DBYTE?356 . . . . . . . . . . . . . . .    I ADDR   0004H   R   SEG=?ID?DUMP_BACKUPCODE?SPIFLASH
DISABLEWRCRAM . . . . . . . . . . . . .    C ADDR   -----       EXT
DPH . . . . . . . . . . . . . . . . . .    D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . . . . .    D ADDR   0082H   A   
DUMP_BACKUPCODE . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?DUMP_BACKUPCODE?SPIFLASH
EA. . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.7 A   
ENABLEWRCRAM. . . . . . . . . . . . . .    C ADDR   -----       EXT
ERAM2SFLASHADDR . . . . . . . . . . . .    X ADDR   -----       EXT
ERRCNT. . . . . . . . . . . . . . . . .    I ADDR   -----       EXT
ES. . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.3 A   
EX0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.2 A   
F0. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.5 A   
FLAG_ERROR?148. . . . . . . . . . . . .    I ADDR   000AH   R   SEG=?ID?LOAD_SFLASH2CRAM?SPIFLASH
FLASH_VERIFY_ERROR?666. . . . . . . . .    I ADDR   0008H   R   SEG=?ID?_DOWNLOAD_UART2SFLASH?SPIFLASH
FLASH_VERIFY_ERROR?875. . . . . . . . .    I ADDR   000CH   R   SEG=?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
I?251 . . . . . . . . . . . . . . . . .    I ADDR   0002H   R   SEG=?ID?_DUMP_CODE?SPIFLASH
I?355 . . . . . . . . . . . . . . . . .    I ADDR   0002H   R   SEG=?ID?DUMP_BACKUPCODE?SPIFLASH
IE. . . . . . . . . . . . . . . . . . .    D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.3 A   
INT0. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.2 A   
INT1. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.3 A   
IP. . . . . . . . . . . . . . . . . . .    D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.2 A   
LOAD_SFLASH2CRAM. . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?LOAD_SFLASH2CRAM?SPIFLASH
MAX_ADDR_COUNT?664. . . . . . . . . . .    I ADDR   0005H   R   SEG=?ID?_DOWNLOAD_UART2SFLASH?SPIFLASH
MAX_BANK_SIZE?876 . . . . . . . . . . .    I ADDR   000DH   R   SEG=?ID?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
MEMCTRL . . . . . . . . . . . . . . . .    D ADDR   00F8H   A   
MEM_CRC16?662 . . . . . . . . . . . . .    I ADDR   0001H   R   SEG=?ID?_DOWNLOAD_UART2SFLASH?SPIFLASH
OV. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.2 A   
A51 MACRO ASSEMBLER  SPIFLASH                                                             10/14/2016 00:11:19 PAGE    62

P . . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . . . . .    D ADDR   0080H   A   
P1. . . . . . . . . . . . . . . . . . .    D ADDR   0090H   A   
P2. . . . . . . . . . . . . . . . . . .    D ADDR   00A0H   A   
P3. . . . . . . . . . . . . . . . . . .    D ADDR   00B0H   A   
PCON. . . . . . . . . . . . . . . . . .    D ADDR   0087H   A   
PROGCNT?146 . . . . . . . . . . . . . .    I ADDR   0006H   R   SEG=?ID?LOAD_SFLASH2CRAM?SPIFLASH
PS. . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.4 A   
PSW . . . . . . . . . . . . . . . . . .    D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.3 A   
PX0 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.2 A   
RB8 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.2 A   
RD. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.7 A   
REN . . . . . . . . . . . . . . . . . .    B ADDR   0098H.4 A   
RI. . . . . . . . . . . . . . . . . . .    B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.4 A   
RXD . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
SBUF. . . . . . . . . . . . . . . . . .    D ADDR   0099H   A   
SCON. . . . . . . . . . . . . . . . . .    D ADDR   0098H   A   
SFLASHADDR. . . . . . . . . . . . . . .    X ADDR   -----       EXT
SM0 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.7 A   
SM1 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.6 A   
SM2 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.5 A   
SP. . . . . . . . . . . . . . . . . . .    D ADDR   0081H   A   
SPIFLASH. . . . . . . . . . . . . . . .    N NUMB   -----       
SPIFLASH_ERASEBACKUP256K. . . . . . . .    C ADDR   -----       EXT
SPIFLASH_ERASELOWER256K . . . . . . . .    C ADDR   -----       EXT
T0. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.4 A   
T1. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.5 A   
TB8 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.3 A   
TCON. . . . . . . . . . . . . . . . . .    D ADDR   0088H   A   
TEMP_DATA?665 . . . . . . . . . . . . .    I ADDR   0007H   R   SEG=?ID?_DOWNLOAD_UART2SFLASH?SPIFLASH
TF0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.7 A   
TH0 . . . . . . . . . . . . . . . . . .    D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . . . . . .    D ADDR   008DH   A   
TI. . . . . . . . . . . . . . . . . . .    B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . . . . .    D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . . . . .    D ADDR   008BH   A   
TMOD. . . . . . . . . . . . . . . . . .    D ADDR   0089H   A   
TR0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.6 A   
TXD . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.1 A   
UART2ERAMADDR . . . . . . . . . . . . .    X ADDR   -----       EXT
VAR32?458 . . . . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?_SWUTIL_SWAPENDIAN?SPIFLASH
WR. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.6 A   
_CRC_CCITT_UPDATE . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_CRC_CCITT_UPDATE?SPIFLASH
_DOWNLOAD_UART2SFLASH . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_DOWNLOAD_UART2SFLASH?SPIFLASH
_DUMP_CODE. . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_DUMP_CODE?SPIFLASH
_GET1CHAR . . . . . . . . . . . . . . .    C ADDR   -----       EXT
_MEMUTIL_CLEARERAM. . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_MEMUTIL_CLEARERAM?SPIFLASH
_PARSEHEXRECORD . . . . . . . . . . . .    C ADDR   -----       EXT
_PRINTF . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
_SPIFLASH_BACKUPCODEIMAGE . . . . . . .    C ADDR   0000H   R   SEG=?PR?_SPIFLASH_BACKUPCODEIMAGE?SPIFLASH
_SPIFLASH_READBYTE. . . . . . . . . . .    C ADDR   -----       EXT
_SPIFLASH_RESTORECODEIMAGE. . . . . . .    C ADDR   0000H   R   SEG=?PR?_SPIFLASH_RESTORECODEIMAGE?SPIFLASH
_SPIFLASH_WRITEBYTE . . . . . . . . . .    C ADDR   -----       EXT
_SPIFLASH_WRSR_UNLOCK . . . . . . . . .    C ADDR   -----       EXT
_SWUTIL_SWAPENDIAN. . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?_SWUTIL_SWAPENDIAN?SPIFLASH


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
